{"version":3,"sources":["clAdapters/base/Adapter.js"],"names":["Adapter","credentials","Object","defineProperty","get","configurable","enumerable","Error"],"mappings":"snCAAA;;;;;;MAOqBA,Q,YAGnB,kBAAc,+BACZ;;OAGA,KAAKC,WAAL,CAAmB,EAAnB,CAEA;;;;;;OAOAC,OAAOC,cAAP,CAAsB,IAAtB,CAA4B,cAA5B,CAA4C,CAC1CC,IAAK,cAAW,CACd,MAAO,EAAP,CACD,CAHyC,CAI1CC,aAAc,IAJ4B,CAK1CC,WAAY,IAL8B,CAA5C,EAOD,CAGD;;;;kPAMQ,IAAIC,MAAJ,CAAU,iCAAV,C,iIAIR;;;;;0CAMQ,CAAE,CAGV;;;;;;;;;wDAUc,gBAAmB,CAC/B,KAAM,IAAIA,MAAJ,CAAU,iCAAV,CAAN,CACD,C,uCAzDkBP,O","file":"clAdapters/base/Adapter.js","sourcesContent":["/**\n * Abstract base class for all adapters\n *\n * @class\n * @abstract\n * @return {Adapter}\n */\nexport default class Adapter {\n\n\n  constructor() {\n    /**\n     * @member {Object}\n     */\n    this.credentials = {};\n\n    /**\n     * If this adapter supports external entity fields, it must provide\n     * a key to uniquely associate that field as having come from this\n     * adapter instance. For example, a NetSuite adapter may simply\n     * expose its `credentials.account` value also as its `extEntityKey`\n     * @member {String}\n     */\n    Object.defineProperty(this, 'extEntityKey', {\n      get: function() {\n        return '';\n      },\n      configurable: true,\n      enumerable: true\n    });\n  }\n\n\n  /**\n   * Connects to datasource. Requires `credentials` member to be filled out\n   * @virtual\n   * @return {Promise.<Adapter>} initialzed adapter\n   */\n  async init() {\n    throw new Error('Must be implemented by subclass');\n  }\n\n\n  /**\n   * Adapters may be stateful. For instance, they may need to store\n   * auth tokens, search continuation ids, etc or cache results.\n   * Invoke this method to reset an adapter to a clean state, which\n   * requires recalling `init()`\n   */\n  reset() {}\n\n\n  /**\n   * Gets specified field data from datasource\n   * @param  {Object} field adapter field\n   * @param  {Object} [query] optional params\n   * @param  {Number} [query.skip=0] index to skip to\n   * @param  {Number} [query.limit] results page size\n   * @return {Promise.<Object>} result object\n   * @return {Number} result.count total results\n   * @return {Object[]} result.results result objects\n   */\n  getFieldData( /*field, query*/ ) {\n    throw new Error('Must be implemented by subclass');\n  }\n\n}\n"],"sourceRoot":"/source/"}