{"version":3,"sources":["clAdapters/base/Adapter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAOqB,OAAO;AAGf,WAHQ,OAAO,GAGZ;0BAHK,OAAO;;;;;AAOxB,QAAI,CAAC,WAAW,GAAG,EAAE,CAAC;;;;;;;;;AAStB,UAAM,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;AAC1C,SAAG,EAAE,eAAW;AACd,eAAO,EAAE,CAAC;OACX;AACD,kBAAY,EAAE,IAAI;AAClB,gBAAU,EAAE,IAAI;KACjB,CAAC,CAAC;GACJ;;;;;;;;eAvBkB,OAAO;;WA+BhB;;;;kBACF,IAAI,KAAK,CAAC,iCAAiC,CAAC;;;;;;;KACnD;;;;;;;;;;WASI,iBAAG,EAAE;;;;;;;;;;;;;;WAaE,wCAAqB;AAC/B,YAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;KACpD;;;SAzDkB,OAAO;;;qBAAP,OAAO","file":"clAdapters/base/Adapter.js","sourcesContent":["/**\r\n * Abstract base class for all adapters\r\n *\r\n * @class\r\n * @abstract\r\n * @return {Adapter}\r\n */\r\nexport default class Adapter {\r\n\r\n\r\n  constructor() {\r\n    /**\r\n     * @member {Object}\r\n     */\r\n    this.credentials = {};\r\n\r\n    /**\r\n     * If this adapter supports external entity fields, it must provide\r\n     * a key to uniquely associate that field as having come from this\r\n     * adapter instance. For example, a NetSuite adapter may simply\r\n     * expose its `credentials.account` value also as its `extEntityKey`\r\n     * @member {String}\r\n     */\r\n    Object.defineProperty(this, 'extEntityKey', {\r\n      get: function() {\r\n        return '';\r\n      },\r\n      configurable: true,\r\n      enumerable: true\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Connects to datasource. Requires `credentials` member to be filled out\r\n   * @virtual\r\n   * @return {Promise.<Adapter>} initialzed adapter\r\n   */\r\n  async init() {\r\n    throw new Error('Must be implemented by subclass');\r\n  }\r\n\r\n\r\n  /**\r\n   * Adapters may be stateful. For instance, they may need to store\r\n   * auth tokens, search continuation ids, etc or cache results.\r\n   * Invoke this method to reset an adapter to a clean state, which\r\n   * requires recalling `init()`\r\n   */\r\n  reset() {}\r\n\r\n\r\n  /**\r\n   * Gets specified field data from datasource\r\n   * @param  {Object} field adapter field\r\n   * @param  {Object} [query] optional params\r\n   * @param  {Number} [query.skip=0] index to skip to\r\n   * @param  {Number} [query.limit] results page size\r\n   * @return {Promise.<Object>} result object\r\n   * @return {Number} result.count total results\r\n   * @return {Object[]} result.results result objects\r\n   */\r\n  getFieldData( /*field, query*/ ) {\r\n    throw new Error('Must be implemented by subclass');\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}