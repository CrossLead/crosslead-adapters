{"version":3,"sources":["clAdapters/office365/base/Adapter.js"],"names":["Office365BaseAdapter","_config","_service","credentials","init","console","log","constructor","name","email","connectionData","today","utc","startOf","filterStartDate","add","toDate","filterEndDate","getBatchData","emailAfterMapping","data","success","results","accessToken","accessTokenExpires","Date","clientId","tenantId","certificate","certificateThumbprint","apiVersion","options","tokenRequestUrl","jwtHeader","getTime","jwtPayload","v4","encode","Buffer","JSON","stringify","header","toString","encodedJwtHeader","encodedJwtPayload","stringToSign","encodedSignedJwtInfo","createSign","update","sign","tokenRequestFormData","client_id","client_assertion_type","grant_type","resource","client_assertion","tokenRequestOptions","method","port","uri","formData","tokenData","parse","access_token","Error","messageData","message","replace","statusCode","userData","pageToGet","userProfile","additionalFields","$filter","apiType","maxPages","recordsPerPage","getAccessToken","skip","baseFields","params","startDateTime","toISOString","endDateTime","$top","$skip","$select","join","urlParams","map","value","key","requestOptions","headers","Authorization","Accept","records","e","getAttachments","length","recIter","rec","mid","Id","attachments","attachmentOptions","attachmentData","push","getUserData","Object","assign","errorMessage"],"mappings":"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","file":"clAdapters/office365/base/Adapter.js","sourcesContent":["import uuid                       from 'node-uuid';\nimport crypto                     from 'crypto';\nimport request                    from 'request-promise';\nimport moment                     from 'moment';\nimport _                          from 'lodash';\nimport Adapter                    from '../../base/Adapter';\nimport Office365BaseService       from './Service';\nimport Office365BaseConfiguration from './Configuration';\n\n/**\n * Common reset, runConnectionTest, and getAccessToken methods...\n */\nexport default class Office365BaseAdapter extends Adapter {\n\n\n  reset() {\n    delete this._config;\n    delete this._service;\n    return this;\n  }\n\n  async init() {\n    this._config  = new Office365BaseConfiguration(this.credentials);\n    this._service = new Office365BaseService(this._config);\n    await this._service.init();\n    console.log(`Successfully initialized ${this.constructor.name} for email: ${this.credentials.email}`);\n    return this;\n  }\n\n\n  async runConnectionTest(connectionData) {\n    this._config = new Office365BaseConfiguration(connectionData.credentials);\n\n    const today           = () => moment().utc().startOf('day'),\n          filterStartDate = today().add(-1, 'days').toDate(),\n          filterEndDate   = today().toDate(),\n          data            = await this.getBatchData(\n                              [ {\n                                email: this._config.credentials.email,\n                                emailAfterMapping: this._config.credentials.email\n                              } ],\n                              filterStartDate,\n                              filterEndDate,\n                              ''\n                            );\n\n    //to see if it really worked, we need to pass in the first result\n    return data.success && data.results[0] ? data.results[0] : data;\n  }\n\n\n  async getAccessToken() {\n\n    if (this.accessToken && this.accessTokenExpires > new Date()) {\n      return this.accessToken;\n    }\n\n    const {\n      credentials : {\n        clientId,\n        tenantId,\n        certificate,\n        certificateThumbprint\n      },\n      options : {\n        apiVersion\n      }\n    } = this._config;\n\n    const tokenRequestUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/token?api-version=${apiVersion}`;\n\n    const jwtHeader = {\n      'alg': 'RS256',\n      'x5t': certificateThumbprint\n    };\n\n    // expire token in one hour\n    const accessTokenExpires = ((new Date()).getTime() + 360000) / 1000;\n\n    // grab new access token 10 seconds before expiration\n    this.accessTokenExpires = new Date(accessTokenExpires * 1000 - 10000);\n\n    const jwtPayload = {\n      'aud': tokenRequestUrl,\n      'exp': accessTokenExpires,\n      'iss': clientId,\n      'jti': uuid.v4(),\n      'nbf': accessTokenExpires - 2 * 3600, // one hour before now\n      'sub': clientId\n    };\n\n    const encode               = header => new Buffer(JSON.stringify(header)).toString('base64'),\n          encodedJwtHeader     = encode(jwtHeader),\n          encodedJwtPayload    = encode(jwtPayload),\n          stringToSign         = encodedJwtHeader + '.' + encodedJwtPayload,\n          encodedSignedJwtInfo = crypto\n            .createSign('RSA-SHA256')\n            .update(stringToSign)\n            .sign(certificate, 'base64');\n\n    const tokenRequestFormData = {\n      client_id: clientId,\n      client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n      grant_type: 'client_credentials',\n      resource: 'https://outlook.office365.com/',\n      client_assertion: encodedJwtHeader + '.' + encodedJwtPayload + '.' + encodedSignedJwtInfo\n    };\n\n    const tokenRequestOptions = {\n      method: 'POST',\n      port: 443,\n      uri: tokenRequestUrl,\n      formData: tokenRequestFormData,\n    };\n\n    try {\n      const tokenData = JSON.parse(await request(tokenRequestOptions));\n      if (tokenData && tokenData.access_token) {\n        return this.accessToken = tokenData.access_token;\n      } else {\n        throw new Error('Could not get access token.');\n      }\n    } catch (tokenData) {\n      if (tokenData.name === 'StatusCodeError') {\n        const messageData = JSON.parse(\n          tokenData\n            .message\n            .replace(tokenData.statusCode + ' - ', '')\n            .replace(/\\\"/g, '\"')\n        );\n\n        throw new Error(messageData);\n      } else {\n        throw new Error(tokenData);\n      }\n    }\n  }\n\n\n  async getUserData(options, userData, pageToGet = 1) {\n    const {\n      userProfile,\n      filterStartDate,\n      filterEndDate,\n      additionalFields,\n      $filter,\n      apiType,\n      maxPages = 20,\n      recordsPerPage = 25\n    } = options;\n\n    // accumulation of data\n    userData = userData || { userProfile, filterStartDate, filterEndDate };\n\n    const accessToken          = await this.getAccessToken(),\n          { apiVersion }       = this._config.options,\n          skip                 = (pageToGet - 1) * recordsPerPage,\n          // extract static property...\n          { baseFields }       = this.constructor,\n          // parameters to query email with...\n          params               = {\n            startDateTime: filterStartDate.toISOString(),\n            endDateTime: filterEndDate.toISOString(),\n            $top:     recordsPerPage,\n            $skip:    skip,\n            $select:  baseFields.join(',') + (additionalFields ? `,${additionalFields}` : ''),\n          };\n    if(apiType !== 'calendarview') {\n      params.$filter = $filter;\n    }\n\n    // format parameters for url\n    const urlParams = _(params)\n      .map((value, key) => `${key}=${value}`)\n      .join('&');\n\n    const requestOptions = {\n      method: 'GET',\n      uri: `https://outlook.office365.com/api/v${apiVersion}/users('${userProfile.emailAfterMapping}')/${apiType}?${urlParams}`,\n      headers : {\n        Authorization: `Bearer ${accessToken}`,\n        Accept:        'application/json;odata.metadata=none'\n      }\n    };\n\n    try {\n      userData.success = true;\n\n      const { value: records } = JSON.parse(await request(requestOptions)) || {};\n      const e = userProfile.emailAfterMapping;\n\n      if(userProfile.getAttachments && records.length) {\n        for(let recIter = 0; recIter < records.length; recIter++) {\n          const rec = records[recIter];\n          const mid = rec.Id || '';\n          rec.attachments = [];\n          const attachmentOptions = {\n            method: 'GET',\n            uri: `https://outlook.office365.com/api/v${apiVersion}/users('${e}')/messages/${mid}/attachments`,\n            headers : {\n              Authorization: `Bearer ${accessToken}`,\n              Accept:        'application/json;odata.metadata=none'\n            }\n          };\n          const attachmentData = JSON.parse(await request(attachmentOptions)) || {};\n          if(attachmentData.value && attachmentData.value.length > 0) {\n            rec.attachments = attachmentData.value;\n          }\n        }\n      }\n\n      if (records && pageToGet === 1) {\n        userData.data = records;\n      }\n\n      if (records && pageToGet > 1) {\n        userData.data.push(...records);\n      }\n\n      // if the returned results are the maximum number of records per page,\n      // we are not done yet, so recurse...\n      if (records.length === recordsPerPage && pageToGet <= maxPages) {\n        return this.getUserData(options, userData, pageToGet + 1);\n      } else {\n        return userData;\n      }\n\n    } catch (err) {\n      Object.assign(userData, {\n        success: false,\n        errorMessage: err.name !== 'StatusCodeError' ?\n                        JSON.stringify(err)          :\n                        JSON.parse(\n                              err.message\n                                 .replace(err.statusCode + ' - ', '')\n                                 .replace(/\\\"/g, '\"')\n                            )\n                            .message\n      });\n      return true;\n    }\n\n  }\n\n}\n"],"sourceRoot":"/source/"}