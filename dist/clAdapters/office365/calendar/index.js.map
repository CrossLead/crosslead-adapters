{"version":3,"sources":["clAdapters/office365/calendar/index.js"],"names":[],"mappings":"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","file":"clAdapters/office365/calendar/index.js","sourcesContent":["import request                    from 'request-promise';\nimport moment                     from 'moment';\nimport _                          from 'lodash';\nimport Office365BaseAdapter       from '../base/Adapter';\n\n\n/**\n * Office 365 Calendar adapter\n */\nexport default class Office365CalendarAdapter extends Office365BaseAdapter {\n\n  async getBatchData(emails, filterStartDate, filterEndDate, additionalFields) {\n\n    const { emailFieldNameMap } = Office365Adapter,\n          dataAdapterRunStats   = {\n            emails,\n            filterStartDate,\n            filterEndDate,\n            success: false,\n            runDate: moment().utc().toDate()\n          };\n\n    try {\n\n      const emailData = await* emails.map(email => this.getEmailsForUser(\n        email,\n        filterStartDate,\n        filterEndDate,\n        additionalFields\n      ));\n\n      // replace data keys with desired mappings...\n      const results = _.map(emailData, user => {\n        const emailArray = (user.success && user.data[emailFieldNameMap.emails]) || [];\n        return {\n          email:            user.email,\n          filterStartDate:  user.filterStartDate,\n          filterEndDate:    user.filterEndDate,\n          success:          user.success,\n          errorMessage:     user.errorMessage,\n          // map data with desired key names...\n          data: _.map(emailArray, originalEmailMessage => {\n            const mappedEmailMessage = {};\n\n            // change to desired names\n            _.each(emailFieldNameMap, (have, want) => {\n              const mapped = _.get(originalEmailMessage, have);\n              mappedEmailMessage[want] = /^dateTime/.test(want) ? new Date(mapped) : mapped;\n            });\n\n            // grab info from different correspondent types...\n            // (since we're using an array literal here, 'for of' syntax will compile reasonably)\n            for (const type of ['to', 'cc', 'bcc']) {\n              const key = `${type}Recipient`;\n              mappedEmailMessage[`${key}s`] = originalEmailMessage[emailFieldNameMap[`${key}s`]]\n                .map(recipient => {\n                  return {\n                    address: _.get(recipient, emailFieldNameMap[`${key}Address`]),\n                    name:    _.get(recipient, emailFieldNameMap[`${key}Name`])\n                  }\n                });\n            }\n\n            return mappedEmailMessage;\n          })\n        };\n      });\n\n      // return results and success!\n      return {\n        ...dataAdapterRunStats,\n        results,\n        success: true\n      };\n\n    } catch (errorMessage) {\n      console.log(errorMessage.stack);\n      console.log('Office365 GetBatchData Error: ' + JSON.stringify(errorMessage));\n      return { ...dataAdapterRunStats, errorMessage };\n    }\n\n  }\n\n  async getEmailsForUser(email, filterStartDate, filterEndDate, additionalFields, emailData, pageToGet=1) {\n    // accumulation of data\n    emailData = emailData || { email, filterStartDate, filterEndDate };\n\n    const accessToken     = await this.getAccessToken(),\n          { apiVersion }  = this._config.options,\n          recordsPerPage  = 25,\n          maxPages        = 20,\n          skip            = ((pageToGet -1) * recordsPerPage) + 1,\n          // parameters to query email with...\n          params          = {\n            $top:     recordsPerPage,\n            $skip:    skip,\n            $select:  Office365Adapter.baseFields.join(',') + additionalFields,\n            $filter:  ` IsDraft eq false\n                          and DateTimeSent ge ${filterStartDate.toISOString().substring(0, 10)}\n                          and DateTimeSent lt ${filterEndDate.toISOString().substring(0, 10)}\n                      `.replace(/\\s+/g, ' ')\n                       .trim()\n          };\n\n    // format parameters for url\n    const urlParams = _(params)\n      .map((value, key) => `${key}=${value}`)\n      .join('&');\n\n    const emailRequestOptions = {\n      method: 'GET',\n      uri: `https://outlook.office365.com/api/v${apiVersion}/users('${email}')/messages?${urlParams}`,\n      headers : {\n        Authorization: `Bearer ${accessToken}`,\n        Accept:        'application/json;odata.metadata=none'\n      }\n    };\n\n    try {\n      emailData.success = true;\n      const parsedBody = JSON.parse(await request(emailRequestOptions));\n\n      if (parsedBody && pageToGet === 1) {\n        emailData.data = parsedBody;\n      }\n\n      if (parsedBody.value && pageToGet > 1) {\n        emailData.data.value.push(...parsedBody.value);\n      }\n\n      // if the returned results are the maximum number of records per page,\n      // we are not done yet, so recurse...\n      if (parsedBody && parsedBody.value.length === recordsPerPage && pageToGet <= maxPages) {\n        return this.getEmailsForUser(email, filterStartDate, filterEndDate, additionalFields, emailData, pageToGet + 1);\n      } else {\n        return emailData;\n      }\n\n    } catch (err) {\n      Object.assign(emailData, {\n        success: false,\n        errorMessage: err.name !== 'StatusCodeError' ?\n                        JSON.stringify(err)          :\n                        JSON.parse(\n                              err.message\n                                 .replace(err.statusCode + ' - ', '')\n                                 .replace(/\\\"/g, '\"')\n                            )\n                            .message\n      });\n      return true;\n    }\n\n  }\n\n\n}\n"],"sourceRoot":"/source/"}