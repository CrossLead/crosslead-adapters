{"version":3,"sources":["clAdapters/office365/calendar/index.js"],"names":["Office365CalendarAdapter","userProfiles","filterStartDate","filterEndDate","additionalFields","fieldNameMap","constructor","dataAdapterRunStats","emails","success","runDate","utc","toDate","Promise","all","map","getUserData","userProfile","apiType","eventData","results","user","errorMessage","data","mappedEvent","each","have","want","mapped","get","originalEvent","undefined","test","Date","responseStatus","Response","address","attendee","name","response","console","log","stack","JSON","stringify","baseFields"],"mappings":"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","file":"clAdapters/office365/calendar/index.js","sourcesContent":["import moment                     from 'moment';\nimport _                          from 'lodash';\nimport Office365BaseAdapter       from '../base/Adapter';\n\n\n/**\n * Office 365 Calendar adapter\n */\nexport default class Office365CalendarAdapter extends Office365BaseAdapter {\n\n  // collect these fields always...\n  static baseFields = [\n    'Id',\n    'Attendees',\n    'Calendar',\n    'Categories',\n    'DateTimeCreated',\n    'DateTimeLastModified',\n    'End',\n    'EndTimeZone',\n    'HasAttachments',\n    'Importance',\n    'iCalUID',\n    'IsAllDay',\n    'IsCancelled',\n    'IsOrganizer',\n    'Location',\n    'Organizer',\n    'Recurrence',\n    'ResponseRequested',\n    'ResponseStatus',\n    'SeriesMasterId',\n    'ShowAs',\n    'Start',\n    'StartTimeZone',\n    'Subject',\n    'Type',\n    'WebLink',\n    'Sensitivity'\n  ]\n\n  // convert the names of the api response data\n  static fieldNameMap = {\n    // Desired...                          // Given...\n    'eventId':                             'Id',\n    'attendees':                           'Attendees',\n    'calendarName':                        'Calendar',\n    'categories':                          'Categories',\n    'dateTimeCreated':                     'DateTimeCreated',\n    'dateTimeLastModified':                'DateTimeLastModified',\n    'attendeeAddress':                     'EmailAddress.Address',\n    'attendeeName':                        'EmailAddress.Name',\n    'hasAttachments':                      'HasAttachments',\n    'importance':                          'Importance',\n    'iCalUId':                             'iCalUId',\n    'allDay':                              'IsAllDay',\n    'canceled':                            'IsCancelled',\n    'isOrganizer':                         'IsOrganizer',\n    'locationName':                        'Location.DisplayName',\n    'locationAddressStreet':               'Location.Address.Street',\n    'locationAddressCity':                 'Location.Address.City',\n    'locationAddressState':                'Location.Address.State',\n    'locationAddressCountryOrRegion':      'Location.Address.CountryOrRegion',\n    'locationCoordinatesAccuracy':         'Location.Coordinates.Accuracy',\n    'locationCoordinatesAltitude':         'Location.Coordinates.Altitude',\n    'locationCoordinatesAltitudeAccuracy': 'Location.Coordinates.AltitudeAccuracy',\n    'locationCoordinatesLatitude':         'Location.Coordinates.Latitude',\n    'locationCoordinatesLongitude':        'Location.Coordinates.Longitude',\n    'organizerName':                       'Organizer.EmailAddress.Name',\n    'organizerEmail':                      'Organizer.EmailAddress.Address',\n    'recurrance':                          'Recurrance',\n    'responseRequested':                   'ResponseRequested',\n    'responseStatus':                      'ResponseStatus',\n    'seriesMasterId':                      'SeriesMasterId',\n    'showAs':                              'ShowAs',\n    'dateTimeStart':                       'Start',\n    'startTimeZone':                       'StartTimeZone',\n    'dateTimeEnd':                         'End',\n    'endTimeZone':                         'EndTimeZone',\n    'subject':                             'Subject',\n    'type':                                'Type',\n    'url':                                 'WebLink',\n    'privacy':                             'Sensitivity'\n  }\n\n\n  async getBatchData(userProfiles, filterStartDate, filterEndDate, additionalFields) {\n\n    const { fieldNameMap } = this.constructor,\n          dataAdapterRunStats   = {\n            emails: userProfiles,\n            filterStartDate,\n            filterEndDate,\n            success: false,\n            runDate: moment().utc().toDate()\n          };\n\n    try {\n      const eventData = await Promise.all(userProfiles.map(userProfile => this.getUserData({\n        userProfile,\n        filterStartDate,\n        filterEndDate,\n        additionalFields,\n        apiType: 'calendarview'\n      })));\n\n      // replace data keys with desired mappings...\n      const results = _.map(eventData, user => {\n        return {\n          ...user.userProfile,\n          filterStartDate:  user.filterStartDate,\n          filterEndDate:    user.filterEndDate,\n          success:          user.success,\n          errorMessage:     user.errorMessage,\n          // map data with desired key names...\n          data: _.map(user.data || [], originalEvent => {\n            const mappedEvent = {};\n\n            // change to desired names\n            _.each(fieldNameMap, (have, want) => {\n              const mapped = _.get(originalEvent, have);\n              if (mapped !== undefined) {\n                mappedEvent[want] = /^dateTime/.test(want) ? new Date(mapped) : mapped;\n              }\n            });\n\n            if (mappedEvent.responseStatus && mappedEvent.responseStatus.Response) {\n              mappedEvent.responseStatus = mappedEvent.responseStatus.Response;\n            }\n\n            mappedEvent[`attendees`] = originalEvent[fieldNameMap[`attendees`]]\n              .map(attendee => {\n                return {\n                  address:  _.get(attendee, fieldNameMap[`attendeeAddress`]),\n                  name:     _.get(attendee, fieldNameMap[`attendeeName`]),\n                  response: _.get(attendee, 'Status')\n                };\n              });\n\n            return mappedEvent;\n          })\n        };\n      });\n\n      // return results and success!\n      return {\n        ...dataAdapterRunStats,\n        results,\n        success: true\n      };\n\n    } catch (errorMessage) {\n      console.log(errorMessage.stack);\n      console.log('Office365 GetBatchData Error: ' + JSON.stringify(errorMessage));\n      return { ...dataAdapterRunStats, errorMessage };\n    }\n\n  }\n\n\n}\n"],"sourceRoot":"/source/"}