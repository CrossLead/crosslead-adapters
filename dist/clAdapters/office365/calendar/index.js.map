{"version":3,"sources":["clAdapters/office365/calendar/index.js"],"names":[],"mappings":"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","file":"clAdapters/office365/calendar/index.js","sourcesContent":["import moment                     from 'moment';\nimport _                          from 'lodash';\nimport Office365BaseAdapter       from '../base/Adapter';\n\n\n/**\n * Office 365 Calendar adapter\n */\nexport default class Office365CalendarAdapter extends Office365BaseAdapter {\n\n  // collect these fields always...\n  static baseFields = [\n    'Id',\n    'Attendees',\n    'Calendar',\n    'Categories',\n    'DateTimeCreated',\n    'DateTimeLastModified',\n    'End',\n    'EndTimeZone',\n    'HasAttachments',\n    'Importance',\n    'iCalUID',\n    'IsAllDay',\n    'IsCancelled',\n    'IsOrganizer',\n    'Location',\n    'Organizer',\n    'Recurrence',\n    'ResponseRequested',\n    'ResponseStatus',\n    'SeriesMasterId',\n    'ShowAs',\n    'Start',\n    'StartTimeZone',\n    'Subject',\n    'Type',\n    'WebLink'\n  ]\n\n  // convert the names of the api response data\n  static fieldNameMap = {\n    // Desired...                          // Given...\n    'eventId':                             'Id',\n    'attendees':                           'Attendees',\n    'calendarName':                        'Calendar',\n    'categories':                          'Categories',\n    'dateTimeCreated':                     'DateTimeCreated',\n    'dateTimeLastModified':                'DateTimeLastModified',\n    'attendeeAddress':                     'EmailAddress.Address',\n    'attendeeName':                        'EmailAddress.Name',\n    'hasAttachments':                      'HasAttachments',\n    'importance':                          'Importance',\n    'iCalUID':                             'iCalUID',\n    'allDay':                              'IsAllDay',\n    'canceled':                            'IsCancelled',\n    'isOrganizer':                         'IsOrganizer',\n    'locationName':                        'Location.DisplayName',\n    'locationAddressStreet':               'Location.Address.Street',\n    'locationAddressCity':                 'Location.Address.City',\n    'locationAddressState':                'Location.Address.State',\n    'locationAddressCountryOrRegion':      'Location.Address.CountryOrRegion',\n    'locationCoordinatesAccuracy':         'Location.Coordinates.Accuracy',\n    'locationCoordinatesAltitude':         'Location.Coordinates.Altitude',\n    'locationCoordinatesAltitudeAccuracy': 'Location.Coordinates.AltitudeAccuracy',\n    'locationCoordinatesLatitude':         'Location.Coordinates.Latitude',\n    'locationCoordinatesLongitude':        'Location.Coordinates.Longitude',\n    'organizerName':                       'Organizer.EmailAddress.Name',\n    'organizerEmail':                      'Organizer.EmailAddress.Address',\n    'recurrance':                          'Recurrance',\n    'responseRequested':                   'ResponseRequested',\n    'responseStatus':                      'ResponseStatus',\n    'seriesMasterId':                      'SeriesMasterId',\n    'showAs':                              'ShowAs',\n    'dateTimeStart':                       'Start',\n    'startTimeZone':                       'StartTimeZone',\n    'dateTimeEnd':                         'End',\n    'endTimeZone':                         'EndTimeZone',\n    'subject':                             'Subject',\n    'type':                                'Type',\n    'url':                                 'WebLink'\n  }\n\n\n  async getBatchData(emails, filterStartDate, filterEndDate, additionalFields) {\n\n    const { fieldNameMap } = this.constructor,\n          dataAdapterRunStats   = {\n            emails,\n            filterStartDate,\n            filterEndDate,\n            success: false,\n            runDate: moment().utc().toDate()\n          };\n\n    try {\n\n      const eventData = await* emails.map(email => this.getUserData({\n        email,\n        filterStartDate,\n        filterEndDate,\n        additionalFields,\n        apiType: 'events',\n        $filter:  ` DateTimeCreated ge ${filterStartDate.toISOString().substring(0, 10)}\n                      and DateTimeCreated lt ${filterEndDate.toISOString().substring(0, 10)}\n                  `.replace(/\\s+/g, ' ')\n                   .trim()\n      }));\n\n      // replace data keys with desired mappings...\n      const results = _.map(eventData, user => {\n        return {\n          email:            user.email,\n          filterStartDate:  user.filterStartDate,\n          filterEndDate:    user.filterEndDate,\n          success:          user.success,\n          errorMessage:     user.errorMessage,\n          // map data with desired key names...\n          data: _.map(user.data || [], originalEvent => {\n            const mappedEvent = {};\n\n            // change to desired names\n            _.each(fieldNameMap, (have, want) => {\n              const mapped = _.get(originalEvent, have);\n              if (mapped !== undefined) {\n                mappedEvent[want] = /^dateTime/.test(want) ? new Date(mapped) : mapped;\n              }\n            });\n\n            mappedEvent[`attendees`] = originalEvent[fieldNameMap[`attendees`]]\n              .map(attendee => {\n                return {\n                  address:  _.get(attendee, fieldNameMap[`attendeeAddress`]),\n                  name:     _.get(attendee, fieldNameMap[`attendeeName`]),\n                  response: _.get(attendee, 'Status')\n                }\n              });\n\n            return mappedEvent;\n          })\n        };\n      });\n\n      // return results and success!\n      return {\n        ...dataAdapterRunStats,\n        results,\n        success: true\n      };\n\n    } catch (errorMessage) {\n      console.log(errorMessage.stack);\n      console.log('Office365 GetBatchData Error: ' + JSON.stringify(errorMessage));\n      return { ...dataAdapterRunStats, errorMessage };\n    }\n\n  }\n\n\n}\n"],"sourceRoot":"/source/"}