{"version":3,"sources":["clAdapters/office365/mail/index.js"],"names":["_","Office365MailAdapter","userProfiles","filterStartDate","filterEndDate","additionalFields","fieldNameMap","constructor","dataAdapterRunStats","success","runDate","utc","toDate","all","map","getUserData","userProfile","apiType","$filter","toISOString","substring","replace","trim","emailData","results","emailArray","user","data","errorMessage","mappedEmailMessage","each","have","want","mapped","get","originalEmailMessage","undefined","test","Date","type","key","address","recipient","name","console","log","stack","baseFields"],"mappings":"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","file":"clAdapters/office365/mail/index.js","sourcesContent":["import moment                     from 'moment';\nimport * as _                          from 'lodash';\nimport Office365BaseAdapter       from '../base/Adapter';\n\n\n/**\n * Office 365 Mail adapter\n */\nexport default class Office365MailAdapter extends Office365BaseAdapter {\n\n\n  // collect these fields always...\n  static baseFields = [\n    'Id',\n    'Categories',\n    'DateTimeCreated',\n    'Subject',\n    'Importance',\n    'HasAttachments',\n    'ParentFolderId',\n    'From',\n    'Sender',\n    'ToRecipients',\n    'CcRecipients',\n    'BccRecipients',\n    'ReplyTo',\n    'ConversationId',\n    'DateTimeReceived',\n    'DateTimeSent',\n    'IsDeliveryReceiptRequested',\n    'IsReadReceiptRequested',\n    'IsRead'\n  ]\n\n\n  // convert the names of the api response data\n  static fieldNameMap = {\n    // Desired...                 // Given...\n    'emails':                     'value',\n    'messageId':                  'Id',\n    'conversationId':             'ConversationId',\n    'dateTimeSent':               'DateTimeSent',\n    'dateTimeReceived':           'DateTimeReceived',\n    'importance':                 'Importance',\n    'folderId':                   'ParentFolderId',\n    'categories':                 'Categories',\n    'contentType':                'Body.ContentType',\n    'subject':                    'Subject',\n    'bodyPreview':                'BodyPreview',\n    'body':                       'Body.Content',\n    'fromAddress':                'From.EmailAddress.Address',\n    'fromName':                   'From.EmailAddress.Name',\n    'toRecipients':               'ToRecipients',\n    'toRecipientAddress':         'EmailAddress.Address',\n    'toRecipientName':            'EmailAddress.Name',\n    'ccRecipients':               'CcRecipients',\n    'ccRecipientAddress':         'EmailAddress.Address',\n    'ccRecipientName':            'EmailAddress.Name',\n    'bccRecipients':              'BccRecipients',\n    'bccRecipientAddress':        'EmailAddress.Address',\n    'bccRecipientName':           'EmailAddress.Name',\n    'isDeliveryReceiptRequested': 'IsDeliveryReceiptRequested',\n    'isReadReceiptRequested':     'IsReadReceiptRequested',\n    'hasAttachments':             'HasAttachments',\n    'isDraft':                    'IsDraft',\n    'isRead':                     'IsRead',\n    'attachments':                'attachments',\n  }\n\n\n  async getBatchData(userProfiles, filterStartDate, filterEndDate, additionalFields) {\n\n    const { fieldNameMap } = this.constructor,\n          dataAdapterRunStats   = {\n            userProfiles,\n            filterStartDate,\n            filterEndDate,\n            success: false,\n            runDate: moment().utc().toDate()\n          };\n\n    try {\n\n      const emailData = await Promise.all(userProfiles.map(userProfile => {\n        return this.getUserData({\n          userProfile,\n          filterStartDate,\n          filterEndDate,\n          additionalFields,\n          apiType:  'messages',\n          $filter:  ` IsDraft eq false\n                        and DateTimeSent ge ${filterStartDate.toISOString().substring(0, 10)}\n                        and DateTimeSent lt ${filterEndDate.toISOString().substring(0, 10)}\n                    `.replace(/\\s+/g, ' ')\n                     .trim()\n        });\n      }));\n\n      // replace data keys with desired mappings...\n      const results = _.map(emailData, user => {\n        const emailArray = (user.success && user.data) || [];\n        return {\n          ...user.userProfile,\n          filterStartDate:  user.filterStartDate,\n          filterEndDate:    user.filterEndDate,\n          success:          user.success,\n          errorMessage:     user.errorMessage,\n          // map data with desired key names...\n          data: _.map(emailArray, originalEmailMessage => {\n            const mappedEmailMessage = {};\n\n            // change to desired names\n            _.each(fieldNameMap, (have, want) => {\n              const mapped = _.get(originalEmailMessage, have);\n              if (mapped !== undefined) {\n                mappedEmailMessage[want] = /^dateTime/.test(want) ? new Date(mapped) : mapped;\n              }\n            });\n\n            // grab info from different correspondent types...\n            // (since we're using an array literal here, 'for of' syntax will compile reasonably)\n            for (const type of ['to', 'cc', 'bcc']) {\n              const key = `${type}Recipient`;\n              mappedEmailMessage[`${key}s`] = originalEmailMessage[fieldNameMap[`${key}s`]]\n                .map(recipient => {\n                  return {\n                    address: _.get(recipient, fieldNameMap[`${key}Address`]),\n                    name:    _.get(recipient, fieldNameMap[`${key}Name`])\n                  };\n                });\n            }\n\n            return mappedEmailMessage;\n          })\n        };\n      });\n\n      // return results and success!\n      return {\n        ...dataAdapterRunStats,\n        results,\n        success: true\n      };\n\n    } catch (errorMessage) {\n      console.log(errorMessage.stack);\n      console.log('Office365 GetBatchData Error: ' + JSON.stringify(errorMessage));\n      return { ...dataAdapterRunStats, errorMessage };\n    }\n\n  }\n\n}\n"],"sourceRoot":"/source/"}