{"version":3,"sources":["clAdapters/office365/mail/index.js"],"names":[],"mappings":"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","file":"clAdapters/office365/mail/index.js","sourcesContent":["import moment                     from 'moment';\nimport _                          from 'lodash';\nimport Office365BaseAdapter       from '../base/Adapter';\n\n\n/**\n * Office 365 Mail adapter\n */\nexport default class Office365MailAdapter extends Office365BaseAdapter {\n\n\n  // collect these fields always...\n  static baseFields = [\n    'Id',\n    'Categories',\n    'DateTimeCreated',\n    'Subject',\n    'Importance',\n    'HasAttachments',\n    'ParentFolderId',\n    'From',\n    'Sender',\n    'ToRecipients',\n    'CcRecipients',\n    'BccRecipients',\n    'ReplyTo',\n    'ConversationId',\n    'DateTimeReceived',\n    'DateTimeSent',\n    'IsDeliveryReceiptRequested',\n    'IsReadReceiptRequested',\n    'IsRead'\n  ]\n\n\n  // convert the names of the api response data\n  static fieldNameMap = {\n    // Desired...                 // Given...\n    'emails':                     'value',\n    'messageId':                  'Id',\n    'conversationId':             'ConversationId',\n    'dateTimeSent':               'DateTimeSent',\n    'dateTimeReceived':           'DateTimeReceived',\n    'importance':                 'Importance',\n    'folderId':                   'ParentFolderId',\n    'categories':                 'Categories',\n    'contentType':                'Body.ContentType',\n    'subject':                    'Subject',\n    'bodyPreview':                'BodyPreview',\n    'body':                       'Body.Content',\n    'fromAddress':                'From.EmailAddress.Address',\n    'fromName':                   'From.EmailAddress.Name',\n    'toRecipients':               'ToRecipients',\n    'toRecipientAddress':         'EmailAddress.Address',\n    'toRecipientName':            'EmailAddress.Name',\n    'ccRecipients':               'CcRecipients',\n    'ccRecipientAddress':         'EmailAddress.Address',\n    'ccRecipientName':            'EmailAddress.Name',\n    'bccRecipients':              'BccRecipients',\n    'bccRecipientAddress':        'EmailAddress.Address',\n    'bccRecipientName':           'EmailAddress.Name',\n    'isDeliveryReceiptRequested': 'IsDeliveryReceiptRequested',\n    'isReadReceiptRequested':     'IsReadReceiptRequested',\n    'hasAttachments':             'HasAttachments',\n    'isDraft':                    'IsDraft',\n    'isRead':                     'IsRead'\n  }\n\n\n  async getBatchData(emails, filterStartDate, filterEndDate, additionalFields) {\n\n    const { fieldNameMap } = this.constructor,\n          dataAdapterRunStats   = {\n            emails,\n            filterStartDate,\n            filterEndDate,\n            success: false,\n            runDate: moment().utc().toDate()\n          };\n\n    try {\n\n      const emailData = await* emails.map(email => this.getUserData({\n        email,\n        filterStartDate,\n        filterEndDate,\n        additionalFields,\n        apiType:  'messages',\n        $filter:  ` IsDraft eq false\n                      and DateTimeSent ge ${filterStartDate.toISOString().substring(0, 10)}\n                      and DateTimeSent lt ${filterEndDate.toISOString().substring(0, 10)}\n                  `.replace(/\\s+/g, ' ')\n                   .trim()\n      }));\n\n      // replace data keys with desired mappings...\n      const results = _.map(emailData, user => {\n        const emailArray = (user.success && user.data) || [];\n        return {\n          email:            user.email,\n          filterStartDate:  user.filterStartDate,\n          filterEndDate:    user.filterEndDate,\n          success:          user.success,\n          errorMessage:     user.errorMessage,\n          // map data with desired key names...\n          data: _.map(emailArray, originalEmailMessage => {\n            const mappedEmailMessage = {};\n\n            // change to desired names\n            _.each(fieldNameMap, (have, want) => {\n              const mapped = _.get(originalEmailMessage, have);\n              mappedEmailMessage[want] = /^dateTime/.test(want) ? new Date(mapped) : mapped;\n            });\n\n            // grab info from different correspondent types...\n            // (since we're using an array literal here, 'for of' syntax will compile reasonably)\n            for (const type of ['to', 'cc', 'bcc']) {\n              const key = `${type}Recipient`;\n              mappedEmailMessage[`${key}s`] = originalEmailMessage[fieldNameMap[`${key}s`]]\n                .map(recipient => {\n                  return {\n                    address: _.get(recipient, fieldNameMap[`${key}Address`]),\n                    name:    _.get(recipient, fieldNameMap[`${key}Name`])\n                  }\n                });\n            }\n\n            return mappedEmailMessage;\n          })\n        };\n      });\n\n      // return results and success!\n      return {\n        ...dataAdapterRunStats,\n        results,\n        success: true\n      };\n\n    } catch (errorMessage) {\n      console.log(errorMessage.stack);\n      console.log('Office365 GetBatchData Error: ' + JSON.stringify(errorMessage));\n      return { ...dataAdapterRunStats, errorMessage };\n    }\n\n  }\n\n}\n"],"sourceRoot":"/source/"}