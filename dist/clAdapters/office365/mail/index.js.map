{"version":3,"sources":["clAdapters/office365/mail/index.js"],"names":["Office365MailAdapter","userProfiles","filterStartDate","filterEndDate","additionalFields","fieldNameMap","constructor","dataAdapterRunStats","success","runDate","utc","toDate","Promise","all","map","getUserData","userProfile","apiType","$filter","toISOString","substring","replace","trim","emailData","results","emailArray","user","data","errorMessage","mappedEmailMessage","each","have","want","mapped","get","originalEmailMessage","undefined","test","Date","type","key","address","recipient","name","console","log","stack","JSON","stringify","baseFields"],"mappings":"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","file":"clAdapters/office365/mail/index.js","sourcesContent":["import moment                     from 'moment';\nimport _                          from 'lodash';\nimport Office365BaseAdapter       from '../base/Adapter';\n\n\n/**\n * Office 365 Mail adapter\n */\nexport default class Office365MailAdapter extends Office365BaseAdapter {\n\n\n  // collect these fields always...\n  static baseFields = [\n    'Id',\n    'Categories',\n    'DateTimeCreated',\n    'Subject',\n    'Importance',\n    'HasAttachments',\n    'ParentFolderId',\n    'From',\n    'Sender',\n    'ToRecipients',\n    'CcRecipients',\n    'BccRecipients',\n    'ReplyTo',\n    'ConversationId',\n    'DateTimeReceived',\n    'DateTimeSent',\n    'IsDeliveryReceiptRequested',\n    'IsReadReceiptRequested',\n    'IsRead'\n  ]\n\n\n  // convert the names of the api response data\n  static fieldNameMap = {\n    // Desired...                 // Given...\n    'emails':                     'value',\n    'messageId':                  'Id',\n    'conversationId':             'ConversationId',\n    'dateTimeSent':               'DateTimeSent',\n    'dateTimeReceived':           'DateTimeReceived',\n    'importance':                 'Importance',\n    'folderId':                   'ParentFolderId',\n    'categories':                 'Categories',\n    'contentType':                'Body.ContentType',\n    'subject':                    'Subject',\n    'bodyPreview':                'BodyPreview',\n    'body':                       'Body.Content',\n    'fromAddress':                'From.EmailAddress.Address',\n    'fromName':                   'From.EmailAddress.Name',\n    'toRecipients':               'ToRecipients',\n    'toRecipientAddress':         'EmailAddress.Address',\n    'toRecipientName':            'EmailAddress.Name',\n    'ccRecipients':               'CcRecipients',\n    'ccRecipientAddress':         'EmailAddress.Address',\n    'ccRecipientName':            'EmailAddress.Name',\n    'bccRecipients':              'BccRecipients',\n    'bccRecipientAddress':        'EmailAddress.Address',\n    'bccRecipientName':           'EmailAddress.Name',\n    'isDeliveryReceiptRequested': 'IsDeliveryReceiptRequested',\n    'isReadReceiptRequested':     'IsReadReceiptRequested',\n    'hasAttachments':             'HasAttachments',\n    'isDraft':                    'IsDraft',\n    'isRead':                     'IsRead',\n    'attachments':                'attachments',\n  }\n\n\n  async getBatchData(userProfiles, filterStartDate, filterEndDate, additionalFields) {\n\n    const { fieldNameMap } = this.constructor,\n          dataAdapterRunStats   = {\n            userProfiles,\n            filterStartDate,\n            filterEndDate,\n            success: false,\n            runDate: moment().utc().toDate()\n          };\n\n    try {\n\n      const emailData = await Promise.all(userProfiles.map(userProfile => {\n        return this.getUserData({\n          userProfile,\n          filterStartDate,\n          filterEndDate,\n          additionalFields,\n          apiType:  'messages',\n          $filter:  ` IsDraft eq false\n                        and DateTimeSent ge ${filterStartDate.toISOString().substring(0, 10)}\n                        and DateTimeSent lt ${filterEndDate.toISOString().substring(0, 10)}\n                    `.replace(/\\s+/g, ' ')\n                     .trim()\n        });\n      }));\n\n      // replace data keys with desired mappings...\n      const results = _.map(emailData, user => {\n        const emailArray = (user.success && user.data) || [];\n        return {\n          ...user.userProfile,\n          filterStartDate:  user.filterStartDate,\n          filterEndDate:    user.filterEndDate,\n          success:          user.success,\n          errorMessage:     user.errorMessage,\n          // map data with desired key names...\n          data: _.map(emailArray, originalEmailMessage => {\n            const mappedEmailMessage = {};\n\n            // change to desired names\n            _.each(fieldNameMap, (have, want) => {\n              const mapped = _.get(originalEmailMessage, have);\n              if (mapped !== undefined) {\n                mappedEmailMessage[want] = /^dateTime/.test(want) ? new Date(mapped) : mapped;\n              }\n            });\n\n            // grab info from different correspondent types...\n            // (since we're using an array literal here, 'for of' syntax will compile reasonably)\n            for (const type of ['to', 'cc', 'bcc']) {\n              const key = `${type}Recipient`;\n              mappedEmailMessage[`${key}s`] = originalEmailMessage[fieldNameMap[`${key}s`]]\n                .map(recipient => {\n                  return {\n                    address: _.get(recipient, fieldNameMap[`${key}Address`]),\n                    name:    _.get(recipient, fieldNameMap[`${key}Name`])\n                  };\n                });\n            }\n\n            return mappedEmailMessage;\n          })\n        };\n      });\n\n      // return results and success!\n      return {\n        ...dataAdapterRunStats,\n        results,\n        success: true\n      };\n\n    } catch (errorMessage) {\n      console.log(errorMessage.stack);\n      console.log('Office365 GetBatchData Error: ' + JSON.stringify(errorMessage));\n      return { ...dataAdapterRunStats, errorMessage };\n    }\n\n  }\n\n}\n"],"sourceRoot":"/source/"}