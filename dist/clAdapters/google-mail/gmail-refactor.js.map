{"version":3,"sources":["clAdapters/google-mail/gmail-refactor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;0BAAuB,YAAY;;;;sBACZ,QAAQ;;;;oBACiB,UAAU;;;AAG1D,IAAM,KAAK,GAAG,wBAAW,KAAK,CAAC,IAAI,CAAC,CAAC;;AAGrC,IAAM,kBAAkB,GAAG;AACzB,eAAa,EAAG,aAAa;AAC7B,gBAAc,EAAE,cAAc;AAC9B,SAAO,EAAS,YAAY;CAC7B,CAAA;;IAGoB,iBAAiB;YAAjB,iBAAiB;;eAAjB,iBAAiB;;;;;;;;;;;;AAOzB,WAPQ,iBAAiB,GAOtB;0BAPK,iBAAiB;;AAQlC,+BARiB,iBAAiB,6CAQ1B;GACT;;eATkB,iBAAiB;;WAY/B,iBAAG;AACN,aAAO,IAAI,CAAC,OAAO,CAAC;AACpB,aAAO,IAAI,CAAC,QAAQ,CAAC;AACrB,aAAO,IAAI,CAAC;KACb;;;WAGS;UAEA,WAAW,EAOR,IAAI,EACP,SAAS,EAmBK,KAAK;;;;AA3BnB,uBAAW,GAAK,IAAI,CAApB,WAAW;;gBAEd,WAAW;;;;;kBACR,IAAI,KAAK,CAAC,mCAAmC,CAAC;;;;;AAItD,iBAAW,IAAI,IAAI,kBAAkB,EAAE;AAC/B,uBAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC;;AAC1C,kBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;AACtB,2BAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;eAC5C;aACF;;;AAGD,yBAAY,kBAAkB,CAAC,CAC5B,OAAO,CAAC,UAAA,IAAI,EAAI;AACf,kBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;AACtB,sBAAM,IAAI,KAAK,eAAa,IAAI,uCAAoC,CAAC;eACtE;aACF,CAAC,CAAC;;AAEL,gBAAI,CAAC,OAAO,GAAI,IAAI,iBAAiB,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;AACjE,gBAAI,CAAC,QAAQ,GAAG,IAAI,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;;6CAEtD,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;;;AAEJ,iBAAK,GAAK,WAAW,CAAnC,YAAY;;AAEpB,mBAAO,CAAC,GAAG,8DACkD,KAAK,CACjE,CAAC;;gDAEK,IAAI;;;;;;;KACZ;;;WAGiB,sBAAC,MAAM,EAAK,eAAe,EAAE,aAAa,EAAE,MAAM;UAAjD,MAAM,gBAAN,MAAM,GAAC,EAAE;UAIpB,IAAI;;;;;;AAAJ,gBAAI,GAAG;AACX,mBAAK,EAAiB,eAAe,CAAC,WAAW,EAAE;AACnD,oBAAM,EAAgB,aAAa,CAAC,WAAW,EAAE;aAClD;;0DAGa,MAAM,CAAC,GAAG,CAAC,oBAAM,KAAK;kBAE5B,kBAAkB,QA0DlB,YAAY;;;;;;;AA1DZ,sCAAkB,GAAG;AACzB,qCAAe,EAAf,eAAe;AACf,mCAAa,EAAb,aAAa;AACb,2BAAK,EAAL,KAAK;AACL,6BAAO,EAAE,IAAI;AACb,6BAAO,EAAE,0BAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE;qBACjC;;;;0BAaO,SAAS,QA8BA,OAAO;;;;;;;;;6DAtCF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;;;AAAvC,gCAAI,CAAC,IAAI;;;;;;;;AAET,mCAAO,CAAC,GAAG,CAAC,cAAc,iBAAQ,CAAC;;;;AAM/B,qCAAS,GAAG,SAAZ,SAAS,CAAS,IAAI;kCAGpB,OAAO;;;;;;qEAAS,aAAY,UAAC,GAAG,EAAE,GAAG,EAAK;;AAE9C,0CAAI,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE;AAC9B,4CAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;uCACrC;;AAED,2CAAK,CAAC,QAAQ,CAAC,IAAI,CACjB,IAAI,EAAE,UAAC,GAAG,EAAE,IAAI;+CAAK,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC;uCAAA,CAChD,CAAC;qCACH,CAAC;;;AATI,2CAAO;;;AAYb,wCAAI,IAAI,EAAE;AACR,qDAAA,IAAI,CAAC,KAAK,EAAC,IAAI,MAAA,iCAAI,OAAO,CAAC,KAAK,EAAC,CAAC;qCACnC,MAAM;AACL,0CAAI,GAAG,OAAO,CAAC;qCAChB;;;;yCAGG,OAAO,CAAC,aAAa;;;;;AACvB,wCAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;;qEAC9B,SAAS,CAAC,IAAI,CAAC;;;;;;wEAGvB,IAAI;;;;;;;6BACZ;;;6DAEgC,SAAS,EAAE;;;;AAA7B,mCAAO,QAAd,KAAK;;iCAGN,eAAc,kBAAkB,EAAE,EAAE,OAAO,EAAP,OAAO,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIrD,2BAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,eAAM,KAAK,CAAC,CAAC;;AAE9D,gCAAY;;AAEhB,wBAAI,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,EAAE;AACjD,kCAAY,uBAAqB,KAAK,4CAAyC,CAAC;qBACjF;;wDAEM,eAAc,kBAAkB,EAAE;AACvC,kCAAY,EAAZ,YAAY;AACZ,6BAAO,EAAE,KAAK;AACd,6BAAO,EAAE,EAAE;qBACZ,CAAC;;;;;;;aAGL,CAAC;;;;;;;;;;KACH;;;WAGsB;UACE,KAAK,EAGpB,MAAM;;;;AAHS,iBAAK,GAAO,IAAI,CAA/B,WAAW,CAAI,KAAK;;;6CAGL,IAAI,CAAC,YAAY,CACpC,CAAE,KAAK,CAAE,EACT,0BAAQ,CAAC,MAAM,EAAE,EACjB,0BAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,CACjC;;;AAJK,kBAAM;gDAKL,MAAM,CAAC,CAAC,CAAC;;;;;;AAEhB,mBAAO,CAAC,GAAG,CAAC,eAAM,KAAK,kBAAS,CAAC,CAAC;gDAC3B;AACL,mBAAK,gBAAA;AACL,qBAAO,EAAE,KAAK;aACf;;;;;;;KAEJ;;;WAGmB;;;;;AAElB,mBAAO,CAAC,IAAI,CAAC,4DAA4D,CAAC,CAAC;gDACpE,IAAI,CAAC,iBAAiB,EAAE;;;;;;;KAChC;;;;;WAIc,mBAAC,KAAK;wBAEI,YAAY,EAAE,WAAW,EAI1C,IAAI;;;;;2BAJ6C,IAAI,CAAnD,WAAW;AAAI,wBAAY,gBAAZ,YAAY;AAAE,uBAAW,gBAAX,WAAW;;AAEhD,mBAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;AAEb,gBAAI,GAAG,IAAI,wBAAW,IAAI,CAAC,GAAG;;AAElC,wBAAY;;AAEZ,gBAAI;;AAEJ,uBAAW;;AAEX,aAAC,gDAAgD,CAAC;;;AAGlD,0CAA8B,CAC/B;gDAGM,aAAY,UAAC,GAAG,EAAE,GAAG;qBAAK,IAAI,CAAC,SAAS,CAAC,UAAA,GAAG,EAAI;AACrD,mBAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;eAC5B,CAAC;aAAA,CAAC;;;;;;;KACJ;;;SArMkB,iBAAiB;;;qBAAjB,iBAAiB","file":"clAdapters/google-mail/gmail-refactor.js","sourcesContent":["import googleapis from 'googleapis';\nimport moment     from 'moment';\nimport { Adapter, Configuration, Service } from '../base/';\n\n// google mail api\nconst gmail = googleapis.gmail('v1');\n\n\nconst credentialMappings = {\n  'certificate' : 'private_key',\n  'serviceEmail': 'client_email',\n  'email'       : 'adminEmail'\n}\n\n\nexport default class GoogleMailAdapter extends Adapter {\n\n  static Configuration = Configuration;\n  static Service = Service;\n\n\n  // constructor needs to call super\n  constructor() {\n    super();\n  }\n\n\n  reset() {\n    delete this._config;\n    delete this._service;\n    return this;\n  }\n\n\n  async init() {\n\n    const { credentials } = this;\n\n    if (!credentials) {\n      throw new Error('credentials required for adapter.');\n    }\n\n    // map Google json keys to keys used in this library\n    for (const want in credentialMappings) {\n      const alternate = credentialMappings[want];\n      if (!credentials[want]) {\n        credentials[want] = credentials[alternate];\n      }\n    }\n\n    // validate required credential properties\n    Object.keys(credentialMappings)\n      .forEach(prop => {\n        if (!credentials[prop]) {\n          throw new Error(`Property ${prop} required in adapter credentials!`);\n        }\n      });\n\n    this._config  = new GoogleMailAdapter.Configuration(credentials);\n    this._service = new GoogleMailAdapter.Service(this._config);\n\n    await this._service.init();\n\n    const { serviceEmail: email } = credentials;\n\n    console.log(\n      `Successfully initialized google mail adapter for email: ${email}`\n    );\n\n    return this;\n  }\n\n\n  async getBatchData(emails=[], filterStartDate, filterEndDate, fields) {\n\n    // api options...\n    // https://developers.google.com/google-apps/gmail\n    const opts = {\n      after:                filterStartDate.toISOString(),\n      before:               filterEndDate.toISOString()\n    };\n\n    // collect events for this group of emails\n    return await* emails.map(async(email) => {\n\n      const emailGroupRunStats = {\n        filterStartDate,\n        filterEndDate,\n        email,\n        success: true,\n        runDate: moment().utc().toDate()\n      };\n\n      try {\n        // add auth tokens to request\n        try {\n          opts.auth = await this.authorize(email);\n        } catch (error) {\n          console.log('Auth error: ', error);\n          throw error;\n        }\n\n\n        // function to recurse through pageTokens\n        const getEvents = async(data) => {\n\n          // request first results...\n          const results = await new Promise((res, rej) => {\n            // add page token if given\n            if (data && data.nextPageToken) {\n              opts.pageToken = data.nextPageToken;\n            }\n\n            gmail.messages.list(\n              opts, (err, data) => err ? rej(err) : res(data)\n            );\n          });\n\n          // if we already have data being accumulated, add to items\n          if (data) {\n            data.items.push(...results.items);\n          } else {\n            data = results;\n          }\n\n          // if there is a token for the next page, continue...\n          if (results.nextPageToken) {\n            data.nextPageToken = results.nextPageToken;\n            return await getEvents(data);\n          }\n\n          return data;\n        };\n\n        const { items: results } = await getEvents();\n\n        // request all events for this user in the given time frame\n        return Object.assign(emailGroupRunStats, { results });\n\n      } catch (error) {\n        // if the batch collection failed...\n        console.log('GoogleMailAdapter.getBatchData Error:', error.stack);\n\n        let errorMessage = error;\n\n        if (/invalid_grant/.test(errorMessage.toString())) {\n          errorMessage = `Email address: ${email} not found in this Google Mail account.`;\n        }\n\n        return Object.assign(emailGroupRunStats, {\n          errorMessage,\n          success: false,\n          results: []\n        });\n      }\n\n    });\n  }\n\n\n  async runConnectionTest() {\n    const { credentials: { email } } = this;\n\n    try {\n      const events = await this.getBatchData(\n        [ email ],\n        moment().toDate(),\n        moment().add(-1, 'day').toDate()\n      )\n      return events[0];\n    } catch (error) {\n      console.log(error.stack || error);\n      return {\n        error,\n        success: false\n      }\n    }\n  }\n\n\n  async runMessageTest() {\n    // TODO: does this need to be different?\n    console.warn('Note: runMessageTest() currently calls runConnectionTest()');\n    return this.runConnectionTest();\n  }\n\n\n  // create authenticated token for api requests for given user\n  async authorize(email) {\n\n    const { credentials: { serviceEmail, certificate } } = this;\n\n    console.log(email);\n\n    const auth = new googleapis.auth.JWT(\n      // email of google app admin...\n      serviceEmail,\n      // no need for keyFile...\n      null,\n      // the private key itself...\n      certificate,\n      // scopes...\n      ['https://www.googleapis.com/auth/gmail.readonly'],\n      // the email of the individual we want to authenticate\n      // ('sub' property of the json web token)\n      'mcgrit@crossleadadapters.com'\n    );\n\n    // await authorization\n    return new Promise((res, rej) => auth.authorize(err => {\n      err ? rej(err) : res(auth);\n    }));\n  }\n\n}\n"],"sourceRoot":"/source/"}