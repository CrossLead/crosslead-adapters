{"version":3,"sources":["clAdapters/google-mail/index.js"],"names":["GoogleAdapter","crypto","rp","util","moment","querystring","_","GoogleMail","call","inherits","prototype","init","_this","_config","Configuration","credentials","_service","Service","then","msg","console","log","email","reset","getSingleMessageDetails","messageId","userEmail","token","apiVersion","additionalFields","result","additionalFieldsToQuery","replace","messageRequestOptions","method","uri","headers","Authorization","Accept","messageDetails","messageData","JSON","parse","indexOf","get","n","headerIter","name","value","getAccessToken","clientId","adminEmail","privateKey","tokenRequestUrl","unixEpochTime","Math","floor","Date","getTime","jwtHeader","alg","typ","jwtPayload","encodedJwtHeader","Buffer","stringify","toString","encodedJwtPayload","stringToSign","signer","createSign","update","encodedSignedJwtInfo","sign","clientAssertion","tokenRequestFormData","grant_type","assertion","requestData","requestDataLength","length","tokenRequestOptions","port","body","multipart","tokenData","access_token","Promise","reject","catch","err","entireMessage","message","messageJson","statusCode","RegExp","getMoreEmails","messages","emailRequestOptions","firstUri","nextPageToken","tempPageToken","messageDetailPromises","messageList","messageIter","id","nextMessage","push","all","getUserEmails","serviceEmail","filterStartDate","filterEndDate","tokenResponse","queryFilter","toISOString","substring","data","success","errorMessage","error","getHeaderValue","headerName","headerValues","payload","filter","header","pluck","getEmailAddressObjectFromString","returnObject","address","valueArray","split","convertEmailListToArrayOfEmailAddressObjects","emailList","emailAddressObjectArray","emailArray","emailIter","hasLabel","labelValue","labelIds","getFirstScalarPart","partToCheck","forEach","parts","mapEmailData","emailData","mappedData","userIter","mappedUser","assign","i","originalEmailMessage","mappedEmailMessage","conversationId","threadId","dateTimeSent","utc","toDate","dateReceived","datePartOfValue","dateTimeReceived","importance","categories","folderId","folderName","subject","bodyPreview","snippet","contentType","mimeType","isDeliveryReceiptRequested","isReadReceiptRequested","hasAttachments","isDraft","isRead","fromAddress","fromName","toRecipients","ccRecipients","bccRecipients","getEmailData","emails","emailResults","emailResultPromises","emailAfterMapping","getBatchData","clientEmail","certificate","options","dataAdapterRunStats","runDate","mappedEmailData","results","runConnectionTest","connectionData","startOf","add","runMessageTest"],"mappings":"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","file":"clAdapters/google-mail/index.js","sourcesContent":["import * as crypto from 'crypto';\nimport * as rp from 'request-promise';\nimport * as util from 'util';\nimport * as moment from 'moment';\nimport * as querystring from 'querystring';\nimport * as _ from 'lodash';\n\nimport BaseAdapter from '../base/Adapter';\nimport * as GoogleMail from './google-js.js';\n\nexport default function GoogleAdapter() {\n  BaseAdapter.call(this);\n};\n\nutil.inherits(GoogleAdapter, BaseAdapter);\n\nGoogleAdapter.prototype.init = function() {\n  const _this = this;\n  this._config = new GoogleMail.Configuration(this.credentials);\n  this._service = new GoogleMail.Service(this._config);\n  return this._service\n    .init()\n    .then(( /*client*/ ) => {\n      const msg = 'Successfully initialized gmail adapter for email: %s';\n      console.log(msg, _this.credentials.email);\n      return _this;\n    });\n};\n\nGoogleAdapter.prototype.reset = function() {\n  delete this._config;\n  delete this._service;\n};\n\nconst getSingleMessageDetails = function(messageId, userEmail, token, apiVersion, additionalFields, result) {\n  let additionalFieldsToQuery = additionalFields.replace('BodyPreview', 'snippet');\n  additionalFieldsToQuery = additionalFieldsToQuery.replace('Body', 'payload(parts)');\n  additionalFieldsToQuery = additionalFieldsToQuery.replace('Subject', 'payload(parts)');\n\n  if (additionalFieldsToQuery !== '') {\n    additionalFieldsToQuery = ',' + additionalFieldsToQuery;\n  }\n\n  const messageRequestOptions = {\n    method: 'GET',\n    uri: (\n      'https://www.googleapis.com/gmail/v' +\n        apiVersion +\n        '/users/' +\n        userEmail +\n        '/messages/' +\n        messageId +\n        '?fields=id,threadId,labelIds,payload(headers)' +\n        additionalFieldsToQuery\n    ),\n    headers : {\n      Authorization: 'Bearer ' + token,\n      Accept: 'application/json;odata.metadata=none'\n    }\n  };\n  return rp(messageRequestOptions)\n  .then((messageDetails) => {\n    result.messageData = JSON.parse(messageDetails);\n    if (additionalFields.indexOf('Subject') === -1) {\n      //remove subject header\n      const headers = _.get(result, 'messageData.payload.headers');\n      const n = _.get(headers, 'length');\n      if (n > 0) {\n        for (let headerIter = 0; headerIter < n; headerIter++) {\n          if (headers[headerIter].name === 'Subject') {\n            headers[headerIter].value = '';\n          }\n        }\n      }\n    }\n\n    return true;\n  });\n};\n\nconst getAccessToken = function(clientId, adminEmail, userEmail, privateKey) {\n  const tokenRequestUrl = 'https://www.googleapis.com/oauth2/v3/token';\n  const unixEpochTime = Math.floor((new Date()).getTime() / 1000);\n\n  const jwtHeader = {\n    alg: 'RS256',\n    typ: 'JWT'\n  };\n\n  const jwtPayload = {\n    'iss': adminEmail,\n    'scope': 'https://www.googleapis.com/auth/gmail.readonly',\n    'aud': tokenRequestUrl,\n    'exp': unixEpochTime + 3600,\n    'iat': unixEpochTime,\n    'sub': userEmail\n  };\n\n  const encodedJwtHeader = new Buffer(JSON.stringify(jwtHeader)).toString('base64');\n  const encodedJwtPayload = new Buffer(JSON.stringify(jwtPayload)).toString('base64');\n  const stringToSign = encodedJwtHeader + '.' + encodedJwtPayload;\n\n  //sign it!\n  const signer = crypto.createSign('RSA-SHA256');\n  signer.update(stringToSign);\n\n  const encodedSignedJwtInfo = signer.sign(privateKey, 'base64');\n\n  //define assertion\n  const clientAssertion = encodedJwtHeader + '.' + encodedJwtPayload + '.' + encodedSignedJwtInfo;\n\n  const tokenRequestFormData = {\n    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n    assertion: clientAssertion\n  };\n\n  const requestData = querystring.stringify(tokenRequestFormData);\n  const requestDataLength = requestData.length;\n\n  const tokenRequestOptions = {\n    method: 'POST',\n    port: 443,\n    uri: tokenRequestUrl,\n    body: requestData,\n    multipart: false,\n    headers: {\n      'Content-Length': requestDataLength,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n\n  return rp(tokenRequestOptions)\n  .then((body) => {\n    const tokenData = JSON.parse(body);\n    if (tokenData && tokenData.access_token) {\n      return tokenData.access_token;\n    } else {\n      return Promise.reject('Could not get access token.');\n    }\n  })\n  .catch((err) => {\n    const tokenData = JSON.parse(JSON.stringify(err));\n    if (tokenData.name === 'StatusCodeError') {\n      const entireMessage = tokenData.message;\n      const messageJson = entireMessage.replace(tokenData.statusCode + ' - ', '');\n      const messageData = JSON.parse(messageJson.replace(new RegExp('\\\\\"', 'g'),'\"'));\n      //console.log('-----');\n      //console.log(messageData);\n      return Promise.reject(messageData);\n    } else {\n      return Promise.reject(err);\n    }\n  });\n};\n\nconst getMoreEmails = function(\n    messages,\n    userEmail,\n    token,\n    apiVersion,\n    additionalFields,\n    emailRequestOptions,\n    firstUri,\n    nextPageToken\n  ) {\n  emailRequestOptions.uri = firstUri + '&pageToken=' + nextPageToken;\n  let tempPageToken = '';\n  return rp(emailRequestOptions)\n  .then((body) => {\n    const messageDetailPromises = [];\n    const messageList = JSON.parse(body);\n    tempPageToken = messageList.nextPageToken;\n\n    if (messageList.messages) {\n      for (let messageIter = 0; messageIter < messageList.messages.length; messageIter++) {\n        const messageId = messageList.messages[messageIter].id;\n        const nextMessage = {messageId: messageId};\n        messages.push(nextMessage);\n        messageDetailPromises.push(\n          getSingleMessageDetails(messageId, userEmail, token, apiVersion, additionalFields, nextMessage));\n      }\n    }\n\n    return Promise.all(messageDetailPromises);\n  })\n  .then(() => {\n    if(tempPageToken) {\n      return getMoreEmails(\n        messages, userEmail, token, apiVersion, additionalFields, emailRequestOptions, firstUri, tempPageToken\n      );\n    } else {\n      return true;\n    }\n  });\n};\n\nconst getUserEmails = function(clientId,\n    serviceEmail,\n    userEmail,\n    privateKey,\n    apiVersion,\n    filterStartDate,\n    filterEndDate,\n    additionalFields,\n    result\n  ) {\n  let token = '';\n  let emailRequestOptions = {};\n  let firstUri = '';\n  return getAccessToken(clientId, serviceEmail, userEmail, privateKey)\n  .then((tokenResponse) => {\n    token = tokenResponse;\n    const queryFilter = '\\\"after:' +\n          filterStartDate.toISOString().substring(0, 10).replace(/-/g, '/') +\n          ' before:' +\n          filterEndDate.toISOString().substring(0, 10).replace(/-/g, '/') +\n          '\\\"';\n\n    firstUri = 'https://www.googleapis.com/gmail/v' +\n        apiVersion +\n        '/users/' +\n        userEmail +\n        '/messages?maxResults=100&q=' +\n        queryFilter;\n\n    emailRequestOptions = {\n      method: 'GET',\n      uri: firstUri,\n      headers : {\n        Authorization: 'Bearer ' + token,\n        Accept: 'application/json;odata.metadata=none'\n      }\n    };\n    return rp(emailRequestOptions);\n  })\n  .then((body) => {\n    const messageDetailPromises = [];\n    result.data = {};\n    result.data.messageList = JSON.parse(body);\n    result.data.messages = [];\n\n    const messages = _.get(result, 'data.messageList.messages');\n\n    if (messages) {\n      for (let messageIter = 0; messageIter < messages.length; messageIter++) {\n        const messageId = messages[messageIter].id;\n        result.data.messages.push({messageId: messageId});\n        messageDetailPromises.push(\n          getSingleMessageDetails(\n            messageId,\n            userEmail,\n            token,\n            apiVersion,\n            additionalFields,\n            result.data.messages[messageIter]\n          )\n        );\n      }\n    }\n\n    return Promise.all(messageDetailPromises);\n  })\n  .then(() => {\n    //console.log(result.data.messageList);\n    if(result.data.messageList.nextPageToken) {\n      return getMoreEmails(\n        result.data.messages,\n        userEmail,\n        token,\n        apiVersion,\n        additionalFields,\n        emailRequestOptions,\n        firstUri,\n        result.data.messageList.nextPageToken\n      );\n    } else {\n      return true;\n    }\n  })\n  .then(() => {\n    result.success = true;\n  })\n  .catch((err) => {\n    result.success = false;\n    if (err.name === 'StatusCodeError') {\n      const entireMessage = err.message;\n      const messageJson = entireMessage.replace(err.statusCode + ' - ', '');\n      const messageData = JSON.parse(messageJson.replace(new RegExp('\\\\\"', 'g'),'\"'));\n      result.errorMessage = messageData.error.message;\n    } else {\n      result.errorMessage = JSON.stringify(err);\n    }\n    return true;\n  });\n};\n\nconst getHeaderValue = function(message, headerName) {\n  const headerValues = _(message.payload.headers)\n          .filter((header) => {\n            return header.name === headerName;\n          })\n          .pluck('value')\n          .value();\n  if (headerValues.length > 0) {\n    return headerValues[0];\n  } else {\n    return null;\n  }\n};\n\nconst getEmailAddressObjectFromString = function(value) {\n  const returnObject = {\n    name: value,\n    address: value\n  };\n\n  if (value && value.indexOf('>') > 0) {\n    const valueArray = value.split(' ');\n    returnObject.address = valueArray[valueArray.length - 1].replace('<', '').replace('>', '');\n    returnObject.name = value.replace(' ' + valueArray[valueArray.length - 1], '');\n  }\n\n  return returnObject;\n};\n\nconst convertEmailListToArrayOfEmailAddressObjects = function(emailList) {\n  const emailAddressObjectArray = [];\n  if (emailList) {\n    const emailArray = emailList.split(',');\n    for (let emailIter = 0; emailIter < emailArray.length; emailIter++) {\n      emailAddressObjectArray.push(getEmailAddressObjectFromString(emailArray[emailIter]));\n    }\n  }\n\n  return emailAddressObjectArray;\n};\n\nconst hasLabel = function(message, labelValue) {\n  return message.labelIds && message.labelIds.length && (message.labelIds.indexOf(labelValue) >= 0);\n};\n\nconst getFirstScalarPart = function(partToCheck) {\n  let returnObject = partToCheck;\n  _.forEach(partToCheck.headers, (header) => {\n    if(header.name === 'Content-Type' && header.value.indexOf('multipart/') > -1 && partToCheck.parts.length > 0) {\n      returnObject = getFirstScalarPart(partToCheck.parts[0]);\n    }\n  });\n  return returnObject;\n};\n\nconst mapEmailData = function(emailData) {\n  const mappedData = [];\n\n  for (let userIter = 0; userIter < emailData.length; userIter++) {\n    const mappedUser = _.assign({}, emailData[userIter], {\n      data: [],\n      success: emailData[userIter].success,\n      errorMessage: emailData[userIter].errorMessage\n    });\n\n    if (emailData[userIter].success) {\n      for (let i = 0; i < emailData[userIter].data.messages.length; i++) {\n        const originalEmailMessage = emailData[userIter].data.messages[i];\n        let mappedEmailMessage = {};\n\n        mappedEmailMessage = originalEmailMessage;\n        const messageData = originalEmailMessage.messageData;\n\n        mappedEmailMessage.messageId = originalEmailMessage.messageId;\n        mappedEmailMessage.conversationId = messageData.threadId;\n        mappedEmailMessage.dateTimeSent = moment(new Date(getHeaderValue(messageData, 'Date'))).utc().toDate();\n\n        const dateReceived = getHeaderValue(messageData, 'Received');\n        if (dateReceived) {\n          const datePartOfValue = dateReceived.split(';')[1];\n          mappedEmailMessage.dateTimeReceived = moment(new Date(datePartOfValue)).utc().toDate();\n        }\n\n        mappedEmailMessage.importance = 'Normal';\n        if (hasLabel(messageData, 'IMPORTANT')) {\n          mappedEmailMessage.importance = 'Important';\n        }\n\n        mappedEmailMessage.categories = messageData.labelIds;\n\n        if (hasLabel(messageData, 'SENT')) {\n          mappedEmailMessage.folderId = 'Sent Items';\n          mappedEmailMessage.folderName = 'Sent Items';\n        } else {\n          mappedEmailMessage.folderId = 'Inbox';\n          mappedEmailMessage.folderName = 'Inbox';\n        }\n\n        mappedEmailMessage.subject = getHeaderValue(messageData, 'Subject');\n        mappedEmailMessage.bodyPreview = messageData.snippet;\n\n        if (messageData.payload.parts && messageData.payload.parts.length > 0) {\n          const partToCheck = getFirstScalarPart(messageData.payload.parts[0]);\n          mappedEmailMessage.contentType = partToCheck.mimeType;\n          mappedEmailMessage.body = new Buffer(partToCheck.body.data, 'base64').toString();\n        }\n\n        mappedEmailMessage.isDeliveryReceiptRequested = null;\n        mappedEmailMessage.isReadReceiptRequested = null;\n        mappedEmailMessage.hasAttachments = null;\n        mappedEmailMessage.isDraft = null;\n        mappedEmailMessage.isRead = hasLabel(messageData, 'READ');\n\n        mappedEmailMessage.fromAddress = getEmailAddressObjectFromString(getHeaderValue(messageData, 'From')).address;\n        mappedEmailMessage.fromName = getEmailAddressObjectFromString(getHeaderValue(messageData, 'From')).name;\n\n        mappedEmailMessage.toRecipients =\n          convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData, 'To'));\n\n        mappedEmailMessage.ccRecipients =\n          convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData, 'Cc'));\n\n        mappedEmailMessage.bccRecipients =\n          convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData, 'Bcc'));\n\n        delete mappedEmailMessage.messageData;\n        mappedUser.data.push(mappedEmailMessage);\n      }\n    }\n    mappedData.push(mappedUser);\n  }\n\n  return mappedData;\n};\n\nconst getEmailData = function(emails,\n    filterStartDate,\n    filterEndDate,\n    additionalFields,\n    clientId,\n    serviceEmail,\n    privateKey,\n    apiVersion\n  ) {\n  const emailResults = [];\n  const emailResultPromises = [];\n\n  for (let emailIter = 0; emailIter < emails.length; emailIter++) {\n    //initialize emailResults with the email object passed in\n    //and add filter dates\n    emailResults[emailIter] = _.assign({}, emails[emailIter], {\n      filterStartDate: filterStartDate,\n      filterEndDate: filterEndDate\n    });\n\n    emailResultPromises.push(\n      getUserEmails(\n        clientId,\n        serviceEmail,\n        emails[emailIter].emailAfterMapping,\n        privateKey,\n        apiVersion,\n        filterStartDate,\n        filterEndDate,\n        additionalFields,\n        emailResults[emailIter]\n      )\n    );\n  }\n\n  return Promise.all(emailResultPromises)\n  .then(() => {\n    return emailResults;\n  });\n};\n\nGoogleAdapter.prototype.getBatchData = function(emails, filterStartDate, filterEndDate, additionalFields) {\n  const clientId = this._config.credentials.clientId;\n  const clientEmail = this._config.credentials.email;\n  const serviceEmail = this._config.credentials.serviceEmail;\n  const privateKey = this._config.credentials.certificate;\n  const apiVersion = this._config.options.apiVersion;\n\n  const dataAdapterRunStats = {\n    success: true,\n    runDate: moment().utc().toDate(),\n    filterStartDate: filterStartDate,\n    filterEndDate: filterEndDate,\n    emails: emails\n  };\n\n  //first try to get token for the admin - if that fails, then all will fail\n  return getAccessToken(clientId, serviceEmail, clientEmail, privateKey)\n  .then(() => {\n    return getEmailData(\n      emails,\n      filterStartDate,\n      filterEndDate,\n      additionalFields,\n      clientId,\n      serviceEmail,\n      privateKey,\n      apiVersion\n    );\n  })\n  .then((emailData) => {\n    return mapEmailData(emailData);\n  })\n  .then((mappedEmailData) => {\n    dataAdapterRunStats.results = mappedEmailData;\n    return dataAdapterRunStats;\n  })\n  .catch((err) => {\n    dataAdapterRunStats.success = false;\n    dataAdapterRunStats.errorMessage = err;\n    console.log('GoogleMail GetBatchData Error: ' + JSON.stringify(err));\n    return dataAdapterRunStats;\n  });\n};\n\nGoogleAdapter.prototype.runConnectionTest = function(connectionData) {\n  const _this = this;\n  _this._config = new GoogleMail.Configuration(connectionData.credentials);\n  const filterStartDate = moment().utc().startOf('day').add(-1, 'days').toDate();\n  const filterEndDate = moment().utc().startOf('day').toDate();\n  return _this.getBatchData([{emailAfterMapping: _this._config.credentials.email}], filterStartDate, filterEndDate, '')\n  .then((data) => {\n    if (data.success && data.results[0]) {\n      //to see if it really worked, we need to pass in the first result\n      return data.results[0];\n    } else {\n      return data;\n    }\n  });\n};\n\nGoogleAdapter.prototype.runMessageTest = function(connectionData) {\n  const _this = this;\n  _this._config = new GoogleMail.Configuration(connectionData.credentials);\n  const filterStartDate = moment().utc().startOf('day').add(-1, 'days').toDate();\n  const filterEndDate = moment().utc().startOf('day').add(1, 'days').toDate();\n  return _this\n  .getBatchData([_this._config.credentials.email], filterStartDate, filterEndDate, 'Subject,BodyPreview,Body')\n  .then((data) => {\n    console.log('runMessageTest worked');\n    console.log(data.results[0]);\n  })\n  .catch((err) => {\n    console.log('runMessageTest Error: ' + JSON.stringify(err));\n  });\n};\n"],"sourceRoot":"/source/"}