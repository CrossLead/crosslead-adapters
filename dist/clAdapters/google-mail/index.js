'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=GoogleAdapter;var _crypto=require('crypto');var crypto=_interopRequireWildcard(_crypto);var _requestPromise=require('request-promise');var rp=_interopRequireWildcard(_requestPromise);var _util=require('util');var util=_interopRequireWildcard(_util);var _moment=require('moment');var moment=_interopRequireWildcard(_moment);var _querystring=require('querystring');var querystring=_interopRequireWildcard(_querystring);var _lodash=require('lodash');var _=_interopRequireWildcard(_lodash);var _Adapter=require('../base/Adapter');var _Adapter2=_interopRequireDefault(_Adapter);var _googleJs=require('./google-js.js');var GoogleMail=_interopRequireWildcard(_googleJs);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function GoogleAdapter(){_Adapter2.default.call(this);};util.inherits(GoogleAdapter,_Adapter2.default);GoogleAdapter.prototype.init=function(){var _this=this;this._config=new GoogleMail.Configuration(this.credentials);this._service=new GoogleMail.Service(this._config);return this._service.init().then(function()/*client*/{var msg='Successfully initialized gmail adapter for email: %s';console.log(msg,_this.credentials.email);return _this;});};GoogleAdapter.prototype.reset=function(){delete this._config;delete this._service;};var getSingleMessageDetails=function getSingleMessageDetails(messageId,userEmail,token,apiVersion,additionalFields,result){var additionalFieldsToQuery=additionalFields.replace('BodyPreview','snippet');additionalFieldsToQuery=additionalFieldsToQuery.replace('Body','payload(parts)');additionalFieldsToQuery=additionalFieldsToQuery.replace('Subject','payload(parts)');if(additionalFieldsToQuery!==''){additionalFieldsToQuery=','+additionalFieldsToQuery;}var messageRequestOptions={method:'GET',uri:'https://www.googleapis.com/gmail/v'+apiVersion+'/users/'+userEmail+'/messages/'+messageId+'?fields=id,threadId,labelIds,payload(headers)'+additionalFieldsToQuery,headers:{Authorization:'Bearer '+token,Accept:'application/json;odata.metadata=none'}};return rp(messageRequestOptions).then(function(messageDetails){result.messageData=JSON.parse(messageDetails);if(additionalFields.indexOf('Subject')===-1){//remove subject header
var headers=_.get(result,'messageData.payload.headers');var n=_.get(headers,'length');if(n>0){for(var headerIter=0;headerIter<n;headerIter++){if(headers[headerIter].name==='Subject'){headers[headerIter].value='';}}}}return true;});};var getAccessToken=function getAccessToken(clientId,adminEmail,userEmail,privateKey){var tokenRequestUrl='https://www.googleapis.com/oauth2/v3/token';var unixEpochTime=Math.floor(new Date().getTime()/1000);var jwtHeader={alg:'RS256',typ:'JWT'};var jwtPayload={'iss':adminEmail,'scope':'https://www.googleapis.com/auth/gmail.readonly','aud':tokenRequestUrl,'exp':unixEpochTime+3600,'iat':unixEpochTime,'sub':userEmail};var encodedJwtHeader=new Buffer(JSON.stringify(jwtHeader)).toString('base64');var encodedJwtPayload=new Buffer(JSON.stringify(jwtPayload)).toString('base64');var stringToSign=encodedJwtHeader+'.'+encodedJwtPayload;//sign it!
var signer=crypto.createSign('RSA-SHA256');signer.update(stringToSign);var encodedSignedJwtInfo=signer.sign(privateKey,'base64');//define assertion
var clientAssertion=encodedJwtHeader+'.'+encodedJwtPayload+'.'+encodedSignedJwtInfo;var tokenRequestFormData={grant_type:'urn:ietf:params:oauth:grant-type:jwt-bearer',assertion:clientAssertion};var requestData=querystring.stringify(tokenRequestFormData);var requestDataLength=requestData.length;var tokenRequestOptions={method:'POST',port:443,uri:tokenRequestUrl,body:requestData,multipart:false,headers:{'Content-Length':requestDataLength,'Content-Type':'application/x-www-form-urlencoded'}};return rp(tokenRequestOptions).then(function(body){var tokenData=JSON.parse(body);if(tokenData&&tokenData.access_token){return tokenData.access_token;}else{return Promise.reject('Could not get access token.');}}).catch(function(err){var tokenData=JSON.parse(JSON.stringify(err));if(tokenData.name==='StatusCodeError'){var entireMessage=tokenData.message;var messageJson=entireMessage.replace(tokenData.statusCode+' - ','');var messageData=JSON.parse(messageJson.replace(new RegExp('\\"','g'),'"'));//console.log('-----');
//console.log(messageData);
return Promise.reject(messageData);}else{return Promise.reject(err);}});};var getMoreEmails=function getMoreEmails(messages,userEmail,token,apiVersion,additionalFields,emailRequestOptions,firstUri,nextPageToken){emailRequestOptions.uri=firstUri+'&pageToken='+nextPageToken;var tempPageToken='';return rp(emailRequestOptions).then(function(body){var messageDetailPromises=[];var messageList=JSON.parse(body);tempPageToken=messageList.nextPageToken;if(messageList.messages){for(var messageIter=0;messageIter<messageList.messages.length;messageIter++){var messageId=messageList.messages[messageIter].id;var nextMessage={messageId:messageId};messages.push(nextMessage);messageDetailPromises.push(getSingleMessageDetails(messageId,userEmail,token,apiVersion,additionalFields,nextMessage));}}return Promise.all(messageDetailPromises);}).then(function(){if(tempPageToken){return getMoreEmails(messages,userEmail,token,apiVersion,additionalFields,emailRequestOptions,firstUri,tempPageToken);}else{return true;}});};var getUserEmails=function getUserEmails(clientId,serviceEmail,userEmail,privateKey,apiVersion,filterStartDate,filterEndDate,additionalFields,result){var token='';var emailRequestOptions={};var firstUri='';return getAccessToken(clientId,serviceEmail,userEmail,privateKey).then(function(tokenResponse){token=tokenResponse;var queryFilter='\"after:'+filterStartDate.toISOString().substring(0,10).replace(/-/g,'/')+' before:'+filterEndDate.toISOString().substring(0,10).replace(/-/g,'/')+'\"';firstUri='https://www.googleapis.com/gmail/v'+apiVersion+'/users/'+userEmail+'/messages?maxResults=100&q='+queryFilter;emailRequestOptions={method:'GET',uri:firstUri,headers:{Authorization:'Bearer '+token,Accept:'application/json;odata.metadata=none'}};return rp(emailRequestOptions);}).then(function(body){var messageDetailPromises=[];result.data={};result.data.messageList=JSON.parse(body);result.data.messages=[];var messages=_.get(result,'data.messageList.messages');if(messages){for(var messageIter=0;messageIter<messages.length;messageIter++){var messageId=messages[messageIter].id;result.data.messages.push({messageId:messageId});messageDetailPromises.push(getSingleMessageDetails(messageId,userEmail,token,apiVersion,additionalFields,result.data.messages[messageIter]));}}return Promise.all(messageDetailPromises);}).then(function(){//console.log(result.data.messageList);
if(result.data.messageList.nextPageToken){return getMoreEmails(result.data.messages,userEmail,token,apiVersion,additionalFields,emailRequestOptions,firstUri,result.data.messageList.nextPageToken);}else{return true;}}).then(function(){result.success=true;}).catch(function(err){result.success=false;if(err.name==='StatusCodeError'){var entireMessage=err.message;var messageJson=entireMessage.replace(err.statusCode+' - ','');var messageData=JSON.parse(messageJson.replace(new RegExp('\\"','g'),'"'));result.errorMessage=messageData.error.message;}else{result.errorMessage=JSON.stringify(err);}return true;});};var getHeaderValue=function getHeaderValue(message,headerName){var headerValues=_(message.payload.headers).filter(function(header){return header.name===headerName;}).pluck('value').value();if(headerValues.length>0){return headerValues[0];}else{return null;}};var getEmailAddressObjectFromString=function getEmailAddressObjectFromString(value){var returnObject={name:value,address:value};if(value&&value.indexOf('>')>0){var valueArray=value.split(' ');returnObject.address=valueArray[valueArray.length-1].replace('<','').replace('>','');returnObject.name=value.replace(' '+valueArray[valueArray.length-1],'');}return returnObject;};var convertEmailListToArrayOfEmailAddressObjects=function convertEmailListToArrayOfEmailAddressObjects(emailList){var emailAddressObjectArray=[];if(emailList){var emailArray=emailList.split(',');for(var emailIter=0;emailIter<emailArray.length;emailIter++){emailAddressObjectArray.push(getEmailAddressObjectFromString(emailArray[emailIter]));}}return emailAddressObjectArray;};var hasLabel=function hasLabel(message,labelValue){return message.labelIds&&message.labelIds.length&&message.labelIds.indexOf(labelValue)>=0;};var getFirstScalarPart=function getFirstScalarPart(partToCheck){var returnObject=partToCheck;_.forEach(partToCheck.headers,function(header){if(header.name==='Content-Type'&&header.value.indexOf('multipart/')>-1&&partToCheck.parts.length>0){returnObject=getFirstScalarPart(partToCheck.parts[0]);}});return returnObject;};var mapEmailData=function mapEmailData(emailData){var mappedData=[];for(var userIter=0;userIter<emailData.length;userIter++){var mappedUser=_.assign({},emailData[userIter],{data:[],success:emailData[userIter].success,errorMessage:emailData[userIter].errorMessage});if(emailData[userIter].success){for(var i=0;i<emailData[userIter].data.messages.length;i++){var originalEmailMessage=emailData[userIter].data.messages[i];var mappedEmailMessage={};mappedEmailMessage=originalEmailMessage;var messageData=originalEmailMessage.messageData;mappedEmailMessage.messageId=originalEmailMessage.messageId;mappedEmailMessage.conversationId=messageData.threadId;mappedEmailMessage.dateTimeSent=moment(new Date(getHeaderValue(messageData,'Date'))).utc().toDate();var dateReceived=getHeaderValue(messageData,'Received');if(dateReceived){var datePartOfValue=dateReceived.split(';')[1];mappedEmailMessage.dateTimeReceived=moment(new Date(datePartOfValue)).utc().toDate();}mappedEmailMessage.importance='Normal';if(hasLabel(messageData,'IMPORTANT')){mappedEmailMessage.importance='Important';}mappedEmailMessage.categories=messageData.labelIds;if(hasLabel(messageData,'SENT')){mappedEmailMessage.folderId='Sent Items';mappedEmailMessage.folderName='Sent Items';}else{mappedEmailMessage.folderId='Inbox';mappedEmailMessage.folderName='Inbox';}mappedEmailMessage.subject=getHeaderValue(messageData,'Subject');mappedEmailMessage.bodyPreview=messageData.snippet;if(messageData.payload.parts&&messageData.payload.parts.length>0){var partToCheck=getFirstScalarPart(messageData.payload.parts[0]);mappedEmailMessage.contentType=partToCheck.mimeType;mappedEmailMessage.body=new Buffer(partToCheck.body.data,'base64').toString();}mappedEmailMessage.isDeliveryReceiptRequested=null;mappedEmailMessage.isReadReceiptRequested=null;mappedEmailMessage.hasAttachments=null;mappedEmailMessage.isDraft=null;mappedEmailMessage.isRead=hasLabel(messageData,'READ');mappedEmailMessage.fromAddress=getEmailAddressObjectFromString(getHeaderValue(messageData,'From')).address;mappedEmailMessage.fromName=getEmailAddressObjectFromString(getHeaderValue(messageData,'From')).name;mappedEmailMessage.toRecipients=convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData,'To'));mappedEmailMessage.ccRecipients=convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData,'Cc'));mappedEmailMessage.bccRecipients=convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData,'Bcc'));delete mappedEmailMessage.messageData;mappedUser.data.push(mappedEmailMessage);}}mappedData.push(mappedUser);}return mappedData;};var getEmailData=function getEmailData(emails,filterStartDate,filterEndDate,additionalFields,clientId,serviceEmail,privateKey,apiVersion){var emailResults=[];var emailResultPromises=[];for(var emailIter=0;emailIter<emails.length;emailIter++){//initialize emailResults with the email object passed in
//and add filter dates
emailResults[emailIter]=_.assign({},emails[emailIter],{filterStartDate:filterStartDate,filterEndDate:filterEndDate});emailResultPromises.push(getUserEmails(clientId,serviceEmail,emails[emailIter].emailAfterMapping,privateKey,apiVersion,filterStartDate,filterEndDate,additionalFields,emailResults[emailIter]));}return Promise.all(emailResultPromises).then(function(){return emailResults;});};GoogleAdapter.prototype.getBatchData=function(emails,filterStartDate,filterEndDate,additionalFields){var clientId=this._config.credentials.clientId;var clientEmail=this._config.credentials.email;var serviceEmail=this._config.credentials.serviceEmail;var privateKey=this._config.credentials.certificate;var apiVersion=this._config.options.apiVersion;var dataAdapterRunStats={success:true,runDate:moment().utc().toDate(),filterStartDate:filterStartDate,filterEndDate:filterEndDate,emails:emails};//first try to get token for the admin - if that fails, then all will fail
return getAccessToken(clientId,serviceEmail,clientEmail,privateKey).then(function(){return getEmailData(emails,filterStartDate,filterEndDate,additionalFields,clientId,serviceEmail,privateKey,apiVersion);}).then(function(emailData){return mapEmailData(emailData);}).then(function(mappedEmailData){dataAdapterRunStats.results=mappedEmailData;return dataAdapterRunStats;}).catch(function(err){dataAdapterRunStats.success=false;dataAdapterRunStats.errorMessage=err;console.log('GoogleMail GetBatchData Error: '+JSON.stringify(err));return dataAdapterRunStats;});};GoogleAdapter.prototype.runConnectionTest=function(connectionData){var _this=this;_this._config=new GoogleMail.Configuration(connectionData.credentials);var filterStartDate=moment().utc().startOf('day').add(-1,'days').toDate();var filterEndDate=moment().utc().startOf('day').toDate();return _this.getBatchData([{emailAfterMapping:_this._config.credentials.email}],filterStartDate,filterEndDate,'').then(function(data){if(data.success&&data.results[0]){//to see if it really worked, we need to pass in the first result
return data.results[0];}else{return data;}});};GoogleAdapter.prototype.runMessageTest=function(connectionData){var _this=this;_this._config=new GoogleMail.Configuration(connectionData.credentials);var filterStartDate=moment().utc().startOf('day').add(-1,'days').toDate();var filterEndDate=moment().utc().startOf('day').add(1,'days').toDate();return _this.getBatchData([_this._config.credentials.email],filterStartDate,filterEndDate,'Subject,BodyPreview,Body').then(function(data){console.log('runMessageTest worked');console.log(data.results[0]);}).catch(function(err){console.log('runMessageTest Error: '+JSON.stringify(err));});};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsQWRhcHRlcnMvZ29vZ2xlLW1haWwvaW5kZXguanMiXSwibmFtZXMiOlsiR29vZ2xlQWRhcHRlciIsImNyeXB0byIsInJwIiwidXRpbCIsIm1vbWVudCIsInF1ZXJ5c3RyaW5nIiwiXyIsIkdvb2dsZU1haWwiLCJjYWxsIiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJpbml0IiwiX3RoaXMiLCJfY29uZmlnIiwiQ29uZmlndXJhdGlvbiIsImNyZWRlbnRpYWxzIiwiX3NlcnZpY2UiLCJTZXJ2aWNlIiwidGhlbiIsIm1zZyIsImNvbnNvbGUiLCJsb2ciLCJlbWFpbCIsInJlc2V0IiwiZ2V0U2luZ2xlTWVzc2FnZURldGFpbHMiLCJtZXNzYWdlSWQiLCJ1c2VyRW1haWwiLCJ0b2tlbiIsImFwaVZlcnNpb24iLCJhZGRpdGlvbmFsRmllbGRzIiwicmVzdWx0IiwiYWRkaXRpb25hbEZpZWxkc1RvUXVlcnkiLCJyZXBsYWNlIiwibWVzc2FnZVJlcXVlc3RPcHRpb25zIiwibWV0aG9kIiwidXJpIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJBY2NlcHQiLCJtZXNzYWdlRGV0YWlscyIsIm1lc3NhZ2VEYXRhIiwiSlNPTiIsInBhcnNlIiwiaW5kZXhPZiIsImdldCIsIm4iLCJoZWFkZXJJdGVyIiwibmFtZSIsInZhbHVlIiwiZ2V0QWNjZXNzVG9rZW4iLCJjbGllbnRJZCIsImFkbWluRW1haWwiLCJwcml2YXRlS2V5IiwidG9rZW5SZXF1ZXN0VXJsIiwidW5peEVwb2NoVGltZSIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJnZXRUaW1lIiwiand0SGVhZGVyIiwiYWxnIiwidHlwIiwiand0UGF5bG9hZCIsImVuY29kZWRKd3RIZWFkZXIiLCJCdWZmZXIiLCJzdHJpbmdpZnkiLCJ0b1N0cmluZyIsImVuY29kZWRKd3RQYXlsb2FkIiwic3RyaW5nVG9TaWduIiwic2lnbmVyIiwiY3JlYXRlU2lnbiIsInVwZGF0ZSIsImVuY29kZWRTaWduZWRKd3RJbmZvIiwic2lnbiIsImNsaWVudEFzc2VydGlvbiIsInRva2VuUmVxdWVzdEZvcm1EYXRhIiwiZ3JhbnRfdHlwZSIsImFzc2VydGlvbiIsInJlcXVlc3REYXRhIiwicmVxdWVzdERhdGFMZW5ndGgiLCJsZW5ndGgiLCJ0b2tlblJlcXVlc3RPcHRpb25zIiwicG9ydCIsImJvZHkiLCJtdWx0aXBhcnQiLCJ0b2tlbkRhdGEiLCJhY2Nlc3NfdG9rZW4iLCJQcm9taXNlIiwicmVqZWN0IiwiY2F0Y2giLCJlcnIiLCJlbnRpcmVNZXNzYWdlIiwibWVzc2FnZSIsIm1lc3NhZ2VKc29uIiwic3RhdHVzQ29kZSIsIlJlZ0V4cCIsImdldE1vcmVFbWFpbHMiLCJtZXNzYWdlcyIsImVtYWlsUmVxdWVzdE9wdGlvbnMiLCJmaXJzdFVyaSIsIm5leHRQYWdlVG9rZW4iLCJ0ZW1wUGFnZVRva2VuIiwibWVzc2FnZURldGFpbFByb21pc2VzIiwibWVzc2FnZUxpc3QiLCJtZXNzYWdlSXRlciIsImlkIiwibmV4dE1lc3NhZ2UiLCJwdXNoIiwiYWxsIiwiZ2V0VXNlckVtYWlscyIsInNlcnZpY2VFbWFpbCIsImZpbHRlclN0YXJ0RGF0ZSIsImZpbHRlckVuZERhdGUiLCJ0b2tlblJlc3BvbnNlIiwicXVlcnlGaWx0ZXIiLCJ0b0lTT1N0cmluZyIsInN1YnN0cmluZyIsImRhdGEiLCJzdWNjZXNzIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3IiLCJnZXRIZWFkZXJWYWx1ZSIsImhlYWRlck5hbWUiLCJoZWFkZXJWYWx1ZXMiLCJwYXlsb2FkIiwiZmlsdGVyIiwiaGVhZGVyIiwicGx1Y2siLCJnZXRFbWFpbEFkZHJlc3NPYmplY3RGcm9tU3RyaW5nIiwicmV0dXJuT2JqZWN0IiwiYWRkcmVzcyIsInZhbHVlQXJyYXkiLCJzcGxpdCIsImNvbnZlcnRFbWFpbExpc3RUb0FycmF5T2ZFbWFpbEFkZHJlc3NPYmplY3RzIiwiZW1haWxMaXN0IiwiZW1haWxBZGRyZXNzT2JqZWN0QXJyYXkiLCJlbWFpbEFycmF5IiwiZW1haWxJdGVyIiwiaGFzTGFiZWwiLCJsYWJlbFZhbHVlIiwibGFiZWxJZHMiLCJnZXRGaXJzdFNjYWxhclBhcnQiLCJwYXJ0VG9DaGVjayIsImZvckVhY2giLCJwYXJ0cyIsIm1hcEVtYWlsRGF0YSIsImVtYWlsRGF0YSIsIm1hcHBlZERhdGEiLCJ1c2VySXRlciIsIm1hcHBlZFVzZXIiLCJhc3NpZ24iLCJpIiwib3JpZ2luYWxFbWFpbE1lc3NhZ2UiLCJtYXBwZWRFbWFpbE1lc3NhZ2UiLCJjb252ZXJzYXRpb25JZCIsInRocmVhZElkIiwiZGF0ZVRpbWVTZW50IiwidXRjIiwidG9EYXRlIiwiZGF0ZVJlY2VpdmVkIiwiZGF0ZVBhcnRPZlZhbHVlIiwiZGF0ZVRpbWVSZWNlaXZlZCIsImltcG9ydGFuY2UiLCJjYXRlZ29yaWVzIiwiZm9sZGVySWQiLCJmb2xkZXJOYW1lIiwic3ViamVjdCIsImJvZHlQcmV2aWV3Iiwic25pcHBldCIsImNvbnRlbnRUeXBlIiwibWltZVR5cGUiLCJpc0RlbGl2ZXJ5UmVjZWlwdFJlcXVlc3RlZCIsImlzUmVhZFJlY2VpcHRSZXF1ZXN0ZWQiLCJoYXNBdHRhY2htZW50cyIsImlzRHJhZnQiLCJpc1JlYWQiLCJmcm9tQWRkcmVzcyIsImZyb21OYW1lIiwidG9SZWNpcGllbnRzIiwiY2NSZWNpcGllbnRzIiwiYmNjUmVjaXBpZW50cyIsImdldEVtYWlsRGF0YSIsImVtYWlscyIsImVtYWlsUmVzdWx0cyIsImVtYWlsUmVzdWx0UHJvbWlzZXMiLCJlbWFpbEFmdGVyTWFwcGluZyIsImdldEJhdGNoRGF0YSIsImNsaWVudEVtYWlsIiwiY2VydGlmaWNhdGUiLCJvcHRpb25zIiwiZGF0YUFkYXB0ZXJSdW5TdGF0cyIsInJ1bkRhdGUiLCJtYXBwZWRFbWFpbERhdGEiLCJyZXN1bHRzIiwicnVuQ29ubmVjdGlvblRlc3QiLCJjb25uZWN0aW9uRGF0YSIsInN0YXJ0T2YiLCJhZGQiLCJydW5NZXNzYWdlVGVzdCJdLCJtYXBwaW5ncyI6InNGQVV3QkEsYSxDQVZ4Qiw4QixHQUFZQyxPLGtDQUNaLCtDLEdBQVlDLEcs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QUNELENBTE0sRUFNTnhHLEtBTk0sQ0FNQSxTQUFDQyxHQUFELENBQVMsQ0FDZHRFLFFBQVFDLEdBQVIsQ0FBWSx5QkFBMkJvQixLQUFLd0IsU0FBTCxDQUFleUIsR0FBZixDQUF2QyxFQUNELENBUk0sQ0FBUCxDQVNELENBZEQiLCJmaWxlIjoiY2xBZGFwdGVycy9nb29nbGUtbWFpbC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0ICogYXMgcnAgZnJvbSAncmVxdWVzdC1wcm9taXNlJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCAqIGFzIHF1ZXJ5c3RyaW5nIGZyb20gJ3F1ZXJ5c3RyaW5nJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IEJhc2VBZGFwdGVyIGZyb20gJy4uL2Jhc2UvQWRhcHRlcic7XG5pbXBvcnQgKiBhcyBHb29nbGVNYWlsIGZyb20gJy4vZ29vZ2xlLWpzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR29vZ2xlQWRhcHRlcigpIHtcbiAgQmFzZUFkYXB0ZXIuY2FsbCh0aGlzKTtcbn07XG5cbnV0aWwuaW5oZXJpdHMoR29vZ2xlQWRhcHRlciwgQmFzZUFkYXB0ZXIpO1xuXG5Hb29nbGVBZGFwdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IF90aGlzID0gdGhpcztcbiAgdGhpcy5fY29uZmlnID0gbmV3IEdvb2dsZU1haWwuQ29uZmlndXJhdGlvbih0aGlzLmNyZWRlbnRpYWxzKTtcbiAgdGhpcy5fc2VydmljZSA9IG5ldyBHb29nbGVNYWlsLlNlcnZpY2UodGhpcy5fY29uZmlnKTtcbiAgcmV0dXJuIHRoaXMuX3NlcnZpY2VcbiAgICAuaW5pdCgpXG4gICAgLnRoZW4oKCAvKmNsaWVudCovICkgPT4ge1xuICAgICAgY29uc3QgbXNnID0gJ1N1Y2Nlc3NmdWxseSBpbml0aWFsaXplZCBnbWFpbCBhZGFwdGVyIGZvciBlbWFpbDogJXMnO1xuICAgICAgY29uc29sZS5sb2cobXNnLCBfdGhpcy5jcmVkZW50aWFscy5lbWFpbCk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfSk7XG59O1xuXG5Hb29nbGVBZGFwdGVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5fY29uZmlnO1xuICBkZWxldGUgdGhpcy5fc2VydmljZTtcbn07XG5cbmNvbnN0IGdldFNpbmdsZU1lc3NhZ2VEZXRhaWxzID0gZnVuY3Rpb24obWVzc2FnZUlkLCB1c2VyRW1haWwsIHRva2VuLCBhcGlWZXJzaW9uLCBhZGRpdGlvbmFsRmllbGRzLCByZXN1bHQpIHtcbiAgbGV0IGFkZGl0aW9uYWxGaWVsZHNUb1F1ZXJ5ID0gYWRkaXRpb25hbEZpZWxkcy5yZXBsYWNlKCdCb2R5UHJldmlldycsICdzbmlwcGV0Jyk7XG4gIGFkZGl0aW9uYWxGaWVsZHNUb1F1ZXJ5ID0gYWRkaXRpb25hbEZpZWxkc1RvUXVlcnkucmVwbGFjZSgnQm9keScsICdwYXlsb2FkKHBhcnRzKScpO1xuICBhZGRpdGlvbmFsRmllbGRzVG9RdWVyeSA9IGFkZGl0aW9uYWxGaWVsZHNUb1F1ZXJ5LnJlcGxhY2UoJ1N1YmplY3QnLCAncGF5bG9hZChwYXJ0cyknKTtcblxuICBpZiAoYWRkaXRpb25hbEZpZWxkc1RvUXVlcnkgIT09ICcnKSB7XG4gICAgYWRkaXRpb25hbEZpZWxkc1RvUXVlcnkgPSAnLCcgKyBhZGRpdGlvbmFsRmllbGRzVG9RdWVyeTtcbiAgfVxuXG4gIGNvbnN0IG1lc3NhZ2VSZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHVyaTogKFxuICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2dtYWlsL3YnICtcbiAgICAgICAgYXBpVmVyc2lvbiArXG4gICAgICAgICcvdXNlcnMvJyArXG4gICAgICAgIHVzZXJFbWFpbCArXG4gICAgICAgICcvbWVzc2FnZXMvJyArXG4gICAgICAgIG1lc3NhZ2VJZCArXG4gICAgICAgICc/ZmllbGRzPWlkLHRocmVhZElkLGxhYmVsSWRzLHBheWxvYWQoaGVhZGVycyknICtcbiAgICAgICAgYWRkaXRpb25hbEZpZWxkc1RvUXVlcnlcbiAgICApLFxuICAgIGhlYWRlcnMgOiB7XG4gICAgICBBdXRob3JpemF0aW9uOiAnQmVhcmVyICcgKyB0b2tlbixcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb247b2RhdGEubWV0YWRhdGE9bm9uZSdcbiAgICB9XG4gIH07XG4gIHJldHVybiBycChtZXNzYWdlUmVxdWVzdE9wdGlvbnMpXG4gIC50aGVuKChtZXNzYWdlRGV0YWlscykgPT4ge1xuICAgIHJlc3VsdC5tZXNzYWdlRGF0YSA9IEpTT04ucGFyc2UobWVzc2FnZURldGFpbHMpO1xuICAgIGlmIChhZGRpdGlvbmFsRmllbGRzLmluZGV4T2YoJ1N1YmplY3QnKSA9PT0gLTEpIHtcbiAgICAgIC8vcmVtb3ZlIHN1YmplY3QgaGVhZGVyXG4gICAgICBjb25zdCBoZWFkZXJzID0gXy5nZXQocmVzdWx0LCAnbWVzc2FnZURhdGEucGF5bG9hZC5oZWFkZXJzJyk7XG4gICAgICBjb25zdCBuID0gXy5nZXQoaGVhZGVycywgJ2xlbmd0aCcpO1xuICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGhlYWRlckl0ZXIgPSAwOyBoZWFkZXJJdGVyIDwgbjsgaGVhZGVySXRlcisrKSB7XG4gICAgICAgICAgaWYgKGhlYWRlcnNbaGVhZGVySXRlcl0ubmFtZSA9PT0gJ1N1YmplY3QnKSB7XG4gICAgICAgICAgICBoZWFkZXJzW2hlYWRlckl0ZXJdLnZhbHVlID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufTtcblxuY29uc3QgZ2V0QWNjZXNzVG9rZW4gPSBmdW5jdGlvbihjbGllbnRJZCwgYWRtaW5FbWFpbCwgdXNlckVtYWlsLCBwcml2YXRlS2V5KSB7XG4gIGNvbnN0IHRva2VuUmVxdWVzdFVybCA9ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW4nO1xuICBjb25zdCB1bml4RXBvY2hUaW1lID0gTWF0aC5mbG9vcigobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCk7XG5cbiAgY29uc3Qgand0SGVhZGVyID0ge1xuICAgIGFsZzogJ1JTMjU2JyxcbiAgICB0eXA6ICdKV1QnXG4gIH07XG5cbiAgY29uc3Qgand0UGF5bG9hZCA9IHtcbiAgICAnaXNzJzogYWRtaW5FbWFpbCxcbiAgICAnc2NvcGUnOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9nbWFpbC5yZWFkb25seScsXG4gICAgJ2F1ZCc6IHRva2VuUmVxdWVzdFVybCxcbiAgICAnZXhwJzogdW5peEVwb2NoVGltZSArIDM2MDAsXG4gICAgJ2lhdCc6IHVuaXhFcG9jaFRpbWUsXG4gICAgJ3N1Yic6IHVzZXJFbWFpbFxuICB9O1xuXG4gIGNvbnN0IGVuY29kZWRKd3RIZWFkZXIgPSBuZXcgQnVmZmVyKEpTT04uc3RyaW5naWZ5KGp3dEhlYWRlcikpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgY29uc3QgZW5jb2RlZEp3dFBheWxvYWQgPSBuZXcgQnVmZmVyKEpTT04uc3RyaW5naWZ5KGp3dFBheWxvYWQpKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIGNvbnN0IHN0cmluZ1RvU2lnbiA9IGVuY29kZWRKd3RIZWFkZXIgKyAnLicgKyBlbmNvZGVkSnd0UGF5bG9hZDtcblxuICAvL3NpZ24gaXQhXG4gIGNvbnN0IHNpZ25lciA9IGNyeXB0by5jcmVhdGVTaWduKCdSU0EtU0hBMjU2Jyk7XG4gIHNpZ25lci51cGRhdGUoc3RyaW5nVG9TaWduKTtcblxuICBjb25zdCBlbmNvZGVkU2lnbmVkSnd0SW5mbyA9IHNpZ25lci5zaWduKHByaXZhdGVLZXksICdiYXNlNjQnKTtcblxuICAvL2RlZmluZSBhc3NlcnRpb25cbiAgY29uc3QgY2xpZW50QXNzZXJ0aW9uID0gZW5jb2RlZEp3dEhlYWRlciArICcuJyArIGVuY29kZWRKd3RQYXlsb2FkICsgJy4nICsgZW5jb2RlZFNpZ25lZEp3dEluZm87XG5cbiAgY29uc3QgdG9rZW5SZXF1ZXN0Rm9ybURhdGEgPSB7XG4gICAgZ3JhbnRfdHlwZTogJ3VybjppZXRmOnBhcmFtczpvYXV0aDpncmFudC10eXBlOmp3dC1iZWFyZXInLFxuICAgIGFzc2VydGlvbjogY2xpZW50QXNzZXJ0aW9uXG4gIH07XG5cbiAgY29uc3QgcmVxdWVzdERhdGEgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodG9rZW5SZXF1ZXN0Rm9ybURhdGEpO1xuICBjb25zdCByZXF1ZXN0RGF0YUxlbmd0aCA9IHJlcXVlc3REYXRhLmxlbmd0aDtcblxuICBjb25zdCB0b2tlblJlcXVlc3RPcHRpb25zID0ge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIHBvcnQ6IDQ0MyxcbiAgICB1cmk6IHRva2VuUmVxdWVzdFVybCxcbiAgICBib2R5OiByZXF1ZXN0RGF0YSxcbiAgICBtdWx0aXBhcnQ6IGZhbHNlLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LUxlbmd0aCc6IHJlcXVlc3REYXRhTGVuZ3RoLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBycCh0b2tlblJlcXVlc3RPcHRpb25zKVxuICAudGhlbigoYm9keSkgPT4ge1xuICAgIGNvbnN0IHRva2VuRGF0YSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgaWYgKHRva2VuRGF0YSAmJiB0b2tlbkRhdGEuYWNjZXNzX3Rva2VuKSB7XG4gICAgICByZXR1cm4gdG9rZW5EYXRhLmFjY2Vzc190b2tlbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdDb3VsZCBub3QgZ2V0IGFjY2VzcyB0b2tlbi4nKTtcbiAgICB9XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgY29uc3QgdG9rZW5EYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlcnIpKTtcbiAgICBpZiAodG9rZW5EYXRhLm5hbWUgPT09ICdTdGF0dXNDb2RlRXJyb3InKSB7XG4gICAgICBjb25zdCBlbnRpcmVNZXNzYWdlID0gdG9rZW5EYXRhLm1lc3NhZ2U7XG4gICAgICBjb25zdCBtZXNzYWdlSnNvbiA9IGVudGlyZU1lc3NhZ2UucmVwbGFjZSh0b2tlbkRhdGEuc3RhdHVzQ29kZSArICcgLSAnLCAnJyk7XG4gICAgICBjb25zdCBtZXNzYWdlRGF0YSA9IEpTT04ucGFyc2UobWVzc2FnZUpzb24ucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcXCInLCAnZycpLCdcIicpKTtcbiAgICAgIC8vY29uc29sZS5sb2coJy0tLS0tJyk7XG4gICAgICAvL2NvbnNvbGUubG9nKG1lc3NhZ2VEYXRhKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtZXNzYWdlRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCBnZXRNb3JlRW1haWxzID0gZnVuY3Rpb24oXG4gICAgbWVzc2FnZXMsXG4gICAgdXNlckVtYWlsLFxuICAgIHRva2VuLFxuICAgIGFwaVZlcnNpb24sXG4gICAgYWRkaXRpb25hbEZpZWxkcyxcbiAgICBlbWFpbFJlcXVlc3RPcHRpb25zLFxuICAgIGZpcnN0VXJpLFxuICAgIG5leHRQYWdlVG9rZW5cbiAgKSB7XG4gIGVtYWlsUmVxdWVzdE9wdGlvbnMudXJpID0gZmlyc3RVcmkgKyAnJnBhZ2VUb2tlbj0nICsgbmV4dFBhZ2VUb2tlbjtcbiAgbGV0IHRlbXBQYWdlVG9rZW4gPSAnJztcbiAgcmV0dXJuIHJwKGVtYWlsUmVxdWVzdE9wdGlvbnMpXG4gIC50aGVuKChib2R5KSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZURldGFpbFByb21pc2VzID0gW107XG4gICAgY29uc3QgbWVzc2FnZUxpc3QgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgIHRlbXBQYWdlVG9rZW4gPSBtZXNzYWdlTGlzdC5uZXh0UGFnZVRva2VuO1xuXG4gICAgaWYgKG1lc3NhZ2VMaXN0Lm1lc3NhZ2VzKSB7XG4gICAgICBmb3IgKGxldCBtZXNzYWdlSXRlciA9IDA7IG1lc3NhZ2VJdGVyIDwgbWVzc2FnZUxpc3QubWVzc2FnZXMubGVuZ3RoOyBtZXNzYWdlSXRlcisrKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VJZCA9IG1lc3NhZ2VMaXN0Lm1lc3NhZ2VzW21lc3NhZ2VJdGVyXS5pZDtcbiAgICAgICAgY29uc3QgbmV4dE1lc3NhZ2UgPSB7bWVzc2FnZUlkOiBtZXNzYWdlSWR9O1xuICAgICAgICBtZXNzYWdlcy5wdXNoKG5leHRNZXNzYWdlKTtcbiAgICAgICAgbWVzc2FnZURldGFpbFByb21pc2VzLnB1c2goXG4gICAgICAgICAgZ2V0U2luZ2xlTWVzc2FnZURldGFpbHMobWVzc2FnZUlkLCB1c2VyRW1haWwsIHRva2VuLCBhcGlWZXJzaW9uLCBhZGRpdGlvbmFsRmllbGRzLCBuZXh0TWVzc2FnZSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChtZXNzYWdlRGV0YWlsUHJvbWlzZXMpO1xuICB9KVxuICAudGhlbigoKSA9PiB7XG4gICAgaWYodGVtcFBhZ2VUb2tlbikge1xuICAgICAgcmV0dXJuIGdldE1vcmVFbWFpbHMoXG4gICAgICAgIG1lc3NhZ2VzLCB1c2VyRW1haWwsIHRva2VuLCBhcGlWZXJzaW9uLCBhZGRpdGlvbmFsRmllbGRzLCBlbWFpbFJlcXVlc3RPcHRpb25zLCBmaXJzdFVyaSwgdGVtcFBhZ2VUb2tlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IGdldFVzZXJFbWFpbHMgPSBmdW5jdGlvbihjbGllbnRJZCxcbiAgICBzZXJ2aWNlRW1haWwsXG4gICAgdXNlckVtYWlsLFxuICAgIHByaXZhdGVLZXksXG4gICAgYXBpVmVyc2lvbixcbiAgICBmaWx0ZXJTdGFydERhdGUsXG4gICAgZmlsdGVyRW5kRGF0ZSxcbiAgICBhZGRpdGlvbmFsRmllbGRzLFxuICAgIHJlc3VsdFxuICApIHtcbiAgbGV0IHRva2VuID0gJyc7XG4gIGxldCBlbWFpbFJlcXVlc3RPcHRpb25zID0ge307XG4gIGxldCBmaXJzdFVyaSA9ICcnO1xuICByZXR1cm4gZ2V0QWNjZXNzVG9rZW4oY2xpZW50SWQsIHNlcnZpY2VFbWFpbCwgdXNlckVtYWlsLCBwcml2YXRlS2V5KVxuICAudGhlbigodG9rZW5SZXNwb25zZSkgPT4ge1xuICAgIHRva2VuID0gdG9rZW5SZXNwb25zZTtcbiAgICBjb25zdCBxdWVyeUZpbHRlciA9ICdcXFwiYWZ0ZXI6JyArXG4gICAgICAgICAgZmlsdGVyU3RhcnREYXRlLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKS5yZXBsYWNlKC8tL2csICcvJykgK1xuICAgICAgICAgICcgYmVmb3JlOicgK1xuICAgICAgICAgIGZpbHRlckVuZERhdGUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApLnJlcGxhY2UoLy0vZywgJy8nKSArXG4gICAgICAgICAgJ1xcXCInO1xuXG4gICAgZmlyc3RVcmkgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vZ21haWwvdicgK1xuICAgICAgICBhcGlWZXJzaW9uICtcbiAgICAgICAgJy91c2Vycy8nICtcbiAgICAgICAgdXNlckVtYWlsICtcbiAgICAgICAgJy9tZXNzYWdlcz9tYXhSZXN1bHRzPTEwMCZxPScgK1xuICAgICAgICBxdWVyeUZpbHRlcjtcblxuICAgIGVtYWlsUmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgdXJpOiBmaXJzdFVyaSxcbiAgICAgIGhlYWRlcnMgOiB7XG4gICAgICAgIEF1dGhvcml6YXRpb246ICdCZWFyZXIgJyArIHRva2VuLFxuICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uO29kYXRhLm1ldGFkYXRhPW5vbmUnXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcnAoZW1haWxSZXF1ZXN0T3B0aW9ucyk7XG4gIH0pXG4gIC50aGVuKChib2R5KSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZURldGFpbFByb21pc2VzID0gW107XG4gICAgcmVzdWx0LmRhdGEgPSB7fTtcbiAgICByZXN1bHQuZGF0YS5tZXNzYWdlTGlzdCA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgcmVzdWx0LmRhdGEubWVzc2FnZXMgPSBbXTtcblxuICAgIGNvbnN0IG1lc3NhZ2VzID0gXy5nZXQocmVzdWx0LCAnZGF0YS5tZXNzYWdlTGlzdC5tZXNzYWdlcycpO1xuXG4gICAgaWYgKG1lc3NhZ2VzKSB7XG4gICAgICBmb3IgKGxldCBtZXNzYWdlSXRlciA9IDA7IG1lc3NhZ2VJdGVyIDwgbWVzc2FnZXMubGVuZ3RoOyBtZXNzYWdlSXRlcisrKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VJZCA9IG1lc3NhZ2VzW21lc3NhZ2VJdGVyXS5pZDtcbiAgICAgICAgcmVzdWx0LmRhdGEubWVzc2FnZXMucHVzaCh7bWVzc2FnZUlkOiBtZXNzYWdlSWR9KTtcbiAgICAgICAgbWVzc2FnZURldGFpbFByb21pc2VzLnB1c2goXG4gICAgICAgICAgZ2V0U2luZ2xlTWVzc2FnZURldGFpbHMoXG4gICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICB1c2VyRW1haWwsXG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgIGFwaVZlcnNpb24sXG4gICAgICAgICAgICBhZGRpdGlvbmFsRmllbGRzLFxuICAgICAgICAgICAgcmVzdWx0LmRhdGEubWVzc2FnZXNbbWVzc2FnZUl0ZXJdXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChtZXNzYWdlRGV0YWlsUHJvbWlzZXMpO1xuICB9KVxuICAudGhlbigoKSA9PiB7XG4gICAgLy9jb25zb2xlLmxvZyhyZXN1bHQuZGF0YS5tZXNzYWdlTGlzdCk7XG4gICAgaWYocmVzdWx0LmRhdGEubWVzc2FnZUxpc3QubmV4dFBhZ2VUb2tlbikge1xuICAgICAgcmV0dXJuIGdldE1vcmVFbWFpbHMoXG4gICAgICAgIHJlc3VsdC5kYXRhLm1lc3NhZ2VzLFxuICAgICAgICB1c2VyRW1haWwsXG4gICAgICAgIHRva2VuLFxuICAgICAgICBhcGlWZXJzaW9uLFxuICAgICAgICBhZGRpdGlvbmFsRmllbGRzLFxuICAgICAgICBlbWFpbFJlcXVlc3RPcHRpb25zLFxuICAgICAgICBmaXJzdFVyaSxcbiAgICAgICAgcmVzdWx0LmRhdGEubWVzc2FnZUxpc3QubmV4dFBhZ2VUb2tlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KVxuICAudGhlbigoKSA9PiB7XG4gICAgcmVzdWx0LnN1Y2Nlc3MgPSB0cnVlO1xuICB9KVxuICAuY2F0Y2goKGVycikgPT4ge1xuICAgIHJlc3VsdC5zdWNjZXNzID0gZmFsc2U7XG4gICAgaWYgKGVyci5uYW1lID09PSAnU3RhdHVzQ29kZUVycm9yJykge1xuICAgICAgY29uc3QgZW50aXJlTWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuICAgICAgY29uc3QgbWVzc2FnZUpzb24gPSBlbnRpcmVNZXNzYWdlLnJlcGxhY2UoZXJyLnN0YXR1c0NvZGUgKyAnIC0gJywgJycpO1xuICAgICAgY29uc3QgbWVzc2FnZURhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2VKc29uLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxcXFwiJywgJ2cnKSwnXCInKSk7XG4gICAgICByZXN1bHQuZXJyb3JNZXNzYWdlID0gbWVzc2FnZURhdGEuZXJyb3IubWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LmVycm9yTWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KGVycik7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn07XG5cbmNvbnN0IGdldEhlYWRlclZhbHVlID0gZnVuY3Rpb24obWVzc2FnZSwgaGVhZGVyTmFtZSkge1xuICBjb25zdCBoZWFkZXJWYWx1ZXMgPSBfKG1lc3NhZ2UucGF5bG9hZC5oZWFkZXJzKVxuICAgICAgICAgIC5maWx0ZXIoKGhlYWRlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGhlYWRlci5uYW1lID09PSBoZWFkZXJOYW1lO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnBsdWNrKCd2YWx1ZScpXG4gICAgICAgICAgLnZhbHVlKCk7XG4gIGlmIChoZWFkZXJWYWx1ZXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBoZWFkZXJWYWx1ZXNbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IGdldEVtYWlsQWRkcmVzc09iamVjdEZyb21TdHJpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICBjb25zdCByZXR1cm5PYmplY3QgPSB7XG4gICAgbmFtZTogdmFsdWUsXG4gICAgYWRkcmVzczogdmFsdWVcbiAgfTtcblxuICBpZiAodmFsdWUgJiYgdmFsdWUuaW5kZXhPZignPicpID4gMCkge1xuICAgIGNvbnN0IHZhbHVlQXJyYXkgPSB2YWx1ZS5zcGxpdCgnICcpO1xuICAgIHJldHVybk9iamVjdC5hZGRyZXNzID0gdmFsdWVBcnJheVt2YWx1ZUFycmF5Lmxlbmd0aCAtIDFdLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKTtcbiAgICByZXR1cm5PYmplY3QubmFtZSA9IHZhbHVlLnJlcGxhY2UoJyAnICsgdmFsdWVBcnJheVt2YWx1ZUFycmF5Lmxlbmd0aCAtIDFdLCAnJyk7XG4gIH1cblxuICByZXR1cm4gcmV0dXJuT2JqZWN0O1xufTtcblxuY29uc3QgY29udmVydEVtYWlsTGlzdFRvQXJyYXlPZkVtYWlsQWRkcmVzc09iamVjdHMgPSBmdW5jdGlvbihlbWFpbExpc3QpIHtcbiAgY29uc3QgZW1haWxBZGRyZXNzT2JqZWN0QXJyYXkgPSBbXTtcbiAgaWYgKGVtYWlsTGlzdCkge1xuICAgIGNvbnN0IGVtYWlsQXJyYXkgPSBlbWFpbExpc3Quc3BsaXQoJywnKTtcbiAgICBmb3IgKGxldCBlbWFpbEl0ZXIgPSAwOyBlbWFpbEl0ZXIgPCBlbWFpbEFycmF5Lmxlbmd0aDsgZW1haWxJdGVyKyspIHtcbiAgICAgIGVtYWlsQWRkcmVzc09iamVjdEFycmF5LnB1c2goZ2V0RW1haWxBZGRyZXNzT2JqZWN0RnJvbVN0cmluZyhlbWFpbEFycmF5W2VtYWlsSXRlcl0pKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZW1haWxBZGRyZXNzT2JqZWN0QXJyYXk7XG59O1xuXG5jb25zdCBoYXNMYWJlbCA9IGZ1bmN0aW9uKG1lc3NhZ2UsIGxhYmVsVmFsdWUpIHtcbiAgcmV0dXJuIG1lc3NhZ2UubGFiZWxJZHMgJiYgbWVzc2FnZS5sYWJlbElkcy5sZW5ndGggJiYgKG1lc3NhZ2UubGFiZWxJZHMuaW5kZXhPZihsYWJlbFZhbHVlKSA+PSAwKTtcbn07XG5cbmNvbnN0IGdldEZpcnN0U2NhbGFyUGFydCA9IGZ1bmN0aW9uKHBhcnRUb0NoZWNrKSB7XG4gIGxldCByZXR1cm5PYmplY3QgPSBwYXJ0VG9DaGVjaztcbiAgXy5mb3JFYWNoKHBhcnRUb0NoZWNrLmhlYWRlcnMsIChoZWFkZXIpID0+IHtcbiAgICBpZihoZWFkZXIubmFtZSA9PT0gJ0NvbnRlbnQtVHlwZScgJiYgaGVhZGVyLnZhbHVlLmluZGV4T2YoJ211bHRpcGFydC8nKSA+IC0xICYmIHBhcnRUb0NoZWNrLnBhcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybk9iamVjdCA9IGdldEZpcnN0U2NhbGFyUGFydChwYXJ0VG9DaGVjay5wYXJ0c1swXSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldHVybk9iamVjdDtcbn07XG5cbmNvbnN0IG1hcEVtYWlsRGF0YSA9IGZ1bmN0aW9uKGVtYWlsRGF0YSkge1xuICBjb25zdCBtYXBwZWREYXRhID0gW107XG5cbiAgZm9yIChsZXQgdXNlckl0ZXIgPSAwOyB1c2VySXRlciA8IGVtYWlsRGF0YS5sZW5ndGg7IHVzZXJJdGVyKyspIHtcbiAgICBjb25zdCBtYXBwZWRVc2VyID0gXy5hc3NpZ24oe30sIGVtYWlsRGF0YVt1c2VySXRlcl0sIHtcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgc3VjY2VzczogZW1haWxEYXRhW3VzZXJJdGVyXS5zdWNjZXNzLFxuICAgICAgZXJyb3JNZXNzYWdlOiBlbWFpbERhdGFbdXNlckl0ZXJdLmVycm9yTWVzc2FnZVxuICAgIH0pO1xuXG4gICAgaWYgKGVtYWlsRGF0YVt1c2VySXRlcl0uc3VjY2Vzcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbWFpbERhdGFbdXNlckl0ZXJdLmRhdGEubWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxFbWFpbE1lc3NhZ2UgPSBlbWFpbERhdGFbdXNlckl0ZXJdLmRhdGEubWVzc2FnZXNbaV07XG4gICAgICAgIGxldCBtYXBwZWRFbWFpbE1lc3NhZ2UgPSB7fTtcblxuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UgPSBvcmlnaW5hbEVtYWlsTWVzc2FnZTtcbiAgICAgICAgY29uc3QgbWVzc2FnZURhdGEgPSBvcmlnaW5hbEVtYWlsTWVzc2FnZS5tZXNzYWdlRGF0YTtcblxuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UubWVzc2FnZUlkID0gb3JpZ2luYWxFbWFpbE1lc3NhZ2UubWVzc2FnZUlkO1xuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuY29udmVyc2F0aW9uSWQgPSBtZXNzYWdlRGF0YS50aHJlYWRJZDtcbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmRhdGVUaW1lU2VudCA9IG1vbWVudChuZXcgRGF0ZShnZXRIZWFkZXJWYWx1ZShtZXNzYWdlRGF0YSwgJ0RhdGUnKSkpLnV0YygpLnRvRGF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IGRhdGVSZWNlaXZlZCA9IGdldEhlYWRlclZhbHVlKG1lc3NhZ2VEYXRhLCAnUmVjZWl2ZWQnKTtcbiAgICAgICAgaWYgKGRhdGVSZWNlaXZlZCkge1xuICAgICAgICAgIGNvbnN0IGRhdGVQYXJ0T2ZWYWx1ZSA9IGRhdGVSZWNlaXZlZC5zcGxpdCgnOycpWzFdO1xuICAgICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5kYXRlVGltZVJlY2VpdmVkID0gbW9tZW50KG5ldyBEYXRlKGRhdGVQYXJ0T2ZWYWx1ZSkpLnV0YygpLnRvRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmltcG9ydGFuY2UgPSAnTm9ybWFsJztcbiAgICAgICAgaWYgKGhhc0xhYmVsKG1lc3NhZ2VEYXRhLCAnSU1QT1JUQU5UJykpIHtcbiAgICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuaW1wb3J0YW5jZSA9ICdJbXBvcnRhbnQnO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmNhdGVnb3JpZXMgPSBtZXNzYWdlRGF0YS5sYWJlbElkcztcblxuICAgICAgICBpZiAoaGFzTGFiZWwobWVzc2FnZURhdGEsICdTRU5UJykpIHtcbiAgICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuZm9sZGVySWQgPSAnU2VudCBJdGVtcyc7XG4gICAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmZvbGRlck5hbWUgPSAnU2VudCBJdGVtcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmZvbGRlcklkID0gJ0luYm94JztcbiAgICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuZm9sZGVyTmFtZSA9ICdJbmJveCc7XG4gICAgICAgIH1cblxuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2Uuc3ViamVjdCA9IGdldEhlYWRlclZhbHVlKG1lc3NhZ2VEYXRhLCAnU3ViamVjdCcpO1xuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuYm9keVByZXZpZXcgPSBtZXNzYWdlRGF0YS5zbmlwcGV0O1xuXG4gICAgICAgIGlmIChtZXNzYWdlRGF0YS5wYXlsb2FkLnBhcnRzICYmIG1lc3NhZ2VEYXRhLnBheWxvYWQucGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHBhcnRUb0NoZWNrID0gZ2V0Rmlyc3RTY2FsYXJQYXJ0KG1lc3NhZ2VEYXRhLnBheWxvYWQucGFydHNbMF0pO1xuICAgICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5jb250ZW50VHlwZSA9IHBhcnRUb0NoZWNrLm1pbWVUeXBlO1xuICAgICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5ib2R5ID0gbmV3IEJ1ZmZlcihwYXJ0VG9DaGVjay5ib2R5LmRhdGEsICdiYXNlNjQnKS50b1N0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmlzRGVsaXZlcnlSZWNlaXB0UmVxdWVzdGVkID0gbnVsbDtcbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmlzUmVhZFJlY2VpcHRSZXF1ZXN0ZWQgPSBudWxsO1xuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuaGFzQXR0YWNobWVudHMgPSBudWxsO1xuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuaXNEcmFmdCA9IG51bGw7XG4gICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5pc1JlYWQgPSBoYXNMYWJlbChtZXNzYWdlRGF0YSwgJ1JFQUQnKTtcblxuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuZnJvbUFkZHJlc3MgPSBnZXRFbWFpbEFkZHJlc3NPYmplY3RGcm9tU3RyaW5nKGdldEhlYWRlclZhbHVlKG1lc3NhZ2VEYXRhLCAnRnJvbScpKS5hZGRyZXNzO1xuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuZnJvbU5hbWUgPSBnZXRFbWFpbEFkZHJlc3NPYmplY3RGcm9tU3RyaW5nKGdldEhlYWRlclZhbHVlKG1lc3NhZ2VEYXRhLCAnRnJvbScpKS5uYW1lO1xuXG4gICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS50b1JlY2lwaWVudHMgPVxuICAgICAgICAgIGNvbnZlcnRFbWFpbExpc3RUb0FycmF5T2ZFbWFpbEFkZHJlc3NPYmplY3RzKGdldEhlYWRlclZhbHVlKG1lc3NhZ2VEYXRhLCAnVG8nKSk7XG5cbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmNjUmVjaXBpZW50cyA9XG4gICAgICAgICAgY29udmVydEVtYWlsTGlzdFRvQXJyYXlPZkVtYWlsQWRkcmVzc09iamVjdHMoZ2V0SGVhZGVyVmFsdWUobWVzc2FnZURhdGEsICdDYycpKTtcblxuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuYmNjUmVjaXBpZW50cyA9XG4gICAgICAgICAgY29udmVydEVtYWlsTGlzdFRvQXJyYXlPZkVtYWlsQWRkcmVzc09iamVjdHMoZ2V0SGVhZGVyVmFsdWUobWVzc2FnZURhdGEsICdCY2MnKSk7XG5cbiAgICAgICAgZGVsZXRlIG1hcHBlZEVtYWlsTWVzc2FnZS5tZXNzYWdlRGF0YTtcbiAgICAgICAgbWFwcGVkVXNlci5kYXRhLnB1c2gobWFwcGVkRW1haWxNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWFwcGVkRGF0YS5wdXNoKG1hcHBlZFVzZXIpO1xuICB9XG5cbiAgcmV0dXJuIG1hcHBlZERhdGE7XG59O1xuXG5jb25zdCBnZXRFbWFpbERhdGEgPSBmdW5jdGlvbihlbWFpbHMsXG4gICAgZmlsdGVyU3RhcnREYXRlLFxuICAgIGZpbHRlckVuZERhdGUsXG4gICAgYWRkaXRpb25hbEZpZWxkcyxcbiAgICBjbGllbnRJZCxcbiAgICBzZXJ2aWNlRW1haWwsXG4gICAgcHJpdmF0ZUtleSxcbiAgICBhcGlWZXJzaW9uXG4gICkge1xuICBjb25zdCBlbWFpbFJlc3VsdHMgPSBbXTtcbiAgY29uc3QgZW1haWxSZXN1bHRQcm9taXNlcyA9IFtdO1xuXG4gIGZvciAobGV0IGVtYWlsSXRlciA9IDA7IGVtYWlsSXRlciA8IGVtYWlscy5sZW5ndGg7IGVtYWlsSXRlcisrKSB7XG4gICAgLy9pbml0aWFsaXplIGVtYWlsUmVzdWx0cyB3aXRoIHRoZSBlbWFpbCBvYmplY3QgcGFzc2VkIGluXG4gICAgLy9hbmQgYWRkIGZpbHRlciBkYXRlc1xuICAgIGVtYWlsUmVzdWx0c1tlbWFpbEl0ZXJdID0gXy5hc3NpZ24oe30sIGVtYWlsc1tlbWFpbEl0ZXJdLCB7XG4gICAgICBmaWx0ZXJTdGFydERhdGU6IGZpbHRlclN0YXJ0RGF0ZSxcbiAgICAgIGZpbHRlckVuZERhdGU6IGZpbHRlckVuZERhdGVcbiAgICB9KTtcblxuICAgIGVtYWlsUmVzdWx0UHJvbWlzZXMucHVzaChcbiAgICAgIGdldFVzZXJFbWFpbHMoXG4gICAgICAgIGNsaWVudElkLFxuICAgICAgICBzZXJ2aWNlRW1haWwsXG4gICAgICAgIGVtYWlsc1tlbWFpbEl0ZXJdLmVtYWlsQWZ0ZXJNYXBwaW5nLFxuICAgICAgICBwcml2YXRlS2V5LFxuICAgICAgICBhcGlWZXJzaW9uLFxuICAgICAgICBmaWx0ZXJTdGFydERhdGUsXG4gICAgICAgIGZpbHRlckVuZERhdGUsXG4gICAgICAgIGFkZGl0aW9uYWxGaWVsZHMsXG4gICAgICAgIGVtYWlsUmVzdWx0c1tlbWFpbEl0ZXJdXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLmFsbChlbWFpbFJlc3VsdFByb21pc2VzKVxuICAudGhlbigoKSA9PiB7XG4gICAgcmV0dXJuIGVtYWlsUmVzdWx0cztcbiAgfSk7XG59O1xuXG5Hb29nbGVBZGFwdGVyLnByb3RvdHlwZS5nZXRCYXRjaERhdGEgPSBmdW5jdGlvbihlbWFpbHMsIGZpbHRlclN0YXJ0RGF0ZSwgZmlsdGVyRW5kRGF0ZSwgYWRkaXRpb25hbEZpZWxkcykge1xuICBjb25zdCBjbGllbnRJZCA9IHRoaXMuX2NvbmZpZy5jcmVkZW50aWFscy5jbGllbnRJZDtcbiAgY29uc3QgY2xpZW50RW1haWwgPSB0aGlzLl9jb25maWcuY3JlZGVudGlhbHMuZW1haWw7XG4gIGNvbnN0IHNlcnZpY2VFbWFpbCA9IHRoaXMuX2NvbmZpZy5jcmVkZW50aWFscy5zZXJ2aWNlRW1haWw7XG4gIGNvbnN0IHByaXZhdGVLZXkgPSB0aGlzLl9jb25maWcuY3JlZGVudGlhbHMuY2VydGlmaWNhdGU7XG4gIGNvbnN0IGFwaVZlcnNpb24gPSB0aGlzLl9jb25maWcub3B0aW9ucy5hcGlWZXJzaW9uO1xuXG4gIGNvbnN0IGRhdGFBZGFwdGVyUnVuU3RhdHMgPSB7XG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgICBydW5EYXRlOiBtb21lbnQoKS51dGMoKS50b0RhdGUoKSxcbiAgICBmaWx0ZXJTdGFydERhdGU6IGZpbHRlclN0YXJ0RGF0ZSxcbiAgICBmaWx0ZXJFbmREYXRlOiBmaWx0ZXJFbmREYXRlLFxuICAgIGVtYWlsczogZW1haWxzXG4gIH07XG5cbiAgLy9maXJzdCB0cnkgdG8gZ2V0IHRva2VuIGZvciB0aGUgYWRtaW4gLSBpZiB0aGF0IGZhaWxzLCB0aGVuIGFsbCB3aWxsIGZhaWxcbiAgcmV0dXJuIGdldEFjY2Vzc1Rva2VuKGNsaWVudElkLCBzZXJ2aWNlRW1haWwsIGNsaWVudEVtYWlsLCBwcml2YXRlS2V5KVxuICAudGhlbigoKSA9PiB7XG4gICAgcmV0dXJuIGdldEVtYWlsRGF0YShcbiAgICAgIGVtYWlscyxcbiAgICAgIGZpbHRlclN0YXJ0RGF0ZSxcbiAgICAgIGZpbHRlckVuZERhdGUsXG4gICAgICBhZGRpdGlvbmFsRmllbGRzLFxuICAgICAgY2xpZW50SWQsXG4gICAgICBzZXJ2aWNlRW1haWwsXG4gICAgICBwcml2YXRlS2V5LFxuICAgICAgYXBpVmVyc2lvblxuICAgICk7XG4gIH0pXG4gIC50aGVuKChlbWFpbERhdGEpID0+IHtcbiAgICByZXR1cm4gbWFwRW1haWxEYXRhKGVtYWlsRGF0YSk7XG4gIH0pXG4gIC50aGVuKChtYXBwZWRFbWFpbERhdGEpID0+IHtcbiAgICBkYXRhQWRhcHRlclJ1blN0YXRzLnJlc3VsdHMgPSBtYXBwZWRFbWFpbERhdGE7XG4gICAgcmV0dXJuIGRhdGFBZGFwdGVyUnVuU3RhdHM7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgZGF0YUFkYXB0ZXJSdW5TdGF0cy5zdWNjZXNzID0gZmFsc2U7XG4gICAgZGF0YUFkYXB0ZXJSdW5TdGF0cy5lcnJvck1lc3NhZ2UgPSBlcnI7XG4gICAgY29uc29sZS5sb2coJ0dvb2dsZU1haWwgR2V0QmF0Y2hEYXRhIEVycm9yOiAnICsgSlNPTi5zdHJpbmdpZnkoZXJyKSk7XG4gICAgcmV0dXJuIGRhdGFBZGFwdGVyUnVuU3RhdHM7XG4gIH0pO1xufTtcblxuR29vZ2xlQWRhcHRlci5wcm90b3R5cGUucnVuQ29ubmVjdGlvblRlc3QgPSBmdW5jdGlvbihjb25uZWN0aW9uRGF0YSkge1xuICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gIF90aGlzLl9jb25maWcgPSBuZXcgR29vZ2xlTWFpbC5Db25maWd1cmF0aW9uKGNvbm5lY3Rpb25EYXRhLmNyZWRlbnRpYWxzKTtcbiAgY29uc3QgZmlsdGVyU3RhcnREYXRlID0gbW9tZW50KCkudXRjKCkuc3RhcnRPZignZGF5JykuYWRkKC0xLCAnZGF5cycpLnRvRGF0ZSgpO1xuICBjb25zdCBmaWx0ZXJFbmREYXRlID0gbW9tZW50KCkudXRjKCkuc3RhcnRPZignZGF5JykudG9EYXRlKCk7XG4gIHJldHVybiBfdGhpcy5nZXRCYXRjaERhdGEoW3tlbWFpbEFmdGVyTWFwcGluZzogX3RoaXMuX2NvbmZpZy5jcmVkZW50aWFscy5lbWFpbH1dLCBmaWx0ZXJTdGFydERhdGUsIGZpbHRlckVuZERhdGUsICcnKVxuICAudGhlbigoZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhLnN1Y2Nlc3MgJiYgZGF0YS5yZXN1bHRzWzBdKSB7XG4gICAgICAvL3RvIHNlZSBpZiBpdCByZWFsbHkgd29ya2VkLCB3ZSBuZWVkIHRvIHBhc3MgaW4gdGhlIGZpcnN0IHJlc3VsdFxuICAgICAgcmV0dXJuIGRhdGEucmVzdWx0c1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9KTtcbn07XG5cbkdvb2dsZUFkYXB0ZXIucHJvdG90eXBlLnJ1bk1lc3NhZ2VUZXN0ID0gZnVuY3Rpb24oY29ubmVjdGlvbkRhdGEpIHtcbiAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICBfdGhpcy5fY29uZmlnID0gbmV3IEdvb2dsZU1haWwuQ29uZmlndXJhdGlvbihjb25uZWN0aW9uRGF0YS5jcmVkZW50aWFscyk7XG4gIGNvbnN0IGZpbHRlclN0YXJ0RGF0ZSA9IG1vbWVudCgpLnV0YygpLnN0YXJ0T2YoJ2RheScpLmFkZCgtMSwgJ2RheXMnKS50b0RhdGUoKTtcbiAgY29uc3QgZmlsdGVyRW5kRGF0ZSA9IG1vbWVudCgpLnV0YygpLnN0YXJ0T2YoJ2RheScpLmFkZCgxLCAnZGF5cycpLnRvRGF0ZSgpO1xuICByZXR1cm4gX3RoaXNcbiAgLmdldEJhdGNoRGF0YShbX3RoaXMuX2NvbmZpZy5jcmVkZW50aWFscy5lbWFpbF0sIGZpbHRlclN0YXJ0RGF0ZSwgZmlsdGVyRW5kRGF0ZSwgJ1N1YmplY3QsQm9keVByZXZpZXcsQm9keScpXG4gIC50aGVuKChkYXRhKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3J1bk1lc3NhZ2VUZXN0IHdvcmtlZCcpO1xuICAgIGNvbnNvbGUubG9nKGRhdGEucmVzdWx0c1swXSk7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3J1bk1lc3NhZ2VUZXN0IEVycm9yOiAnICsgSlNPTi5zdHJpbmdpZnkoZXJyKSk7XG4gIH0pO1xufTtcbiJdfQ==
//# sourceMappingURL=../../clAdapters/google-mail/index.js.map