'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var util = require('util'),
    BaseAdapter = require('./base/Adapter'),
    Fields = require('./fields');

/**
 * CLMockAdapter
 *
 * `credentials` should always be:
 * ```
 * {
 *   appId: '123456',
 *   apiKey: '999999'
 * }
 * ```
 * @class
 * @return {ClMockAdapter}
 */
var CLMockAdapter = module.exports = function CLMockAdapter() {
  BaseAdapter.call(this);

  /**
   * @override
   */
  Object.defineProperty(this, 'extEntityKey', {
    get: function get() {
      return this.credentials.appId;
    }
  });
};

util.inherits(CLMockAdapter, BaseAdapter);

/**
 * @override
 */
CLMockAdapter.prototype.init = function () {
  var _this = this;
  var p = new _Promise(function (resolve, reject) {
    if (_this.credentials.appId === '123456' && _this.credentials.apiKey === '999999') {
      resolve(_this);
    } else {
      reject('Wrong credentials, please use appId "123456" and apiKey "999999"');
    }
  });

  return p;
};

/**
 * Reflects given field in this `result` format:
 * ```
 * {
 *   {fieldType}ExtId: rand # between 1-50,
 *   {extId}: Float (0-1.0)
 * }
 * ```
 *
 * For example, for a "Fields.Types.USER" field w/extId 'user#utilizationRate', would return:
 * ```
 * {
 *   userExtId: 50,
 *   'user#utilizationRate': 0.55
 * }
 * ```
 *
 * Returns between 0-50 results in pages of `query.limit` (default 5)
 * @override
 */
CLMockAdapter.prototype.getFieldData = function (field, query) {
  query = query || {};
  var typeName;
  console.log(field);
  switch (field.type) {
    case Fields.Types.USER:
      typeName = 'user';
      break;
    case Fields.Types.GROUP:
      typeName = 'group';
      break;
    default:
      typeName = 'unknown';
      break;
  }

  var skip = query.skip || 0;
  if (!skip) {
    this.numResultsToGenerate = Math.floor(Math.random() * 50);
    console.log('CLMockAdapter: Generating %d results', this.numResultsToGenerate);
  }

  var result = {
    count: this.numResultsToGenerate,
    results: []
  };

  var createResult = function createResult() {
    var r = {};
    r[typeName + 'ExtId'] = Math.floor(Math.random() * 3) + 1;
    r[field.extId] = Math.random();
    return r;
  };

  var pageSize = query.limit || 5;
  var resultsToReturn = Math.min(pageSize, this.numResultsToGenerate - skip);
  for (var i = 0; i < resultsToReturn; i++) {
    result.results.push(createResult());
  }

  return new _Promise(function (resolve /*,reject*/) {
    resolve(result);
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsQWRhcHRlcnMvY2xNb2NrQWRhcHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7QUFFYixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3hCLFdBQVcsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7SUFDdkMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FBZS9CLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxhQUFhLEdBQUc7QUFDNUQsYUFBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7QUFLdkIsUUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO0FBQzFDLE9BQUcsRUFBRSxlQUFXO0FBQ2QsYUFBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztLQUMvQjtHQUNGLENBQUMsQ0FBQztDQUNKLENBQUM7O0FBRUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7Ozs7O0FBSzFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFlBQVc7QUFDeEMsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLE1BQUksQ0FBQyxHQUFHLGFBQVksVUFBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQzVDLFFBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFBRTtBQUNqRixhQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDaEIsTUFBTTtBQUNMLFlBQU0sQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO0tBQzVFO0dBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQU8sQ0FBQyxDQUFDO0NBQ1YsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCRixhQUFhLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxVQUFTLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDNUQsT0FBSyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7QUFDcEIsTUFBSSxRQUFRLENBQUM7QUFDYixTQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25CLFVBQVEsS0FBSyxDQUFDLElBQUk7QUFDaEIsU0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUk7QUFDcEIsY0FBUSxHQUFHLE1BQU0sQ0FBQztBQUNsQixZQUFNO0FBQUEsQUFDUixTQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSztBQUNyQixjQUFRLEdBQUcsT0FBTyxDQUFDO0FBQ25CLFlBQU07QUFBQSxBQUNSO0FBQ0UsY0FBUSxHQUFHLFNBQVMsQ0FBQztBQUNyQixZQUFNO0FBQUEsR0FDVDs7QUFFRCxNQUFJLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztBQUMzQixNQUFJLENBQUMsSUFBSSxFQUFFO0FBQ1QsUUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzNELFdBQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7R0FDaEY7O0FBRUQsTUFBSSxNQUFNLEdBQUc7QUFDWCxTQUFLLEVBQUUsSUFBSSxDQUFDLG9CQUFvQjtBQUNoQyxXQUFPLEVBQUUsRUFBRTtHQUNaLENBQUM7O0FBRUYsTUFBSSxZQUFZLEdBQUcsU0FBZixZQUFZLEdBQWM7QUFDNUIsUUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ1gsS0FBQyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUQsS0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDL0IsV0FBTyxDQUFDLENBQUM7R0FDVixDQUFDOztBQUVGLE1BQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO0FBQ2hDLE1BQUksZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMzRSxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3hDLFVBQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7R0FDckM7O0FBRUQsU0FBTyxhQUFZLFVBQVMsT0FBTyxjQUFlO0FBQ2hELFdBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNqQixDQUFDLENBQUM7Q0FDSixDQUFDIiwiZmlsZSI6ImNsQWRhcHRlcnMvY2xNb2NrQWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG4gIEJhc2VBZGFwdGVyID0gcmVxdWlyZSgnLi9iYXNlL0FkYXB0ZXInKSxcbiAgRmllbGRzID0gcmVxdWlyZSgnLi9maWVsZHMnKTtcblxuLyoqXG4gKiBDTE1vY2tBZGFwdGVyXG4gKlxuICogYGNyZWRlbnRpYWxzYCBzaG91bGQgYWx3YXlzIGJlOlxuICogYGBgXG4gKiB7XG4gKiAgIGFwcElkOiAnMTIzNDU2JyxcbiAqICAgYXBpS2V5OiAnOTk5OTk5J1xuICogfVxuICogYGBgXG4gKiBAY2xhc3NcbiAqIEByZXR1cm4ge0NsTW9ja0FkYXB0ZXJ9XG4gKi9cbnZhciBDTE1vY2tBZGFwdGVyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBDTE1vY2tBZGFwdGVyKCkge1xuICBCYXNlQWRhcHRlci5jYWxsKHRoaXMpO1xuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZXh0RW50aXR5S2V5Jywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVkZW50aWFscy5hcHBJZDtcbiAgICB9XG4gIH0pO1xufTtcblxudXRpbC5pbmhlcml0cyhDTE1vY2tBZGFwdGVyLCBCYXNlQWRhcHRlcik7XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkNMTW9ja0FkYXB0ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcbiAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoX3RoaXMuY3JlZGVudGlhbHMuYXBwSWQgPT09ICcxMjM0NTYnICYmIF90aGlzLmNyZWRlbnRpYWxzLmFwaUtleSA9PT0gJzk5OTk5OScpIHtcbiAgICAgIHJlc29sdmUoX3RoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWplY3QoJ1dyb25nIGNyZWRlbnRpYWxzLCBwbGVhc2UgdXNlIGFwcElkIFwiMTIzNDU2XCIgYW5kIGFwaUtleSBcIjk5OTk5OVwiJyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcDtcbn07XG5cbi8qKlxuICogUmVmbGVjdHMgZ2l2ZW4gZmllbGQgaW4gdGhpcyBgcmVzdWx0YCBmb3JtYXQ6XG4gKiBgYGBcbiAqIHtcbiAqICAge2ZpZWxkVHlwZX1FeHRJZDogcmFuZCAjIGJldHdlZW4gMS01MCxcbiAqICAge2V4dElkfTogRmxvYXQgKDAtMS4wKVxuICogfVxuICogYGBgXG4gKlxuICogRm9yIGV4YW1wbGUsIGZvciBhIFwiRmllbGRzLlR5cGVzLlVTRVJcIiBmaWVsZCB3L2V4dElkICd1c2VyI3V0aWxpemF0aW9uUmF0ZScsIHdvdWxkIHJldHVybjpcbiAqIGBgYFxuICoge1xuICogICB1c2VyRXh0SWQ6IDUwLFxuICogICAndXNlciN1dGlsaXphdGlvblJhdGUnOiAwLjU1XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBSZXR1cm5zIGJldHdlZW4gMC01MCByZXN1bHRzIGluIHBhZ2VzIG9mIGBxdWVyeS5saW1pdGAgKGRlZmF1bHQgNSlcbiAqIEBvdmVycmlkZVxuICovXG5DTE1vY2tBZGFwdGVyLnByb3RvdHlwZS5nZXRGaWVsZERhdGEgPSBmdW5jdGlvbihmaWVsZCwgcXVlcnkpIHtcbiAgcXVlcnkgPSBxdWVyeSB8fCB7fTtcbiAgdmFyIHR5cGVOYW1lO1xuICBjb25zb2xlLmxvZyhmaWVsZCk7XG4gIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgIGNhc2UgRmllbGRzLlR5cGVzLlVTRVI6XG4gICAgICB0eXBlTmFtZSA9ICd1c2VyJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgRmllbGRzLlR5cGVzLkdST1VQOlxuICAgICAgdHlwZU5hbWUgPSAnZ3JvdXAnO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHR5cGVOYW1lID0gJ3Vua25vd24nO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB2YXIgc2tpcCA9IHF1ZXJ5LnNraXAgfHwgMDtcbiAgaWYgKCFza2lwKSB7XG4gICAgdGhpcy5udW1SZXN1bHRzVG9HZW5lcmF0ZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwKTtcbiAgICBjb25zb2xlLmxvZygnQ0xNb2NrQWRhcHRlcjogR2VuZXJhdGluZyAlZCByZXN1bHRzJywgdGhpcy5udW1SZXN1bHRzVG9HZW5lcmF0ZSk7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGNvdW50OiB0aGlzLm51bVJlc3VsdHNUb0dlbmVyYXRlLFxuICAgIHJlc3VsdHM6IFtdXG4gIH07XG5cbiAgdmFyIGNyZWF0ZVJlc3VsdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByID0ge307XG4gICAgclt0eXBlTmFtZSArICdFeHRJZCddID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMykgKyAxO1xuICAgIHJbZmllbGQuZXh0SWRdID0gTWF0aC5yYW5kb20oKTtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICB2YXIgcGFnZVNpemUgPSBxdWVyeS5saW1pdCB8fCA1O1xuICB2YXIgcmVzdWx0c1RvUmV0dXJuID0gTWF0aC5taW4ocGFnZVNpemUsIHRoaXMubnVtUmVzdWx0c1RvR2VuZXJhdGUgLSBza2lwKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzVG9SZXR1cm47IGkrKykge1xuICAgIHJlc3VsdC5yZXN1bHRzLnB1c2goY3JlYXRlUmVzdWx0KCkpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUgLyoscmVqZWN0Ki8gKSB7XG4gICAgcmVzb2x2ZShyZXN1bHQpO1xuICB9KTtcbn07XG4iXX0=
//# sourceMappingURL=../clAdapters/clMockAdapter.js.map