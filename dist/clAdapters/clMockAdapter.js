'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var util = require('util'),
    BaseAdapter = require('./base/Adapter'),
    Fields = require('./fields');

/**
 * CLMockAdapter
 *
 * `credentials` should always be:
 * ```
 * {
 *   appId: '123456',
 *   apiKey: '999999'
 * }
 * ```
 * @class
 * @return {ClMockAdapter}
 */
var CLMockAdapter = module.exports = function CLMockAdapter() {
  BaseAdapter.call(this);

  /**
   * @override
   */
  Object.defineProperty(this, 'extEntityKey', {
    get: function get() {
      return this.credentials.appId;
    }
  });
};

util.inherits(CLMockAdapter, BaseAdapter);

/**
 * @override
 */
CLMockAdapter.prototype.init = function () {
  var _this = this;
  var p = new _Promise(function (resolve, reject) {
    if (_this.credentials.appId === '123456' && _this.credentials.apiKey === '999999') {
      resolve(_this);
    } else {
      reject('Wrong credentials, please use appId "123456" and apiKey "999999"');
    }
  });

  return p;
};

/**
 * Reflects given field in this `result` format:
 * ```
 * {
 *   {fieldType}ExtId: rand # between 1-50,
 *   {extId}: Float (0-1.0)
 * }
 * ```
 *
 * For example, for a "Fields.Types.USER" field w/extId 'user#utilizationRate', would return:
 * ```
 * {
 *   userExtId: 50,
 *   'user#utilizationRate': 0.55
 * }
 * ```
 *
 * Returns between 0-50 results in pages of `query.limit` (default 5)
 * @override
 */
CLMockAdapter.prototype.getFieldData = function (field, query) {
  query = query || {};
  var typeName;
  console.log(field);
  switch (field.type) {
    case Fields.Types.USER:
      typeName = 'user';
      break;
    case Fields.Types.GROUP:
      typeName = 'group';
      break;
    default:
      typeName = 'unknown';
      break;
  }

  var skip = query.skip || 0;
  if (!skip) {
    this.numResultsToGenerate = Math.floor(Math.random() * 50);
    console.log('CLMockAdapter: Generating %d results', this.numResultsToGenerate);
  }

  var result = {
    count: this.numResultsToGenerate,
    results: []
  };

  var createResult = function createResult() {
    var r = {};
    r[typeName + 'ExtId'] = Math.floor(Math.random() * 3) + 1;
    r[field.extId] = Math.random();
    return r;
  };

  var pageSize = query.limit || 5;
  var resultsToReturn = Math.min(pageSize, this.numResultsToGenerate - skip);
  for (var i = 0; i < resultsToReturn; i++) {
    result.results.push(createResult());
  }

  return new _Promise(function (resolve /*,reject*/) {
    resolve(result);
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsQWRhcHRlcnNcXGNsTW9ja0FkYXB0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O0FBRWIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUN4QixXQUFXLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0lBQ3ZDLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQWUvQixJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsYUFBYSxHQUFHO0FBQzVELGFBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7O0FBS3ZCLFFBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtBQUMxQyxPQUFHLEVBQUUsZUFBVztBQUNkLGFBQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7S0FDL0I7R0FDRixDQUFDLENBQUM7Q0FDSixDQUFDOztBQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDOzs7OztBQUsxQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxZQUFXO0FBQ3hDLE1BQUksS0FBSyxHQUFHLElBQUksQ0FBQztBQUNqQixNQUFJLENBQUMsR0FBRyxhQUFZLFVBQVMsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUM1QyxRQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFDakYsYUFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2hCLE1BQU07QUFDTCxZQUFNLENBQUMsa0VBQWtFLENBQUMsQ0FBQztLQUM1RTtHQUNGLENBQUMsQ0FBQzs7QUFFSCxTQUFPLENBQUMsQ0FBQztDQUNWLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkYsYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsVUFBUyxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQzVELE9BQUssR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO0FBQ3BCLE1BQUksUUFBUSxDQUFDO0FBQ2IsU0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQixVQUFRLEtBQUssQ0FBQyxJQUFJO0FBQ2hCLFNBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJO0FBQ3BCLGNBQVEsR0FBRyxNQUFNLENBQUM7QUFDbEIsWUFBTTtBQUFBLEFBQ1IsU0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUs7QUFDckIsY0FBUSxHQUFHLE9BQU8sQ0FBQztBQUNuQixZQUFNO0FBQUEsQUFDUjtBQUNFLGNBQVEsR0FBRyxTQUFTLENBQUM7QUFDckIsWUFBTTtBQUFBLEdBQ1Q7O0FBRUQsTUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7QUFDM0IsTUFBSSxDQUFDLElBQUksRUFBRTtBQUNULFFBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUMzRCxXQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0dBQ2hGOztBQUVELE1BQUksTUFBTSxHQUFHO0FBQ1gsU0FBSyxFQUFFLElBQUksQ0FBQyxvQkFBb0I7QUFDaEMsV0FBTyxFQUFFLEVBQUU7R0FDWixDQUFDOztBQUVGLE1BQUksWUFBWSxHQUFHLFNBQWYsWUFBWSxHQUFjO0FBQzVCLFFBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNYLEtBQUMsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFELEtBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQy9CLFdBQU8sQ0FBQyxDQUFDO0dBQ1YsQ0FBQzs7QUFFRixNQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztBQUNoQyxNQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDM0UsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGVBQWUsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN4QyxVQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0dBQ3JDOztBQUVELFNBQU8sYUFBWSxVQUFTLE9BQU8sY0FBZTtBQUNoRCxXQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDakIsQ0FBQyxDQUFDO0NBQ0osQ0FBQyIsImZpbGUiOiJjbEFkYXB0ZXJzXFxjbE1vY2tBZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXHJcbiAgQmFzZUFkYXB0ZXIgPSByZXF1aXJlKCcuL2Jhc2UvQWRhcHRlcicpLFxyXG4gIEZpZWxkcyA9IHJlcXVpcmUoJy4vZmllbGRzJyk7XHJcblxyXG4vKipcclxuICogQ0xNb2NrQWRhcHRlclxyXG4gKlxyXG4gKiBgY3JlZGVudGlhbHNgIHNob3VsZCBhbHdheXMgYmU6XHJcbiAqIGBgYFxyXG4gKiB7XHJcbiAqICAgYXBwSWQ6ICcxMjM0NTYnLFxyXG4gKiAgIGFwaUtleTogJzk5OTk5OSdcclxuICogfVxyXG4gKiBgYGBcclxuICogQGNsYXNzXHJcbiAqIEByZXR1cm4ge0NsTW9ja0FkYXB0ZXJ9XHJcbiAqL1xyXG52YXIgQ0xNb2NrQWRhcHRlciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ0xNb2NrQWRhcHRlcigpIHtcclxuICBCYXNlQWRhcHRlci5jYWxsKHRoaXMpO1xyXG5cclxuICAvKipcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKi9cclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2V4dEVudGl0eUtleScsIHtcclxuICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNyZWRlbnRpYWxzLmFwcElkO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxudXRpbC5pbmhlcml0cyhDTE1vY2tBZGFwdGVyLCBCYXNlQWRhcHRlcik7XHJcblxyXG4vKipcclxuICogQG92ZXJyaWRlXHJcbiAqL1xyXG5DTE1vY2tBZGFwdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgaWYgKF90aGlzLmNyZWRlbnRpYWxzLmFwcElkID09PSAnMTIzNDU2JyAmJiBfdGhpcy5jcmVkZW50aWFscy5hcGlLZXkgPT09ICc5OTk5OTknKSB7XHJcbiAgICAgIHJlc29sdmUoX3RoaXMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVqZWN0KCdXcm9uZyBjcmVkZW50aWFscywgcGxlYXNlIHVzZSBhcHBJZCBcIjEyMzQ1NlwiIGFuZCBhcGlLZXkgXCI5OTk5OTlcIicpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWZsZWN0cyBnaXZlbiBmaWVsZCBpbiB0aGlzIGByZXN1bHRgIGZvcm1hdDpcclxuICogYGBgXHJcbiAqIHtcclxuICogICB7ZmllbGRUeXBlfUV4dElkOiByYW5kICMgYmV0d2VlbiAxLTUwLFxyXG4gKiAgIHtleHRJZH06IEZsb2F0ICgwLTEuMClcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogRm9yIGV4YW1wbGUsIGZvciBhIFwiRmllbGRzLlR5cGVzLlVTRVJcIiBmaWVsZCB3L2V4dElkICd1c2VyI3V0aWxpemF0aW9uUmF0ZScsIHdvdWxkIHJldHVybjpcclxuICogYGBgXHJcbiAqIHtcclxuICogICB1c2VyRXh0SWQ6IDUwLFxyXG4gKiAgICd1c2VyI3V0aWxpemF0aW9uUmF0ZSc6IDAuNTVcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogUmV0dXJucyBiZXR3ZWVuIDAtNTAgcmVzdWx0cyBpbiBwYWdlcyBvZiBgcXVlcnkubGltaXRgIChkZWZhdWx0IDUpXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuQ0xNb2NrQWRhcHRlci5wcm90b3R5cGUuZ2V0RmllbGREYXRhID0gZnVuY3Rpb24oZmllbGQsIHF1ZXJ5KSB7XHJcbiAgcXVlcnkgPSBxdWVyeSB8fCB7fTtcclxuICB2YXIgdHlwZU5hbWU7XHJcbiAgY29uc29sZS5sb2coZmllbGQpO1xyXG4gIHN3aXRjaCAoZmllbGQudHlwZSkge1xyXG4gICAgY2FzZSBGaWVsZHMuVHlwZXMuVVNFUjpcclxuICAgICAgdHlwZU5hbWUgPSAndXNlcic7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBGaWVsZHMuVHlwZXMuR1JPVVA6XHJcbiAgICAgIHR5cGVOYW1lID0gJ2dyb3VwJztcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0eXBlTmFtZSA9ICd1bmtub3duJztcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG5cclxuICB2YXIgc2tpcCA9IHF1ZXJ5LnNraXAgfHwgMDtcclxuICBpZiAoIXNraXApIHtcclxuICAgIHRoaXMubnVtUmVzdWx0c1RvR2VuZXJhdGUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MCk7XHJcbiAgICBjb25zb2xlLmxvZygnQ0xNb2NrQWRhcHRlcjogR2VuZXJhdGluZyAlZCByZXN1bHRzJywgdGhpcy5udW1SZXN1bHRzVG9HZW5lcmF0ZSk7XHJcbiAgfVxyXG5cclxuICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgY291bnQ6IHRoaXMubnVtUmVzdWx0c1RvR2VuZXJhdGUsXHJcbiAgICByZXN1bHRzOiBbXVxyXG4gIH07XHJcblxyXG4gIHZhciBjcmVhdGVSZXN1bHQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciByID0ge307XHJcbiAgICByW3R5cGVOYW1lICsgJ0V4dElkJ10gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKSArIDE7XHJcbiAgICByW2ZpZWxkLmV4dElkXSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICByZXR1cm4gcjtcclxuICB9O1xyXG5cclxuICB2YXIgcGFnZVNpemUgPSBxdWVyeS5saW1pdCB8fCA1O1xyXG4gIHZhciByZXN1bHRzVG9SZXR1cm4gPSBNYXRoLm1pbihwYWdlU2l6ZSwgdGhpcy5udW1SZXN1bHRzVG9HZW5lcmF0ZSAtIHNraXApO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0c1RvUmV0dXJuOyBpKyspIHtcclxuICAgIHJlc3VsdC5yZXN1bHRzLnB1c2goY3JlYXRlUmVzdWx0KCkpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUgLyoscmVqZWN0Ki8gKSB7XHJcbiAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgfSk7XHJcbn07XHJcbiJdfQ==
//# sourceMappingURL=clMockAdapter.js.map
