'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var util = require('util');
var BaseAdapter = require('./base/Adapter');
var Fields = require('./fields');

/**
 * CLMockAdapter
 *
 * `credentials` should always be:
 * ```
 * {
 *   appId: '123456',
 *   apiKey: '999999'
 * }
 * ```
 * @class
 * @return {ClMockAdapter}
 */
var CLMockAdapter = module.exports = function CLMockAdapter() {
  BaseAdapter.call(this);

  /**
   * @override
   */
  Object.defineProperty(this, 'extEntityKey', {
    get: function get() {
      return this.credentials.appId;
    }
  });
};

util.inherits(CLMockAdapter, BaseAdapter);

/**
 * @override
 */
CLMockAdapter.prototype.init = function () {
  var _this = this;
  var p = new _Promise(function (resolve, reject) {
    if (_this.credentials.appId === '123456' && _this.credentials.apiKey === '999999') {
      resolve(_this);
    } else {
      reject('Wrong credentials, please use appId "123456" and apiKey "999999"');
    }
  });

  return p;
};

/**
 * Reflects given field in this `result` format:
 * ```
 * {
 *   {fieldType}ExtId: rand # between 1-50,
 *   {extId}: Float (0-1.0)
 * }
 * ```
 *
 * For example, for a "Fields.Types.USER" field w/extId 'user#utilizationRate', would return:
 * ```
 * {
 *   userExtId: 50,
 *   'user#utilizationRate': 0.55
 * }
 * ```
 *
 * Returns between 0-50 results in pages of `query.limit` (default 5)
 * @override
 */
CLMockAdapter.prototype.getFieldData = function (field, query) {
  query = query || {};
  var typeName;
  console.log(field);
  switch (field.type) {
    case Fields.Types.USER:
      typeName = 'user';
      break;
    case Fields.Types.GROUP:
      typeName = 'group';
      break;
    default:
      typeName = 'unknown';
      break;
  }

  var skip = query.skip || 0;
  if (!skip) {
    this.numResultsToGenerate = Math.floor(Math.random() * 50);
    console.log('CLMockAdapter: Generating %d results', this.numResultsToGenerate);
  }

  var result = {
    count: this.numResultsToGenerate,
    results: []
  };

  var createResult = function createResult() {
    var r = {};
    r[typeName + 'ExtId'] = Math.floor(Math.random() * 3) + 1;
    r[field.extId] = Math.random();
    return r;
  };

  var pageSize = query.limit || 5;
  var resultsToReturn = Math.min(pageSize, this.numResultsToGenerate - skip);
  for (var i = 0; i < resultsToReturn; i++) {
    result.results.push(createResult());
  }

  return new _Promise(function (resolve /*,reject*/) {
    resolve(result);
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsQWRhcHRlcnMvY2xNb2NrQWRhcHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzVDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FBZWpDLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxhQUFhLEdBQUc7QUFDNUQsYUFBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7QUFLdkIsUUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO0FBQzFDLE9BQUcsRUFBRSxlQUFXO0FBQ2QsYUFBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztLQUMvQjtHQUNGLENBQUMsQ0FBQztDQUNKLENBQUM7O0FBRUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7Ozs7O0FBSzFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFlBQVc7QUFDeEMsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLE1BQUksQ0FBQyxHQUFHLGFBQVksVUFBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQzVDLFFBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFBRTtBQUNqRixhQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDaEIsTUFBTTtBQUNMLFlBQU0sQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO0tBQzVFO0dBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQU8sQ0FBQyxDQUFDO0NBQ1YsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCRixhQUFhLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxVQUFTLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDNUQsT0FBSyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7QUFDcEIsTUFBSSxRQUFRLENBQUM7QUFDYixTQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25CLFVBQVEsS0FBSyxDQUFDLElBQUk7QUFDaEIsU0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUk7QUFDcEIsY0FBUSxHQUFHLE1BQU0sQ0FBQztBQUNsQixZQUFNO0FBQUEsQUFDUixTQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSztBQUNyQixjQUFRLEdBQUcsT0FBTyxDQUFDO0FBQ25CLFlBQU07QUFBQSxBQUNSO0FBQ0UsY0FBUSxHQUFHLFNBQVMsQ0FBQztBQUNyQixZQUFNO0FBQUEsR0FDVDs7QUFFRCxNQUFJLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztBQUMzQixNQUFJLENBQUMsSUFBSSxFQUFFO0FBQ1QsUUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzNELFdBQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7R0FDaEY7O0FBRUQsTUFBSSxNQUFNLEdBQUc7QUFDWCxTQUFLLEVBQUUsSUFBSSxDQUFDLG9CQUFvQjtBQUNoQyxXQUFPLEVBQUUsRUFBRTtHQUNaLENBQUM7O0FBRUYsTUFBSSxZQUFZLEdBQUcsU0FBZixZQUFZLEdBQWM7QUFDNUIsUUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ1gsS0FBQyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUQsS0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDL0IsV0FBTyxDQUFDLENBQUM7R0FDVixDQUFDOztBQUVGLE1BQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO0FBQ2hDLE1BQUksZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMzRSxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3hDLFVBQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7R0FDckM7O0FBRUQsU0FBTyxhQUFZLFVBQVMsT0FBTyxjQUFlO0FBQ2hELFdBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNqQixDQUFDLENBQUM7Q0FDSixDQUFDIiwiZmlsZSI6ImNsQWRhcHRlcnMvY2xNb2NrQWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIEJhc2VBZGFwdGVyID0gcmVxdWlyZSgnLi9iYXNlL0FkYXB0ZXInKTtcbnZhciBGaWVsZHMgPSByZXF1aXJlKCcuL2ZpZWxkcycpO1xuXG4vKipcbiAqIENMTW9ja0FkYXB0ZXJcbiAqXG4gKiBgY3JlZGVudGlhbHNgIHNob3VsZCBhbHdheXMgYmU6XG4gKiBgYGBcbiAqIHtcbiAqICAgYXBwSWQ6ICcxMjM0NTYnLFxuICogICBhcGlLZXk6ICc5OTk5OTknXG4gKiB9XG4gKiBgYGBcbiAqIEBjbGFzc1xuICogQHJldHVybiB7Q2xNb2NrQWRhcHRlcn1cbiAqL1xudmFyIENMTW9ja0FkYXB0ZXIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENMTW9ja0FkYXB0ZXIoKSB7XG4gIEJhc2VBZGFwdGVyLmNhbGwodGhpcyk7XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdleHRFbnRpdHlLZXknLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWRlbnRpYWxzLmFwcElkO1xuICAgIH1cbiAgfSk7XG59O1xuXG51dGlsLmluaGVyaXRzKENMTW9ja0FkYXB0ZXIsIEJhc2VBZGFwdGVyKTtcblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQ0xNb2NrQWRhcHRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmIChfdGhpcy5jcmVkZW50aWFscy5hcHBJZCA9PT0gJzEyMzQ1NicgJiYgX3RoaXMuY3JlZGVudGlhbHMuYXBpS2V5ID09PSAnOTk5OTk5Jykge1xuICAgICAgcmVzb2x2ZShfdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdCgnV3JvbmcgY3JlZGVudGlhbHMsIHBsZWFzZSB1c2UgYXBwSWQgXCIxMjM0NTZcIiBhbmQgYXBpS2V5IFwiOTk5OTk5XCInKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwO1xufTtcblxuLyoqXG4gKiBSZWZsZWN0cyBnaXZlbiBmaWVsZCBpbiB0aGlzIGByZXN1bHRgIGZvcm1hdDpcbiAqIGBgYFxuICoge1xuICogICB7ZmllbGRUeXBlfUV4dElkOiByYW5kICMgYmV0d2VlbiAxLTUwLFxuICogICB7ZXh0SWR9OiBGbG9hdCAoMC0xLjApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBGb3IgZXhhbXBsZSwgZm9yIGEgXCJGaWVsZHMuVHlwZXMuVVNFUlwiIGZpZWxkIHcvZXh0SWQgJ3VzZXIjdXRpbGl6YXRpb25SYXRlJywgd291bGQgcmV0dXJuOlxuICogYGBgXG4gKiB7XG4gKiAgIHVzZXJFeHRJZDogNTAsXG4gKiAgICd1c2VyI3V0aWxpemF0aW9uUmF0ZSc6IDAuNTVcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFJldHVybnMgYmV0d2VlbiAwLTUwIHJlc3VsdHMgaW4gcGFnZXMgb2YgYHF1ZXJ5LmxpbWl0YCAoZGVmYXVsdCA1KVxuICogQG92ZXJyaWRlXG4gKi9cbkNMTW9ja0FkYXB0ZXIucHJvdG90eXBlLmdldEZpZWxkRGF0YSA9IGZ1bmN0aW9uKGZpZWxkLCBxdWVyeSkge1xuICBxdWVyeSA9IHF1ZXJ5IHx8IHt9O1xuICB2YXIgdHlwZU5hbWU7XG4gIGNvbnNvbGUubG9nKGZpZWxkKTtcbiAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgY2FzZSBGaWVsZHMuVHlwZXMuVVNFUjpcbiAgICAgIHR5cGVOYW1lID0gJ3VzZXInO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBGaWVsZHMuVHlwZXMuR1JPVVA6XG4gICAgICB0eXBlTmFtZSA9ICdncm91cCc7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdHlwZU5hbWUgPSAndW5rbm93bic7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHZhciBza2lwID0gcXVlcnkuc2tpcCB8fCAwO1xuICBpZiAoIXNraXApIHtcbiAgICB0aGlzLm51bVJlc3VsdHNUb0dlbmVyYXRlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNTApO1xuICAgIGNvbnNvbGUubG9nKCdDTE1vY2tBZGFwdGVyOiBHZW5lcmF0aW5nICVkIHJlc3VsdHMnLCB0aGlzLm51bVJlc3VsdHNUb0dlbmVyYXRlKTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgY291bnQ6IHRoaXMubnVtUmVzdWx0c1RvR2VuZXJhdGUsXG4gICAgcmVzdWx0czogW11cbiAgfTtcblxuICB2YXIgY3JlYXRlUmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHIgPSB7fTtcbiAgICByW3R5cGVOYW1lICsgJ0V4dElkJ10gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKSArIDE7XG4gICAgcltmaWVsZC5leHRJZF0gPSBNYXRoLnJhbmRvbSgpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIHZhciBwYWdlU2l6ZSA9IHF1ZXJ5LmxpbWl0IHx8IDU7XG4gIHZhciByZXN1bHRzVG9SZXR1cm4gPSBNYXRoLm1pbihwYWdlU2l6ZSwgdGhpcy5udW1SZXN1bHRzVG9HZW5lcmF0ZSAtIHNraXApO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHNUb1JldHVybjsgaSsrKSB7XG4gICAgcmVzdWx0LnJlc3VsdHMucHVzaChjcmVhdGVSZXN1bHQoKSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSAvKixyZWplY3QqLyApIHtcbiAgICByZXNvbHZlKHJlc3VsdCk7XG4gIH0pO1xufTtcbiJdfQ==
//# sourceMappingURL=clMockAdapter.js.map
