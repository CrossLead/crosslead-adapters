{"version":3,"sources":["clAdapters/jira/index.js"],"names":["JiraAdapter","apiVersion","prototype","makeRequest","path","uri","format","protocol","credentials","hostname","host","port","pathname","authorizationString","Buffer","username","password","toString","options","method","headers","resolve","reject","error","response","body","code","statusCode","message","data","success","getIssueHierarchy","runConnectionTest","testResult","errorMessage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEqBA,W;;;AACnB,yBAAc;AAAA;;AAAA;;AAEZ,UAAKC,UAAL,GAAkB,CAAlB;AAFY;AAGb;;;;2BAEM,CACN;;;;;kBAPkBD,W;;;AAUrBA,YAAYE,SAAZ,CAAsBC,WAAtB,GAAoC,UAASC,IAAT,EAAe;AACjD,MAAMC,MAAM,cAAIC,MAAJ,CAAW;AACrBC,cAAU,KAAKC,WAAL,CAAiBD,QAAjB,IAA6B,OADlB;AAErBE,cAAU,KAAKD,WAAL,CAAiBE,IAFN;AAGrBC,UAAM,KAAKH,WAAL,CAAiBG,IAHF;AAIrBC,cAAU,cAAc,KAAKX,UAAnB,GAAgC,GAAhC,GAAsCG;AAJ3B,GAAX,CAAZ;;AAOA,MAAMS,sBAAsB,IAAIC,MAAJ,CAAW,KAAKN,WAAL,CAAiBO,QAAjB,GAA4B,GAA5B,GAAkC,KAAKP,WAAL,CAAiBQ,QAA9D,EAAwEC,QAAxE,CAAiF,QAAjF,CAA5B;;AAEA,MAAMC,UAAU;AACdb,SAAKA,GADS;AAEdc,YAAQ,KAFM;AAGdC,aAAS;AACP,uBAAiB,WAAWP;AADrB;AAHK,GAAhB;;AAQA,SAAO,sBAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACtC,2BAAQJ,OAAR,EAAiB,UAACK,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AAC1C,UAAIF,KAAJ,EAAW;AACTD,eAAO;AACLI,gBAAMF,SAASG,UADV;AAELC,mBAASL,KAFJ;AAGLM,gBAAMJ,IAHD;AAILK,mBAAS;AAJJ,SAAP;AAMD,OAPD,MAOO;AACLT,gBAAQ;AACNK,gBAAMF,SAASG,UADT;AAENE,gBAAMJ,IAFA;AAGNK,mBAAS;AAHH,SAAR;AAKD;AACF,KAfD;AAgBD,GAjBM,CAAP;AAkBD,CApCD;;AAsCA9B,YAAYE,SAAZ,CAAsB6B,iBAAtB,8DAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAC3B,KAAK5B,WAAL,CAAiB,kBAAjB,CAD2B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1C;;AAIAH,YAAYE,SAAZ,CAAsB8B,iBAAtB,8DAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACf,KAAK7B,WAAL,CAAiB,QAAjB,CADe;;AAAA;AAClC8B,oBADkC;;AAExC,cAAIA,WAAWP,IAAX,KAAoB,GAAxB,EAA6B;AAC3BO,uBAAWC,YAAX,GAA0B,2BAA1B;AACAD,uBAAWH,OAAX,GAAqB,KAArB;AACD;AALuC,4CAMjCG,UANiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1C","file":"clAdapters/jira/index.js","sourcesContent":["import Adapter from '../base/Adapter';\nimport url from 'url';\nimport request from 'request';\n\nexport default class JiraAdapter extends Adapter {\n  constructor() {\n    super();\n    this.apiVersion = 2;\n  }\n\n  init() {\n  }\n}\n\nJiraAdapter.prototype.makeRequest = function(path) {\n  const uri = url.format({\n    protocol: this.credentials.protocol || 'https',\n    hostname: this.credentials.host,\n    port: this.credentials.port,\n    pathname: 'rest/api/' + this.apiVersion + '/' + path\n  });\n\n  const authorizationString = new Buffer(this.credentials.username + ':' + this.credentials.password).toString('base64');\n\n  const options = {\n    uri: uri,\n    method: 'GET',\n    headers: {\n      'Authorization': 'Basic ' + authorizationString\n    }\n  };\n\n  return new Promise((resolve, reject) => {\n    request(options, (error, response, body) => {\n      if (error) {\n        reject({\n          code: response.statusCode,\n          message: error,\n          data: body,\n          success: false\n        });\n      } else {\n        resolve({\n          code: response.statusCode,\n          data: body,\n          success: true\n        });\n      }\n    });\n  });\n};\n\nJiraAdapter.prototype.getIssueHierarchy = async function() {\n  return await this.makeRequest('issue/createmeta');\n};\n\nJiraAdapter.prototype.runConnectionTest = async function() {\n  const testResult = await this.makeRequest('myself');\n  if (testResult.code === 401) {\n    testResult.errorMessage = 'Failed to authorize user.';\n    testResult.success = false;\n  }\n  return testResult;\n};\n"],"sourceRoot":"/source/"}