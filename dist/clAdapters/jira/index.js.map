{"version":3,"sources":["clAdapters/jira/index.js"],"names":["JiraAdapter","apiVersion","path","uri","format","protocol","credentials","hostname","host","port","pathname","authorizationString","Buffer","username","password","toString","options","method","headers","resolve","error","response","body","errorMessage","success","statusCode","code","message","data","makeRequest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,W,WAWlB,yBAAU,IAAV,C;;;AAVD,yBAAc;AAAA;;AAAA;;AAEZ,UAAKC,UAAL,GAAkB,CAAlB;AAFY;AAGb;;;;2BAEM,CAAE;;AAET;;;;;;gCAIYC,I,EAAM;AAChB,UAAMC,MAAM,cAAIC,MAAJ,CAAW;AACrBC,kBAAU,KAAKC,WAAL,CAAiBD,QAAjB,IAA6B,OADlB;AAErBE,kBAAU,KAAKD,WAAL,CAAiBE,IAFN;AAGrBC,cAAM,KAAKH,WAAL,CAAiBG,IAHF;AAIrBC,kBAAU,cAAc,KAAKT,UAAnB,GAAgC,GAAhC,GAAsCC;AAJ3B,OAAX,CAAZ;;AAOA,UAAMS,sBAAsB,IAAIC,MAAJ,CAC1B,KAAKN,WAAL,CAAiBO,QAAjB,GAA4B,GAA5B,GAAkC,KAAKP,WAAL,CAAiBQ,QADzB,EAE1BC,QAF0B,CAEjB,QAFiB,CAA5B;;AAIA,UAAMC,UAAU;AACdb,aAAKA,GADS;AAEdc,gBAAQ,KAFM;AAGdC,iBAAS;AACP,2BAAiB,WAAWP;AADrB;AAHK,OAAhB;;AAQA,aAAO,sBAAY,UAACQ,OAAD,EAAa;AAC9B,+BAAQH,OAAR,EAAiB,UAACI,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AAC1C,cAAIC,eAAe,IAAnB;AACA,cAAIC,UAAUH,YAAYA,SAASI,UAAT,GAAsB,GAAhD;;AAEA,cAAIL,KAAJ,EAAW;AACTI,sBAAU,KAAV;AACA,gBAAIJ,MAAMM,IAAN,KAAe,cAAnB,EAAmC;AACjCH,6BAAe,oCAAf;AACD;AACF;;AAED,cAAIF,YAAYA,SAASI,UAAT,KAAwB,GAAxC,EAA6C;AAC3CD,sBAAU,KAAV;AACAD,2BAAe,mCAAf;AACD;;AAEDJ,kBAAQ;AACNO,kBAAMF,UAAU,GAAV,GAAgB,GADhB;AAENG,qBAASJ,gBAAgBH,KAFnB;AAGNQ,kBAAMN,IAHA;AAINE,qBAASA;AAJH,WAAR;AAMD,SAtBD;AAuBD,OAxBM,CAAP;AAyBD;;;;;;;;;;uBAGc,KAAKK,WAAL,CAAiB,kBAAjB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIA,KAAKA,WAAL,CAAiB,QAAjB,C;;;;;;;;;;;;;;;;;;;;;;kBAhEI7B,W","file":"clAdapters/jira/index.js","sourcesContent":["import Adapter from '../base/Adapter';\nimport url from 'url';\nimport request from 'request';\nimport rateLimit from '../../utils/rate-limit';\n\nexport default class JiraAdapter extends Adapter {\n  constructor() {\n    super();\n    this.apiVersion = 2;\n  }\n\n  init() {}\n\n  /**\n   * Rate limit api requests to once per second\n   */\n  @rateLimit(1000)\n  makeRequest(path) {\n    const uri = url.format({\n      protocol: this.credentials.protocol || 'https',\n      hostname: this.credentials.host,\n      port: this.credentials.port,\n      pathname: 'rest/api/' + this.apiVersion + '/' + path\n    });\n\n    const authorizationString = new Buffer(\n      this.credentials.username + ':' + this.credentials.password\n    ).toString('base64');\n\n    const options = {\n      uri: uri,\n      method: 'GET',\n      headers: {\n        'Authorization': 'Basic ' + authorizationString\n      }\n    };\n\n    return new Promise((resolve) => {\n      request(options, (error, response, body) => {\n        let errorMessage = null;\n        let success = response && response.statusCode < 400;\n\n        if (error) {\n          success = false;\n          if (error.code === 'ECONNREFUSED') {\n            errorMessage = 'Failed to connect to JIRA adapter.';\n          }\n        }\n\n        if (response && response.statusCode === 401) {\n          success = false;\n          errorMessage = 'Failed to authorize JIRA adapter.';\n        }\n\n        resolve({\n          code: success ? 200 : 500,\n          message: errorMessage || error,\n          data: body,\n          success: success\n        });\n      });\n    });\n  }\n\n  async getIssueHierarchy() {\n    return await this.makeRequest('issue/createmeta');\n  }\n\n  async runConnectionTest() {\n    return await this.makeRequest('myself');\n  }\n}\n"],"sourceRoot":"/source/"}