{"version":3,"sources":["clAdapters/netsuite/index.js"],"names":["NetSuiteAdapter","Fields","implementedFields","Types","USER","EXT_ENTITY","call","Object","defineProperty","get","credentials","account","_searchIds","_cachedDataByFieldType","inherits","prototype","init","_this","_config","Configuration","_service","Service","then","msg","console","log","email","role","reset","_setCacheValue","field","limit","skip","data","fieldCache","type","entityType","cloneDeep","_getCacheValue","undefined","getFieldData","query","Promise","resolve","reject","preferences","Search","SearchPreferences","pageSize","setSearchPreferences","extId","Error","cached","pageIndex","search","Math","floor","searchMoreWithId","result","count","searchResult","totalRecords","results","recordList","record","EmployeeSearchBasic","totalPages","searchId","searchRowList","searchRow","CustomerSearchAdvanced","columns","CustomerSearchRow","basic","CustomerSearchRowBasic","entityIdField","SearchColumnStringField","searchColumnFields","push","internalIdField","SearchColumnSelectField","balanceField","SearchColumnDoubleField","overdueBalanceField","daysOverdueField","SearchColumnLongField"],"mappings":"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","file":"clAdapters/netsuite/index.js","sourcesContent":["import _ from 'lodash';\nimport util from 'util';\nimport BaseAdapter from '../base/Adapter';\nimport * as Fields from '../fields';\nimport NetSuite from 'netsuite-js';\n\nconst implementedFields = {};\n\nimplementedFields[Fields.Types.USER] = {\n  'department#internalId': true,\n  'supervisor#internalId': true\n};\nimplementedFields[Fields.Types.EXT_ENTITY] = {\n  'customer#balance': true,\n  'customer#overdueBalance': true,\n  'customer#daysOverdue': true\n};\n\n/**\n * NetSuiteAdapter\n *\n * `credentials` format:\n * ```\n * {\n *   email: 'test@test.com',\n *   password: 'password',\n *   account: 123456,\n *   role: 3\n * }\n * ```\n * @class\n * @return {NetSuiteAdapter}\n */\nexport default function NetSuiteAdapter() {\n  BaseAdapter.call(this);\n\n  /**\n   * @override\n   */\n  Object.defineProperty(this, 'extEntityKey', {\n    get: function() {\n      return this.credentials.account;\n    }\n  });\n\n  // SearchId cache, one per field\n  this._searchIds = {};\n\n  // Cache results by field type -> limit (pagesize) -> skip, e.g.:\n  // this._cachedDataByFieldType[Fields.Types.USER][10][3]\n  // represents all user records for search page size 10 starting at index 3.\n  // EXT_ENTITY fields are have an additional layer for entityType, e.g.:\n  // this._cachedDataByFieldType[Fields.Types.EXT_ENTITY]['customer'][10][3]\n  this._cachedDataByFieldType = {};\n};\n\nutil.inherits(NetSuiteAdapter, BaseAdapter);\n\n/**\n * @override\n */\nNetSuiteAdapter.prototype.init = function() {\n  const _this = this;\n  this._config = new NetSuite.Configuration(this.credentials);\n  this._service = new NetSuite.Service(this._config);\n  return this._service\n    .init()\n    .then(( /*client*/ ) => {\n      const msg = 'Successfully initialized NetSuiteAdapter for email: %s, account: %s, role: %d';\n      console.log(msg, _this.credentials.email, _this.credentials.account, _this.credentials.role);\n      return _this;\n    });\n};\n\n/**\n * @override\n */\nNetSuiteAdapter.prototype.reset = function() {\n  this._searchIds = {};\n  this._cachedDataByFieldType = {};\n  delete this._config;\n  delete this._service;\n};\n\nNetSuiteAdapter.prototype._setCacheValue = function(field, limit, skip, data) {\n  let fieldCache = this._cachedDataByFieldType[field.type] = this._cachedDataByFieldType[field.type] || {};\n\n  if (field.type === Fields.Types.EXT_ENTITY) {\n    fieldCache\n      = this._cachedDataByFieldType[field.type][field.entityType]\n      = this._cachedDataByFieldType[field.type][field.entityType] || {};\n  }\n\n  fieldCache[limit] = fieldCache[limit] || {};\n  fieldCache[limit][skip] = _.cloneDeep(data);\n};\n\nNetSuiteAdapter.prototype._getCacheValue = function(field, limit, skip) {\n  let fieldCache = this._cachedDataByFieldType[field.type];\n  if (!fieldCache) {\n    return undefined;\n  }\n\n  if (field.type === Fields.Types.EXT_ENTITY) {\n    fieldCache = fieldCache[field.entityType];\n  }\n  return fieldCache &&\n    fieldCache[limit] &&\n    fieldCache[limit][skip];\n};\n\n/**\n * @override\n */\nNetSuiteAdapter.prototype.getFieldData = function(field, query) {\n  console.log(field);\n  const _this = this;\n  return new Promise((resolve, reject) => {\n    query = query || {};\n\n    const preferences = new NetSuite.Search.SearchPreferences();\n    preferences.pageSize = query.limit || 10;\n    _this._service.setSearchPreferences(preferences);\n\n    if (!implementedFields[field.type] || !implementedFields[field.type][field.extId]) {\n      return reject(new Error('Unknown field or retrieval NYI by NetSuiteAdapter:', field));\n    }\n\n    // Cache hit?\n    const cached = _this._getCacheValue(field, preferences.pageSize, query.skip);\n    if (cached) {\n      return resolve(cached);\n    }\n\n    let pageIndex, search;\n    if (field.type === Fields.Types.USER) {\n      if (query.skip) {\n        if (!_this._searchIds[field.extId]) {\n          throw new Error('NetSuite paged searches must start with an initial search to generate a search session');\n        }\n        // Round down then add 1 since netsuite page indices are one-based\n        pageIndex = Math.floor(query.skip / preferences.pageSize) + 1;\n        console.log('searchMoreWithId with pageIndex \"%d\"', pageIndex);\n        return _this._service.searchMoreWithId(_this._searchIds[field.extId], pageIndex)\n          .then((result) => {\n            const data = {\n              count: result.searchResult.totalRecords,\n              results: result.searchResult.recordList.record\n            };\n            _this._setCacheValue(field, preferences.pageSize, query.skip, data);\n            return resolve(data);\n          });\n      } else {\n        // No criteria right now\n        search = new NetSuite.Search.EmployeeSearchBasic();\n        return _this._service.search(search)\n          .then((result) => {\n            if (result.searchResult.totalPages > 1) {\n              _this._searchIds[field.extId] = result.searchResult.searchId;\n            }\n\n            const data = {\n              count: result.searchResult.totalRecords,\n              results: result.searchResult.recordList.record\n            };\n            _this._setCacheValue(field, preferences.pageSize, query.skip, data);\n            return resolve(data);\n          });\n      }\n    } else if (field.type === Fields.Types.EXT_ENTITY) {\n      if (field.entityType === 'customer') {\n        if (query.skip) {\n          if (!_this._searchIds[field.extId]) {\n            throw new Error('NetSuite paged searches must start with an initial search to generate a search session');\n          }\n          // Round down then add 1 since netsuite page indices are one-based\n          pageIndex = Math.floor(query.skip / preferences.pageSize) + 1;\n          console.log('searchMoreWithId with pageIndex \"%d\"', pageIndex);\n          return _this._service.searchMoreWithId(_this._searchIds[field.extId], pageIndex)\n            .then((result) => {\n              const data = {\n                count: result.searchResult.totalRecords,\n                results: result.searchResult.searchRowList.searchRow\n              };\n              _this._setCacheValue(field, preferences.pageSize, query.skip, data);\n              return resolve(data);\n            });\n        } else {\n          // No criteria right now\n          search = new NetSuite.Search.CustomerSearchAdvanced();\n          search.columns = new NetSuite.Search.CustomerSearchRow();\n          search.columns.basic = new NetSuite.Search.CustomerSearchRowBasic();\n\n          // For now, always include all SearchColumn fields since storing an extra field\n          // is far less costly than having to do another roundtrip to retrieve another field\n          const entityIdField = new NetSuite.Search.Fields.SearchColumnStringField();\n          entityIdField.field = 'entityId';\n          search.columns.basic.searchColumnFields.push(entityIdField);\n\n          const internalIdField = new NetSuite.Search.Fields.SearchColumnSelectField();\n          internalIdField.field = 'internalId';\n          search.columns.basic.searchColumnFields.push(internalIdField);\n\n          const balanceField = new NetSuite.Search.Fields.SearchColumnDoubleField();\n          balanceField.field = 'balance';\n          search.columns.basic.searchColumnFields.push(balanceField);\n\n          const overdueBalanceField = new NetSuite.Search.Fields.SearchColumnDoubleField();\n          overdueBalanceField.field = 'overdueBalance';\n          search.columns.basic.searchColumnFields.push(overdueBalanceField);\n\n          const daysOverdueField = new NetSuite.Search.Fields.SearchColumnLongField();\n          daysOverdueField.field = 'daysOverdue';\n          search.columns.basic.searchColumnFields.push(daysOverdueField);\n\n          return _this._service.search(search)\n            .then((result) => {\n              if (result.searchResult.totalPages > 1) {\n                _this._searchIds[field.extId] = result.searchResult.searchId;\n              }\n\n              const data = {\n                count: result.searchResult.totalRecords,\n                results: result.searchResult.searchRowList.searchRow\n              };\n              _this._setCacheValue(field, preferences.pageSize, query.skip, data);\n              return resolve(data);\n            });\n        }\n      } else {\n        return reject(new Error('Unknown EXT_ENTITY entityType:', field.entityType));\n      }\n    }\n  });\n};\n"],"sourceRoot":"/source/"}