{"version":3,"sources":["clAdapters/office365-mail/index.js"],"names":[],"mappings":"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","file":"clAdapters/office365-mail/index.js","sourcesContent":["import uuid             from 'node-uuid';\nimport crypto           from 'crypto';\nimport rp               from 'request-promise';\nimport moment           from 'moment';\nimport _                from 'lodash';\nimport { Adapter,\n         Configuration,\n         Service }      from '../base/';\n\n\n\nexport default class Office365Adapter extends Adapter {\n\n\n  // collect these fields always...\n  static baseFields = [\n    'Id',\n    'Categories',\n    'DateTimeCreated',\n    'Subject',\n    'Importance',\n    'HasAttachments',\n    'ParentFolderId',\n    'From',\n    'Sender',\n    'ToRecipients',\n    'CcRecipients',\n    'BccRecipients',\n    'ReplyTo',\n    'ConversationId',\n    'DateTimeReceived',\n    'DateTimeSent',\n    'IsDeliveryReceiptRequested',\n    'IsReadReceiptRequested',\n    'IsRead'\n  ]\n\n\n  // convert the names of the api response data\n  static emailFieldNameMap = {\n    // Desired...                 // Given...\n    'emails':                     'value',\n    'messageId':                  'Id',\n    'conversationId':             'ConversationId',\n    'dateTimeSent':               'DateTimeSent',\n    'dateTimeReceived':           'DateTimeReceived',\n    'importance':                 'Importance',\n    'folderId':                   'ParentFolderId',\n    'categories':                 'Categories',\n    'contentType':                'Body.ContentType',\n    'subject':                    'Subject',\n    'bodyPreview':                'BodyPreview',\n    'body':                       'Body.Content',\n    'fromAddress':                'From.EmailAddress.Address',\n    'fromName':                   'From.EmailAddress.Name',\n    'toRecipients':               'ToRecipients',\n    'toRecipientAddress':         'EmailAddress.Address',\n    'toRecipientName':            'EmailAddress.Name',\n    'ccRecipients':               'CcRecipients',\n    'ccRecipientAddress':         'EmailAddress.Address',\n    'ccRecipientName':            'EmailAddress.Name',\n    'bccRecipients':              'BccRecipients',\n    'bccRecipientAddress':        'EmailAddress.Address',\n    'bccRecipientName':           'EmailAddress.Name',\n    'isDeliveryReceiptRequested': 'IsDeliveryReceiptRequested',\n    'isReadReceiptRequested':     'IsReadReceiptRequested',\n    'hasAttachments':             'HasAttachments',\n    'isDraft':                    'IsDraft',\n    'isRead':                     'IsRead'\n  }\n\n\n  reset() {\n    delete this._config;\n    delete this._service;\n    return this;\n  }\n\n\n  async init() {\n    this._config = new Configuration(this.credentials, { apiVersion: '1.0' })\n    this._service = new Service(this._config);\n    await this._service.init();\n    const msg = 'Successfully initialized Office365 for email: %s';\n    console.log(msg, this.credentials.email);\n    return this;\n  }\n\n\n  async getBatchData(emails, filterStartDate, filterEndDate, additionalFields) {\n\n    const { emailFieldNameMap } = Office365Adapter,\n          dataAdapterRunStats   = {\n            emails,\n            filterStartDate,\n            filterEndDate,\n            success: false,\n            runDate: moment().utc().toDate()\n          };\n\n    try {\n\n      const emailData = await* emails.map(email => this.getEmailsForUser(\n        email,\n        filterStartDate,\n        filterEndDate,\n        additionalFields\n      ));\n\n      // replace data keys with desired mappings...\n      const results = _.map(emailData, user => {\n        const emailArray = (user.success && user.data[emailFieldNameMap.emails]) || [];\n        return {\n          email:            user.email,\n          filterStartDate:  user.filterStartDate,\n          filterEndDate:    user.filterEndDate,\n          success:          user.success,\n          errorMessage:     user.errorMessage,\n          // map data with desired key names...\n          data: _.map(emailArray, originalEmailMessage => {\n            const mappedEmailMessage = {};\n\n            // change to desired names\n            _.each(emailFieldNameMap, (have, want) => {\n              const mapped = _.get(originalEmailMessage, have);\n              mappedEmailMessage[want] = /^dateTime/.test(want) ? new Date(mapped) : mapped;\n            });\n\n            // grab info from different correspondent types...\n            // (since we're using an array literal here, 'for of' syntax will compile reasonably)\n            for (const type of ['to', 'cc', 'bcc']) {\n              const key = `${type}Recipient`;\n              mappedEmailMessage[`${key}s`] = originalEmailMessage[emailFieldNameMap[`${key}s`]]\n                .map(recipient => {\n                  return {\n                    address: _.get(recipient, emailFieldNameMap[`${key}Address`]),\n                    name:    _.get(recipient, emailFieldNameMap[`${key}Name`])\n                  }\n                });\n            }\n\n            return mappedEmailMessage;\n          })\n        };\n      });\n\n      // return results and success!\n      return {\n        ...dataAdapterRunStats,\n        results,\n        success: true\n      };\n\n    } catch (errorMessage) {\n      console.log(errorMessage.stack);\n      console.log('Office365 GetBatchData Error: ' + JSON.stringify(errorMessage));\n      return { ...dataAdapterRunStats, errorMessage };\n    }\n\n  }\n\n\n  async runConnectionTest(connectionData) {\n    this._config = new Configuration(connectionData.credentials);\n\n    const today           = () => moment().utc().startOf('day'),\n          filterStartDate = today().add(-1, 'days').toDate(),\n          filterEndDate   = today().toDate(),\n          data            = await this.getBatchData(\n                              [this._config.credentials.email],\n                              filterStartDate,\n                              filterEndDate,\n                              ''\n                            );\n\n    //to see if it really worked, we need to pass in the first result\n    return data.success && data.results[0] ? data.results[0]: data;\n  }\n\n\n  async getAccessToken() {\n\n    if (this.accessToken && this.accessTokenExpires > new Date()) {\n      return this.accessToken;\n    }\n\n    const {\n      credentials : {\n        clientId,\n        tenantId,\n        certificate,\n        certificateThumbprint\n      },\n      options : {\n        apiVersion\n      }\n    } = this._config;\n\n    const tokenRequestUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/token?api-version=${apiVersion}`;\n\n    const jwtHeader = {\n      'alg': 'RS256',\n      'x5t': certificateThumbprint\n    };\n\n    // expire token in one hour\n    const accessTokenExpires = ((new Date()).getTime() + 360000) / 1000;\n\n    // grab new access token 10 seconds before expiration\n    this.accessTokenExpires = new Date(accessTokenExpires*1000 - 10000);\n\n    const jwtPayload = {\n      'aud': tokenRequestUrl,\n      'exp': accessTokenExpires,\n      'iss': clientId,\n      'jti': uuid.v4(),\n      'nbf': accessTokenExpires - 2*3600, // one hour before now\n      'sub': clientId\n    };\n\n    const encodedJwtHeader     = new Buffer(JSON.stringify(jwtHeader)).toString('base64'),\n          encodedJwtPayload    = new Buffer(JSON.stringify(jwtPayload)).toString('base64'),\n          stringToSign         = encodedJwtHeader + '.' + encodedJwtPayload,\n          encodedSignedJwtInfo = crypto\n            .createSign('RSA-SHA256')\n            .update(stringToSign)\n            .sign(certificate, 'base64');\n\n    //define assertion\n    const clientAssertion = encodedJwtHeader + '.' + encodedJwtPayload + '.' + encodedSignedJwtInfo;\n\n    const tokenRequestFormData = {\n      client_id: clientId,\n      client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n      grant_type: 'client_credentials',\n      resource: 'https://outlook.office365.com/',\n      client_assertion: clientAssertion\n    };\n\n    const tokenRequestOptions = {\n      method: 'POST',\n      port: 443,\n      uri: tokenRequestUrl,\n      formData: tokenRequestFormData,\n    };\n\n    try {\n      var tokenData = JSON.parse(await rp(tokenRequestOptions));\n      if (tokenData && tokenData.access_token) {\n        return this.accessToken = tokenData.access_token;\n      } else {\n        throw new Error('Could not get access token.');\n      }\n    } catch (err) {\n      const tokenData = JSON.parse(JSON.stringify(err));\n      if (tokenData.name === 'StatusCodeError') {\n        const entireMessage = tokenData.message,\n              messageJson   = entireMessage.replace(tokenData.statusCode + ' - ', ''),\n              messageData   = JSON.parse(messageJson.replace(new RegExp('\\\\\"', 'g'),'\"'));\n\n        throw new Error(messageData);\n      } else {\n        throw new Error(err);\n      }\n    }\n  }\n\n\n  async getEmailsForUser(email, filterStartDate, filterEndDate, additionalFields, emailData, pageToGet=1) {\n    // accumulation of data\n    emailData = emailData || { email, filterStartDate, filterEndDate };\n\n    const accessToken     = await this.getAccessToken(),\n          { apiVersion }  = this._config.options,\n          recordsPerPage  = 25,\n          maxPages        = 20,\n          skip            = ((pageToGet -1) * recordsPerPage) + 1,\n          // parameters to query email with...\n          params          = {\n            $top:     recordsPerPage,\n            $skip:    skip,\n            $select:  Office365Adapter.baseFields.join(',') + additionalFields,\n            $filter:  ` IsDraft eq false\n                          and DateTimeSent ge ${filterStartDate.toISOString().substring(0, 10)}\n                          and DateTimeSent lt ${filterEndDate.toISOString().substring(0, 10)}\n                      `.replace(/\\s+/g, ' ')\n                       .trim()\n          };\n\n    // format parameters for url\n    const urlParams = _(params)\n      .map((value, key) => `${key}=${value}`)\n      .join('&');\n\n    const emailRequestOptions = {\n      method: 'GET',\n      uri: `https://outlook.office365.com/api/v${apiVersion}/users('${email}')/messages?${urlParams}`,\n      headers : {\n        Authorization: `Bearer ${accessToken}`,\n        Accept:        'application/json;odata.metadata=none'\n      }\n    };\n\n    try {\n      emailData.success = true;\n      const parsedBody = JSON.parse(await rp(emailRequestOptions));\n\n      if (parsedBody && pageToGet === 1) {\n        emailData.data = parsedBody;\n      } else if (parsedBody.value && pageToGet > 1) {\n        emailData.data.value = emailData.data.value.concat(parsedBody.value);\n      }\n\n      if (parsedBody && parsedBody.value.length === recordsPerPage && pageToGet <= maxPages) {\n        return this.getEmailsForUser(email, filterStartDate, filterEndDate, additionalFields, emailData, pageToGet + 1);\n      } else {\n        return emailData;\n      }\n    } catch (err) {\n      emailData.success = false;\n      if (err.name === 'StatusCodeError') {\n        const entireMessage = err.message,\n              messageJson = entireMessage.replace(err.statusCode + ' - ', ''),\n              messageData = JSON.parse(messageJson.replace(new RegExp('\\\\\"', 'g'),'\"'));\n\n        emailData.errorMessage = messageData.error.message;\n      } else {\n        emailData.errorMessage = JSON.stringify(err);\n      }\n      return true;\n    }\n\n  }\n\n\n}\n"],"sourceRoot":"/source/"}