{"version":3,"sources":["clAdapters/office365-mail/index.js"],"names":[],"mappings":"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","file":"clAdapters/office365-mail/index.js","sourcesContent":["import uuid         from 'node-uuid';\nimport crypto       from 'crypto';\nimport rp           from 'request-promise';\nimport moment       from 'moment';\nimport _            from 'lodash';\n\nimport { Adapter,\n         Configuration,\n         Service }      from '../base/';\n\nconst today = () => moment().utc().startOf('day');\n\n// collect these fields always...\nconst baseFields = [\n  'Id',\n  'Categories',\n  'DateTimeCreated',\n  'Subject',\n  'Importance',\n  'HasAttachments',\n  'ParentFolderId',\n  'From',\n  'Sender',\n  'ToRecipients',\n  'CcRecipients',\n  'BccRecipients',\n  'ReplyTo',\n  'ConversationId',\n  'DateTimeReceived',\n  'DateTimeSent',\n  'IsDeliveryReceiptRequested',\n  'IsReadReceiptRequested',\n  'IsRead'\n];\n\n// convert the names of the api response data\nconst emailFieldNameMap = {\n  // Desired...                 // Given...\n  'emails':                     'value',\n  'messageId':                  'Id',\n  'conversationId':             'ConversationId',\n  'dateTimeSent':               'DateTimeSent',\n  'dateTimeReceived':           'DateTimeReceived',\n  'importance':                 'Importance',\n  'folderId':                   'ParentFolderId',\n  'categories':                 'Categories',\n  'contentType':                'Body.ContentType',\n  'subject':                    'Subject',\n  'bodyPreview':                'BodyPreview',\n  'body':                       'Body.Content',\n  'fromAddress':                'From.EmailAddress.Address',\n  'fromName':                   'From.EmailAddress.Name',\n  'toRecipients':               'ToRecipients',\n  'toRecipientAddress':         'EmailAddress.Address',\n  'toRecipientName':            'EmailAddress.Name',\n  'ccRecipients':               'CcRecipients',\n  'ccRecipientAddress':         'EmailAddress.Address',\n  'ccRecipientName':            'EmailAddress.Name',\n  'bccRecipients':              'BccRecipients',\n  'bccRecipientAddress':        'EmailAddress.Address',\n  'bccRecipientName':           'EmailAddress.Name',\n  'isDeliveryReceiptRequested': 'IsDeliveryReceiptRequested',\n  'isReadReceiptRequested':     'IsReadReceiptRequested',\n  'hasAttachments':             'HasAttachments',\n  'isDraft':                    'IsDraft',\n  'isRead':                     'IsRead'\n};\n\n\n/**\n * Office365Adapter\n *\n * @class\n * @return {Office365Adapter}\n */\nexport default class Office365Adapter extends Adapter {\n\n  async init() {\n\n    this._config = new Configuration(this.credentials, { apiVersion: '1.0' })\n    this._service = new Service(this._config);\n    await this._service.init();\n    const msg = 'Successfully initialized Office365 for email: %s';\n    console.log(msg, this.credentials.email);\n    return this;\n  }\n\n  reset() {\n    delete this._config;\n    delete this._service;\n    return this;\n  }\n\n  async getBatchData(emails, filterStartDate, filterEndDate, additionalFields) {\n\n    const dataAdapterRunStats = {\n      emails,\n      filterStartDate,\n      filterEndDate,\n      success: false,\n      runDate: moment().utc().toDate()\n    };\n\n    try {\n      return {\n        ...dataAdapterRunStats,\n        success: true,\n        results : mapEmailData(await this.getEmailData(\n          emails,\n          filterStartDate,\n          filterEndDate,\n          additionalFields\n        ))\n      };\n    } catch (errorMessage) {\n      console.log(errorMessage.stack);\n      console.log('Office365 GetBatchData Error: ' + JSON.stringify(errorMessage));\n      return { ...dataAdapterRunStats, errorMessage };\n    }\n\n  }\n\n  async runConnectionTest(connectionData) {\n    this._config = new Configuration(connectionData.credentials);\n\n    const filterStartDate = today().add(-1, 'days').toDate(),\n          filterEndDate   = today().toDate(),\n          data            = await this.getBatchData(\n                              [this._config.credentials.email],\n                              filterStartDate,\n                              filterEndDate,\n                              ''\n                            );\n\n    //to see if it really worked, we need to pass in the first result\n    return data.success && data.results[0] ? data.results[0]: data;\n  }\n\n  async getAccessToken() {\n\n    if (this.accessToken && this.accessTokenExpires > new Date()) {\n      return this.accessToken;\n    }\n\n    const {\n      credentials : {\n        clientId,\n        tenantId,\n        certificate,\n        certificateThumbprint\n      },\n      options : {\n        apiVersion\n      }\n    } = this._config;\n\n    const tokenRequestUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/token?api-version=${apiVersion}`;\n\n    const jwtHeader = {\n      'alg': 'RS256',\n      'x5t': certificateThumbprint\n    };\n\n    // expire token in one hour\n    const accessTokenExpires = ((new Date()).getTime() + 360000) / 1000;\n\n    // grab new access token 10 seconds before expiration\n    this.accessTokenExpires = new Date(accessTokenExpires*1000 - 10000);\n\n    const jwtPayload = {\n      'aud': tokenRequestUrl,\n      'exp': accessTokenExpires,\n      'iss': clientId,\n      'jti': uuid.v4(),\n      'nbf': accessTokenExpires - 2*3600, // one hour before now\n      'sub': clientId\n    };\n\n    const encodedJwtHeader = new Buffer(JSON.stringify(jwtHeader)).toString('base64');\n    const encodedJwtPayload = new Buffer(JSON.stringify(jwtPayload)).toString('base64');\n    const stringToSign = encodedJwtHeader + '.' + encodedJwtPayload;\n\n    //sign it!\n    const signer = crypto.createSign('RSA-SHA256');\n    signer.update(stringToSign);\n    const encodedSignedJwtInfo = signer.sign(certificate, 'base64');\n\n    //define assertion\n    const clientAssertion = encodedJwtHeader + '.' + encodedJwtPayload + '.' + encodedSignedJwtInfo;\n\n    const tokenRequestFormData = {\n      client_id: clientId,\n      client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n      grant_type: 'client_credentials',\n      resource: 'https://outlook.office365.com/',\n      client_assertion: clientAssertion\n    };\n\n    const tokenRequestOptions = {\n      method: 'POST',\n      port: 443,\n      uri: tokenRequestUrl,\n      formData: tokenRequestFormData,\n    };\n\n    try {\n      var tokenData = JSON.parse(await rp(tokenRequestOptions));\n      if (tokenData && tokenData.access_token) {\n        return this.accessToken = tokenData.access_token;\n      } else {\n        throw new Error('Could not get access token.');\n      }\n    } catch (err) {\n      const tokenData = JSON.parse(JSON.stringify(err));\n      if (tokenData.name === 'StatusCodeError') {\n        const entireMessage = tokenData.message;\n        const messageJson = entireMessage.replace(tokenData.statusCode + ' - ', '');\n        const messageData = JSON.parse(messageJson.replace(new RegExp('\\\\\"', 'g'),'\"'));\n        //console.log('-----');\n        //console.log(messageData);\n        throw new Error(messageData);\n      } else {\n        throw new Error(err);\n      }\n    }\n  }\n\n  async getEmailData(emails, filterStartDate, filterEndDate, additionalFields) {\n    return await* emails.map(email => this.getEmailsForUser(\n      email,\n      filterStartDate,\n      filterEndDate,\n      additionalFields\n    ));\n  }\n\n  async getEmailsForUser(email, filterStartDate, filterEndDate, additionalFields, emailData, pageToGet=1) {\n    // accumulation of data\n    emailData = emailData || { email, filterStartDate, filterEndDate };\n\n    const accessToken     = await this.getAccessToken(),\n          { apiVersion }  = this._config.options,\n          recordsPerPage  = 25,\n          maxPages        = 20,\n          skip            = ((pageToGet -1) * recordsPerPage) + 1,\n          // parameters to query email with...\n          params          = {\n            $top: recordsPerPage,\n            $skip: skip,\n            $select: baseFields.join(',') + additionalFields,\n            $filter: `\n              IsDraft eq false\n                and DateTimeSent ge ${filterStartDate.toISOString().substring(0, 10)}\n                and DateTimeSent lt ${filterEndDate.toISOString().substring(0, 10)}\n            `.replace(/\\s+/g, ' ')\n             .trim()\n          };\n\n    // format parameters for url\n    const urlParams = _(params)\n      .map((value, key) => `${key}=${value}`)\n      .join('&');\n\n    const emailRequestOptions = {\n      method: 'GET',\n      uri: `https://outlook.office365.com/api/v${apiVersion}/users('${email}')/messages?${urlParams}`,\n      headers : {\n        Authorization: `Bearer ${accessToken}`,\n        Accept:        'application/json;odata.metadata=none'\n      }\n    };\n\n    try {\n      emailData.success = true;\n      const parsedBody = JSON.parse(await rp(emailRequestOptions));\n\n      if (parsedBody && pageToGet === 1) {\n        emailData.data = parsedBody;\n      } else if (parsedBody.value && pageToGet > 1) {\n        emailData.data.value = emailData.data.value.concat(parsedBody.value);\n      }\n\n      if (parsedBody && parsedBody.value.length === recordsPerPage && pageToGet <= maxPages) {\n        return this.getEmailsForUser(email, filterStartDate, filterEndDate, additionalFields, emailData, pageToGet + 1);\n      } else {\n        return emailData;\n      }\n    } catch (err) {\n      emailData.success = false;\n      if (err.name === 'StatusCodeError') {\n        const entireMessage = err.message,\n              messageJson = entireMessage.replace(err.statusCode + ' - ', ''),\n              messageData = JSON.parse(messageJson.replace(new RegExp('\\\\\"', 'g'),'\"'));\n\n        emailData.errorMessage = messageData.error.message;\n      } else {\n        emailData.errorMessage = JSON.stringify(err);\n      }\n      return true;\n    }\n\n  }\n\n}\n\n\nvar extractDataFromEmailMessage = function(emailMessage, mapping) {\n  if (mapping === '') {\n    return '';\n  } else if (mapping.indexOf('.') === -1) {\n    return emailMessage[mapping];\n  } else {\n    //drill into object to grab the value we need\n    var nestedPropertyArray = mapping.split('.');\n    var returnVal = emailMessage[nestedPropertyArray[0]];\n    if (returnVal) {\n      for (var i = 1; i < nestedPropertyArray.length; i++) {\n        returnVal = returnVal[nestedPropertyArray[i]];\n        if (!returnVal) {\n          return returnVal;\n        }\n      }\n    }\n    return returnVal;\n  }\n};\n\nvar mapEmailData = function(emailData) {\n\n\n  var mappedData = [];\n\n  for (var userIter = 0; userIter < emailData.length; userIter++) {\n    var mappedUser = {\n      email: emailData[userIter].email,\n      filterStartDate: emailData[userIter].filterStartDate,\n      filterEndDate: emailData[userIter].filterEndDate,\n      data: [],\n      success: emailData[userIter].success,\n      errorMessage: emailData[userIter].errorMessage\n    };\n\n    if (emailData[userIter].success) {\n      for (var i = 0; i < emailData[userIter].data[emailFieldNameMap.emails].length; i++) {\n\n        const originalEmailMessage = emailData[userIter].data[emailFieldNameMap.emails][i],\n              mappedEmailMessage   = {};\n\n        // change to desired names\n        _(emailFieldNameMap)\n          .omit([ 'emails' ])\n          .each((have, want) => {\n            const mapped = extractDataFromEmailMessage(originalEmailMessage, have);\n            mappedEmailMessage[want] = /^dateTime/.test(want) ? new Date(mapped) : mapped;\n          });\n\n        //get arrays\n        var j = 0;\n\n        //to\n        mappedEmailMessage.toRecipients = [];\n        for (j = 0; j < originalEmailMessage[emailFieldNameMap.toRecipients].length; j++) {\n          mappedEmailMessage.toRecipients.push({\n            address: extractDataFromEmailMessage(originalEmailMessage[emailFieldNameMap.toRecipients][j], emailFieldNameMap.toRecipientAddress),\n            name: extractDataFromEmailMessage(originalEmailMessage[emailFieldNameMap.toRecipients][j], emailFieldNameMap.toRecipientName)\n          });\n        }\n\n        //cc\n        mappedEmailMessage.ccRecipients = [];\n        for (j = 0; j < originalEmailMessage[emailFieldNameMap.ccRecipients].length; j++) {\n          mappedEmailMessage.ccRecipients.push({\n            address: extractDataFromEmailMessage(originalEmailMessage[emailFieldNameMap.ccRecipients][j], emailFieldNameMap.ccRecipientAddress),\n            name: extractDataFromEmailMessage(originalEmailMessage[emailFieldNameMap.ccRecipients][j], emailFieldNameMap.ccRecipientName)\n          });\n        }\n\n        //bcc\n        mappedEmailMessage.bccRecipients = [];\n        for (j = 0; j < originalEmailMessage[emailFieldNameMap.bccRecipients].length; j++) {\n          mappedEmailMessage.bccRecipients.push({\n            address: extractDataFromEmailMessage(originalEmailMessage[emailFieldNameMap.bccRecipients][j], emailFieldNameMap.bccRecipientAddress),\n            name: extractDataFromEmailMessage(originalEmailMessage[emailFieldNameMap.bccRecipients][j], emailFieldNameMap.bccRecipientName)\n          });\n        }\n\n        mappedUser.data.push(mappedEmailMessage);\n      }\n    }\n    mappedData.push(mappedUser);\n  }\n\n  return mappedData;\n};\n"],"sourceRoot":"/source/"}