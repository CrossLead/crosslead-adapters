{"version":3,"sources":["clAdapters/clMockAdapter.js"],"names":["CLMockAdapter","util","Fields","call","Object","defineProperty","get","credentials","appId","inherits","prototype","init","_this","p","Promise","resolve","reject","apiKey","getFieldData","field","query","typeName","console","log","type","Types","USER","GROUP","skip","numResultsToGenerate","Math","floor","random","result","count","results","createResult","r","extId","pageSize","limit","resultsToReturn","min","i","push"],"mappings":"sFAgBwBA,a,CAhBxB,0B,GAAYC,K,gCACZ,uC,+CACA,iC,GAAYC,O,+VACZ;;;;;;;;;;;;GAae,QAASF,cAAT,EAAyB,CACtC,kBAAYG,IAAZ,CAAiB,IAAjB,EAEA;;KAGAC,OAAOC,cAAP,CAAsB,IAAtB,CAA4B,cAA5B,CAA4C,CAC1CC,IAAK,cAAW,CACd,MAAO,MAAKC,WAAL,CAAiBC,KAAxB,CACD,CAHyC,CAA5C,EAKD,EAEDP,KAAKQ,QAAL,CAAcT,aAAd,oBAEA;;GAGAA,cAAcU,SAAd,CAAwBC,IAAxB,CAA+B,UAAW,CACxC,GAAMC,OAAQ,IAAd,CACA,GAAMC,GAAI,GAAIC,QAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACzC,GAAIJ,MAAML,WAAN,CAAkBC,KAAlB,GAA4B,QAA5B,EAAwCI,MAAML,WAAN,CAAkBU,MAAlB,GAA6B,QAAzE,CAAmF,CACjFF,QAAQH,KAAR,EACD,CAFD,IAEO,CACLI,OAAO,kEAAP,EACD,CACF,CANS,CAAV,CAQA,MAAOH,EAAP,CACD,CAXD,CAaA;;;;;;;;;;;;;;;;;;;GAoBAb,cAAcU,SAAd,CAAwBQ,YAAxB,CAAuC,SAASC,KAAT,CAAgBC,KAAhB,CAAuB,CAC5DA,MAAQA,OAAS,EAAjB,CACA,GAAIC,gBAAJ,CACAC,QAAQC,GAAR,CAAYJ,KAAZ,EACA,OAAQA,MAAMK,IAAd,EACE,IAAKtB,QAAOuB,KAAP,CAAaC,IAAlB,CACEL,SAAW,MAAX,CACA,MACF,IAAKnB,QAAOuB,KAAP,CAAaE,KAAlB,CACEN,SAAW,OAAX,CACA,MACF,QACEA,SAAW,SAAX,CACA,MATJ,CAYA,GAAMO,MAAOR,MAAMQ,IAAN,EAAc,CAA3B,CACA,GAAI,CAACA,IAAL,CAAW,CACT,KAAKC,oBAAL,CAA4BC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,GAAgB,EAA3B,CAA5B,CACAV,QAAQC,GAAR,CAAY,sCAAZ,CAAoD,KAAKM,oBAAzD,EACD,CAED,GAAMI,QAAS,CACbC,MAAO,KAAKL,oBADC,CAEbM,QAAS,EAFI,CAAf,CAKA,GAAMC,cAAe,QAAfA,aAAe,EAAW,CAC9B,GAAMC,GAAI,EAAV,CACAA,EAAEhB,SAAW,OAAb,EAAwBS,KAAKC,KAAL,CAAWD,KAAKE,MAAL,GAAgB,CAA3B,EAAgC,CAAxD,CACAK,EAAElB,MAAMmB,KAAR,EAAiBR,KAAKE,MAAL,EAAjB,CACA,MAAOK,EAAP,CACD,CALD,CAOA,GAAME,UAAWnB,MAAMoB,KAAN,EAAe,CAAhC,CACA,GAAMC,iBAAkBX,KAAKY,GAAL,CAASH,QAAT,CAAmB,KAAKV,oBAAL,CAA4BD,IAA/C,CAAxB,CACA,IAAK,GAAIe,GAAI,CAAb,CAAgBA,EAAIF,eAApB,CAAqCE,GAArC,CAA0C,CACxCV,OAAOE,OAAP,CAAeS,IAAf,CAAoBR,cAApB,EACD,CAED,MAAOtB,SAAQC,OAAR,CAAgBkB,MAAhB,CAAP,CACD,CAzCD","file":"clAdapters/clMockAdapter.js","sourcesContent":["import * as util from 'util';\nimport BaseAdapter from './base/Adapter';\nimport * as Fields from './fields/';\n/**\n * CLMockAdapter\n *\n * `credentials` should always be:\n * ```\n * {\n *   appId: '123456',\n *   apiKey: '999999'\n * }\n * ```\n * @class\n * @return {ClMockAdapter}\n */\nexport default function CLMockAdapter() {\n  BaseAdapter.call(this);\n\n  /**\n   * @override\n   */\n  Object.defineProperty(this, 'extEntityKey', {\n    get: function() {\n      return this.credentials.appId;\n    }\n  });\n};\n\nutil.inherits(CLMockAdapter, BaseAdapter);\n\n/**\n * @override\n */\nCLMockAdapter.prototype.init = function() {\n  const _this = this;\n  const p = new Promise((resolve, reject) => {\n    if (_this.credentials.appId === '123456' && _this.credentials.apiKey === '999999') {\n      resolve(_this);\n    } else {\n      reject('Wrong credentials, please use appId \"123456\" and apiKey \"999999\"');\n    }\n  });\n\n  return p;\n};\n\n/**\n * Reflects given field in this `result` format:\n * ```\n * {\n *   {fieldType}ExtId: rand # between 1-50,\n *   {extId}: Float (0-1.0)\n * }\n * ```\n *\n * For example, for a \"Fields.Types.USER\" field w/extId 'user#utilizationRate', would return:\n * ```\n * {\n *   userExtId: 50,\n *   'user#utilizationRate': 0.55\n * }\n * ```\n *\n * Returns between 0-50 results in pages of `query.limit` (default 5)\n * @override\n */\nCLMockAdapter.prototype.getFieldData = function(field, query) {\n  query = query || {};\n  let typeName;\n  console.log(field);\n  switch (field.type) {\n    case Fields.Types.USER:\n      typeName = 'user';\n      break;\n    case Fields.Types.GROUP:\n      typeName = 'group';\n      break;\n    default:\n      typeName = 'unknown';\n      break;\n  }\n\n  const skip = query.skip || 0;\n  if (!skip) {\n    this.numResultsToGenerate = Math.floor(Math.random() * 50);\n    console.log('CLMockAdapter: Generating %d results', this.numResultsToGenerate);\n  }\n\n  const result = {\n    count: this.numResultsToGenerate,\n    results: []\n  };\n\n  const createResult = function() {\n    const r = {};\n    r[typeName + 'ExtId'] = Math.floor(Math.random() * 3) + 1;\n    r[field.extId] = Math.random();\n    return r;\n  };\n\n  const pageSize = query.limit || 5;\n  const resultsToReturn = Math.min(pageSize, this.numResultsToGenerate - skip);\n  for (let i = 0; i < resultsToReturn; i++) {\n    result.results.push(createResult());\n  }\n\n  return Promise.resolve(result);\n};\n"],"sourceRoot":"/source/"}