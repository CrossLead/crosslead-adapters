{"version":3,"sources":["clAdapters/google-calendar/index.js"],"names":[],"mappings":"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","file":"clAdapters/google-calendar/index.js","sourcesContent":["import googleapis from 'googleapis';\r\nimport moment     from 'moment';\r\nimport _          from 'lodash';\r\nimport { Adapter, Configuration, Service } from '../base/';\r\n\r\n// google calendar api\r\nconst calendar = googleapis.calendar('v3');\r\n\r\nconst credentialMappings = {\r\n  'certificate' : 'private_key',\r\n  'serviceEmail': 'client_email',\r\n  'email'       : 'adminEmail'\r\n}\r\n\r\n\r\nexport default class GoogleCalendarAdapter extends Adapter {\r\n\r\n  static Configuration = Configuration;\r\n  static Service = Service;\r\n\r\n  // convert the names of the api response data\r\n  static fieldNameMap = {\r\n    // Desired...                          // Given...\r\n    'eventId':                             'id',\r\n    'attendees':                           'attendees',\r\n    'dateTimeCreated':                     'created',\r\n    'dateTimeLastModified':                'updated',\r\n    'attendeeAddress':                     'EmailAddress.Address',\r\n    'attendeeName':                        'EmailAddress.Name',\r\n    'iCalUID':                             'iCalUID',\r\n    'location':                            'location',\r\n    'status':                              'status',\r\n    'isCreator':                           'creator.self',\r\n    'isOrganizer':                         'organizer.self',\r\n    'organizerEmail':                      'organizer.email',\r\n    'recurrance':                          'recurrance',\r\n    'responseStatus':                      'responseStatus',\r\n    'dateTimeStart':                       'start.dateTime',\r\n    'dateTimeEnd':                         'end.dateTime',\r\n    'subject':                             'summary',\r\n    'url':                                 'htmlLink',\r\n    'hangoutLink':                         'hangoutLink'\r\n  }\r\n\r\n  // constructor needs to call super\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n\r\n  reset() {\r\n    delete this._config;\r\n    delete this._service;\r\n    return this;\r\n  }\r\n\r\n\r\n  async init() {\r\n\r\n    const { credentials } = this;\r\n\r\n    if (!credentials) {\r\n      throw new Error('credentials required for adapter.');\r\n    }\r\n\r\n    // map Google json keys to keys used in this library\r\n    for (const want in credentialMappings) {\r\n      const alternate = credentialMappings[want];\r\n      if (!credentials[want]) {\r\n        credentials[want] = credentials[alternate];\r\n      }\r\n    }\r\n\r\n    // validate required credential properties\r\n    Object.keys(credentialMappings)\r\n      .forEach(prop => {\r\n        if (!credentials[prop]) {\r\n          throw new Error(`Property ${prop} required in adapter credentials!`);\r\n        }\r\n      });\r\n\r\n    this._config  = new GoogleCalendarAdapter.Configuration(credentials);\r\n    this._service = new GoogleCalendarAdapter.Service(this._config);\r\n\r\n    await this._service.init();\r\n\r\n    const { serviceEmail: email } = credentials;\r\n\r\n    console.log(\r\n      `Successfully initialized google calendar adapter for email: ${email}`\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  // currently doing nothing with fields here, but keeping as placeholder\r\n  async getBatchData(userProfiles=[], filterStartDate, filterEndDate /*, fields */) {\r\n\r\n    const { fieldNameMap } = this.constructor;\r\n\r\n    // api options...\r\n    // https://developers.google.com/google-apps/calendar/v3/\r\n    const opts = {\r\n      alwaysIncludeEmail:   true,\r\n      calendarId:           'primary',\r\n      singleEvents:         true,\r\n      timeMax:              filterEndDate.toISOString(),\r\n      timeMin:              filterStartDate.toISOString(),\r\n      orderBy:              'startTime'\r\n    };\r\n\r\n\r\n    const groupRunStats = {\r\n      success: true,\r\n      runDate: moment().utc().toDate(),\r\n      filterStartDate: filterStartDate,\r\n      filterEndDate: filterEndDate,\r\n      emails: userProfiles\r\n    };\r\n\r\n\r\n    try {\r\n\r\n      // collect events for this group of emails\r\n      const results = await* userProfiles.map(async(userProfile) => {\r\n\r\n        const individualRunStats = {\r\n          filterStartDate,\r\n          filterEndDate,\r\n          ...userProfile,\r\n          success: true,\r\n          runDate: moment().utc().toDate()\r\n        };\r\n\r\n        try {\r\n          // add auth tokens to request\r\n          opts.auth = await this.authorize(userProfile.emailAfterMapping);\r\n\r\n          // function to recurse through pageTokens\r\n          const getEvents = async(data) => {\r\n\r\n            // request first results...\r\n            const results = await new Promise((res, rej) => {\r\n              // add page token if given\r\n              if (data && data.nextPageToken) {\r\n                opts.pageToken = data.nextPageToken;\r\n              }\r\n\r\n              calendar.events.list(\r\n                opts, (err, data) => err ? rej(err) : res(data)\r\n              );\r\n            });\r\n\r\n            // if we already have data being accumulated, add to items\r\n            if (data) {\r\n              data.items.push(...results.items);\r\n            } else {\r\n              data = results;\r\n            }\r\n\r\n            // if there is a token for the next page, continue...\r\n            if (results.nextPageToken) {\r\n              data.nextPageToken = results.nextPageToken;\r\n              return await getEvents(data);\r\n            }\r\n\r\n            return data;\r\n          };\r\n\r\n          const { items } = await getEvents();\r\n\r\n          const data = _.map(items, item => {\r\n\r\n            const out = {};\r\n\r\n            _.each(fieldNameMap, (have, want) => {\r\n              let modified = _.get(item, have);\r\n              if (/^dateTime/.test(want)) {\r\n                modified = new Date(modified);\r\n              }\r\n              if (modified !== undefined) {\r\n                out[want] = modified;\r\n              }\r\n            });\r\n\r\n            out.attendees = _.map(out.attendees, attendee => {\r\n              const { email, responseStatus } = attendee;\r\n              return { address: email, response: responseStatus };\r\n            });\r\n\r\n            return out;\r\n          });\r\n\r\n          // request all events for this user in the given time frame\r\n          return Object.assign(individualRunStats, { data });\r\n\r\n        } catch (error) {\r\n          // if the batch collection failed...\r\n          console.log('GoogleCalendarAdapter.getBatchData Error:', error.stack);\r\n\r\n          let errorMessage = error;\r\n\r\n          if (/invalid_grant/.test(errorMessage.toString())) {\r\n            errorMessage = `Email address: ${email} not found in this Google Calendar account.`;\r\n          }\r\n\r\n          return Object.assign(individualRunStats, {\r\n            errorMessage,\r\n            success: false,\r\n            data: []\r\n          });\r\n        }\r\n\r\n      });\r\n\r\n      return Object.assign(groupRunStats, { results });\r\n    } catch (error) {\r\n      return Object.assign(groupRunStats, {\r\n        errorMessage: error,\r\n        success: false\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n\r\n  async runConnectionTest() {\r\n    const { credentials: { email } } = this;\r\n\r\n    try {\r\n      const data = await this.getBatchData(\r\n        [ { email, emailAfterMapping: email } ],\r\n        moment().toDate(),\r\n        moment().add(-1, 'day').toDate()\r\n      )\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.log(error.stack || error);\r\n      return {\r\n        error,\r\n        success: false\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  async runMessageTest() {\r\n    // TODO: does this need to be different?\r\n    console.warn('Note: runMessageTest() currently calls runConnectionTest()');\r\n    return this.runConnectionTest();\r\n  }\r\n\r\n\r\n  // create authenticated token for api requests for given user\r\n  async authorize(email) {\r\n\r\n    const { credentials: { serviceEmail, certificate } } = this;\r\n\r\n    const auth = new googleapis.auth.JWT(\r\n      // email of google app admin...\r\n      serviceEmail,\r\n      // no need for keyFile...\r\n      null,\r\n      // the private key itself...\r\n      certificate,\r\n      // scopes...\r\n      ['https://www.googleapis.com/auth/calendar.readonly'],\r\n      // the email of the individual we want to authenticate\r\n      // ('sub' property of the json web token)\r\n      email\r\n    );\r\n\r\n    // await authorization\r\n    return new Promise((res, rej) => auth.authorize(err => {\r\n      err ? rej(err) : res(auth);\r\n    }));\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}