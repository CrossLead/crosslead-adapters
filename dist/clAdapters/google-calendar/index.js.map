{"version":3,"sources":["clAdapters/google-calendar/index.js"],"names":[],"mappings":"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","file":"clAdapters/google-calendar/index.js","sourcesContent":["import _              from 'lodash';\nimport crypto         from 'crypto';\nimport moment         from 'moment';\nimport request        from 'request-promise';\nimport querystring    from 'querystring';\nimport BaseAdapter    from './baseAdapter';\nimport Configuration  from './Configuration';\nimport Service        from './Service';\n\n\nexport default class GoogleCalendarAdapter extends BaseAdapter {\n  // no constructor necessary if no new logic...\n\n\n  async init() {\n    this._config = new Configuration(this.credentials);\n    this._service = new Service(this._config);\n\n    await this._service.init();\n\n    console.log(\n      'Successfully initialized gmail adapter for email: %s',\n      this.credentials.email\n    );\n\n    return this;\n  }\n\n\n  reset() {\n    delete this._config;\n    delete this._service;\n  }\n\n\n  async getBatchData(emails, filterStartDate, filterEndDate, additionalFields) {\n    const {\n            clientId,\n            email,\n            serviceEmail,\n            certificate\n          } = this._config.credentials,\n          { apiVersion } = this.options,\n          dataAdapterRunStats = {\n            success: true,\n            runDate: moment().utc().toDate(),\n            filterStartDate,\n            filterEndDate,\n            emails\n          };\n\n    try {\n      //first try to get token for the admin - if that fails, then all will fail\n      await getAccessToken(clientId, serviceEmail, email, certificate);\n\n      dataAdapterRunStats.results = mapEmailData(\n        await* _.map(emails, email => getUserEmails({\n          clientId,\n          serviceEmail,\n          apiVersion,\n          filterStartDate,\n          filterEndDate,\n          additionalFields,\n          privateKey  : certificate,\n          userEmail   : email,\n          result      : { email, filterStartDate, filterEndDate }\n        }))\n      );\n\n      return dataAdapterRunStats;\n    } catch (err) {\n      dataAdapterRunStats.success = false;\n      dataAdapterRunStats.errorMessage = err;\n      console.log('GoogleMail GetBatchData Error: ' + JSON.stringify(err));\n      return dataAdapterRunStats;\n    }\n\n  }\n\n  async runConnectionTest(connectionData) {\n    this._config = new Configuration(connectionData.credentials);\n\n    const filterStartDate = moment().utc().startOf('day').add(-1, 'days').toDate(),\n          filterEndDate = moment().utc().startOf('day').toDate(),\n          data = await this.getBatchData(\n            [this._config.credentials.email],\n            filterStartDate,\n            filterEndDate,\n            ''\n          );\n\n    if (data.success && data.results[0]) {\n      //to see if it really worked, we need to pass in the first result\n      return data.results[0];\n    } else {\n      return data;\n    }\n  }\n\n  async runMessageTest(connectionData) {\n    this._config = new Configuration(connectionData.credentials);\n\n    try {\n      const filterStartDate = moment().utc().startOf('day').add(-1, 'days').toDate(),\n            filterEndDate = moment().utc().startOf('day').toDate(),\n            data = await this.getBatchData(\n              [this._config.credentials.email],\n              filterStartDate,\n              filterEndDate,\n              'Subject,BodyPreview,Body'\n            );\n\n      console.log('runMessageTest worked', data.results[0]);\n    } catch (err) {\n      console.log('runMessageTest Error: ' + JSON.stringify(err));\n    }\n\n  }\n\n}\n\n\nasync function getSingleMessageDetails(messageId, userEmail, token, apiVersion, additionalFields, result) {\n  const fields = additionalFields\n    .replace('BodyPreview', 'snippet')\n    .replace('Body',        'payload(parts)')\n    .replace('Subject',     'payload(parts)');\n\n  result.messageData = JSON.parse(await request({\n    method: 'GET',\n    uri: (\n      'https://www.googleapis.com/gmail/' +\n        'v'           + apiVersion +\n        '/users/'     + userEmail +\n        '/messages/'  + messageId +\n        '?fields=id,threadId,labelIds,payload(headers)' + (fields ? `,${fields}` : '')\n    ),\n    headers : {\n      Authorization: 'Bearer ' + token,\n      Accept: 'application/json;odata.metadata=none'\n    }\n  }));\n\n  //remove subject header\n  if (!/Subject/.test(additionalFields)) {\n    const subjectHeader = _.find(\n      _.get(result, 'messageData.payload.headers'),\n      { name : 'Subject' }\n    );\n\n    if (subjectHeader) {\n      subjectHeader.value = '';\n    }\n  }\n\n  return true;\n};\n\nasync function getAccessToken(clientId, adminEmail, userEmail, privateKey) {\n  const tokenRequestUrl = 'https://www.googleapis.com/oauth2/v3/token',\n        unixEpochTime = Math.floor((new Date()).getTime() / 1000),\n        jwtHeader = {\n          alg: 'RS256',\n          typ: 'JWT'\n        },\n        jwtPayload = {\n          iss: adminEmail,\n          scope: 'https://www.googleapis.com/auth/gmail.readonly',\n          aud: tokenRequestUrl,\n          exp: unixEpochTime + 3600,\n          iat: unixEpochTime,\n          sub: userEmail\n        };\n\n  const encode = header => new Buffer(JSON.stringify(header)).toString('base64'),\n        encodedJwtHeader = encode(jwtHeader),\n        encodedJwtPayload = encode(jwtPayload),\n        stringToSign = [encodedJwtHeader, encodedJwtPayload].join('.'),\n        signer = crypto.createSign('RSA-SHA256');\n\n  signer.update(stringToSign);\n\n  const encodedSignedJwtInfo = signer.sign(privateKey, 'base64'),\n        //define assertion\n        clientAssertion = [encodedJwtHeader, encodedJwtPayload, encodedSignedJwtInfo].join('.'),\n        tokenRequestFormData = {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: clientAssertion\n        };\n\n  const requestData = querystring.stringify(tokenRequestFormData),\n        requestDataLength = requestData.length;\n\n  try {\n    const tokenData = JSON.parse(await request({\n      method: 'POST',\n      port: 443,\n      uri: tokenRequestUrl,\n      body: requestData,\n      multipart: false,\n      headers: {\n        'Content-Length': requestDataLength,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }));\n\n    if (tokenData && tokenData.access_token) {\n      return tokenData.access_token;\n    } else {\n      return Promise.reject('Could not get access token.');\n    }\n  } catch (err) {\n    const tokenData = JSON.parse(JSON.stringify(err));\n    if (tokenData.name === 'StatusCodeError') {\n      const entireMessage = tokenData.message,\n            messageJson = entireMessage.replace(tokenData.statusCode + ' - ', ''),\n            messageData = JSON.parse(messageJson.replace(/\\\"/g,'\"'));\n\n      return Promise.reject(messageData);\n    } else {\n      return Promise.reject(err);\n    }\n  }\n\n};\n\nasync function getUserEmails(opts) {\n\n  const {\n    clientId,\n    serviceEmail,\n    userEmail,\n    privateKey,\n    apiVersion,\n    filterStartDate,\n    filterEndDate,\n    additionalFields,\n    result\n  } = opts;\n\n  try {\n\n    const token = await getAccessToken(clientId, serviceEmail, userEmail, privateKey),\n          emailRequestOptions = {\n            method: 'GET',\n            uri: (\n              'https://www.googleapis.com/gmail/' +\n                  'v' + apiVersion +\n                  '/users/' + userEmail +\n                  '/messages?q=after:'   + filterStartDate.toISOString().substring(0, 10) +\n                         ' AND before: ' + filterEndDate.toISOString().substring(0, 10)\n            ),\n            headers : {\n              Authorization: 'Bearer ' + token,\n              Accept: 'application/json;odata.metadata=none'\n            }\n          };\n\n    result.success = true;\n\n    result.data = {\n      messageList: JSON.parse(await request(emailRequestOptions)),\n      messages: []\n    };\n\n    return await* _.map(result.data.messageList.messages, message => {\n      result.data.messages.push({ messageId: message.id });\n      return getSingleMessageDetails(\n        message.id,\n        userEmail,\n        token,\n        apiVersion,\n        additionalFields,\n        message\n      );\n    })\n\n  } catch (err) {\n\n    result.success = false;\n    if (err.name === 'StatusCodeError') {\n      const entireMessage = err.message,\n            messageJson = entireMessage.replace(err.statusCode + ' - ', ''),\n            messageData = JSON.parse(messageJson.replace(/\\\"/g,'\"'));\n      result.errorMessage = messageData.error.message;\n    } else {\n      result.errorMessage = JSON.stringify(err);\n    }\n    return true;\n\n  }\n\n}\n\nfunction getHeaderValue(message, headerName) {\n  const headerValues = _(message.payload.headers)\n          .filter(header => header.name === headerName)\n          .pluck('value')\n          .value();\n  if (headerValues.length > 0) {\n    return headerValues[0];\n  } else {\n    return null;\n  }\n}\n\n// TODO: try to check if there is actually an email address?\nfunction getEmailAddressObjectFromString(value) {\n  var returnObject = {\n    name: value,\n    address: value\n  };\n\n  if (value && value.indexOf('>') > 0) {\n    var valueArray = value.split(' ');\n    returnObject.address = valueArray[valueArray.length - 1].replace('<', '').replace('>', '');\n    returnObject.name = value.replace(' ' + valueArray[valueArray.length - 1], '');\n  }\n\n  return returnObject;\n};\n\nvar hasLabel = function(message, labelValue) {\n  return message.labelIds.indexOf(labelValue) >= 0;\n};\n\n\nfunction mapEmailData(emailData) {\n  return emailData.map(user => ({\n    email:            user.email,\n    filterStartDate:  user.filterStartDate,\n    filterEndDate:    user.filterEndDate,\n    success:          user.success,\n    errorMessage:     user.errorMessage,\n    data:             !user.success ? [] : user.data.messages.map(cleanMessage)\n  }));\n}\n\n\nfunction cleanMessage(message) {\n\n  const messageData = message.messageData,\n        dateReceived = getHeaderValue(messageData, 'Received');\n\n  if (dateReceived) {\n    var datePartOfValue = dateReceived.split(';')[1];\n    message.dateTimeReceived = moment(new Date(datePartOfValue)).utc().toDate();\n  }\n\n  message.importance = 'Normal';\n  if (hasLabel(messageData, 'IMPORTANT')) {\n    message.importance = 'Important';\n  }\n\n  if (hasLabel(messageData, 'SENT')) {\n    message.folderId = message.folderName = 'Sent Items';\n  } else {\n    message.folderId = message.folderName = 'Inbox';\n  }\n\n  if (_.get(messageData, 'payload.parts.length')) {\n    message.contentType = messageData.payload.parts[0].mimeType;\n    message.body = new Buffer(messageData.payload.parts[0].body.data, 'base64').toString();\n  }\n\n  const addresses = field => getHeaderValue(messageData, field)\n    .split(',')\n    .map(getEmailAddressObjectFromString);\n\n  return _.extend(message, {\n    conversationId:               messageData.threadId,\n    dateTimeSent:                 moment(new Date(getHeaderValue(messageData, 'Date'))).utc().toDate(),\n    categories:                   messageData.labelIds,\n    subject:                      getHeaderValue(messageData, 'Subject'),\n    bodyPreview:                  messageData.snippet,\n    isDeliveryReceiptRequested:   null,\n    isReadReceiptRequested:       null,\n    hasAttachments:               null,\n    isDraft:                      null,\n    isRead:                       hasLabel(messageData, 'READ'),\n    fromAddress:                  getEmailAddressObjectFromString(getHeaderValue(messageData, 'From')).address,\n    fromName:                     getEmailAddressObjectFromString(getHeaderValue(messageData, 'From')).name,\n    toRecipients:                 addresses('To'),\n    ccRecipients:                 addresses('Cc'),\n    bccRecipients:                addresses('Bcc')\n  });\n}\n"],"sourceRoot":"/source/"}