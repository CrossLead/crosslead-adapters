{"version":3,"sources":["clAdapters/google-calendar/index.js"],"names":["googleapis","_","calendar","credentialMappings","GoogleCalendarAdapter","_config","_service","credentials","Error","want","alternate","forEach","prop","Configuration","Service","init","email","serviceEmail","console","log","userProfiles","filterStartDate","filterEndDate","fieldNameMap","constructor","opts","alwaysIncludeEmail","calendarId","singleEvents","timeMax","toISOString","timeMin","orderBy","groupRunStats","success","runDate","utc","toDate","emails","all","map","userProfile","individualRunStats","authorize","emailAfterMapping","auth","getEvents","data","res","rej","nextPageToken","pageToken","events","list","err","d","items","push","out","each","have","modified","get","item","test","Date","undefined","attendeeSelf","find","attendees","attendee","self","responseStatus","address","response","stack","errorMessage","toString","results","getBatchData","add","error","warn","runConnectionTest","certificate","JWT"],"mappings":"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","file":"clAdapters/google-calendar/index.js","sourcesContent":["import * as googleapis from 'googleapis';\nimport moment     from 'moment';\nimport * as _          from 'lodash';\nimport { Adapter, Configuration, Service } from '../base/index';\n\n// google calendar api\nconst calendar = googleapis.calendar('v3');\n\nconst credentialMappings = {\n  'certificate' : 'private_key',\n  'serviceEmail': 'client_email',\n  'email'       : 'adminEmail'\n};\n\n\nexport default class GoogleCalendarAdapter extends Adapter {\n\n  static Configuration = Configuration;\n  static Service = Service;\n\n  // convert the names of the api response data\n  static fieldNameMap = {\n    // Desired...                          // Given...\n    'eventId':                             'id',\n    'attendees':                           'attendees',\n    'dateTimeCreated':                     'created',\n    'dateTimeLastModified':                'updated',\n    'attendeeAddress':                     'EmailAddress.Address',\n    'attendeeName':                        'EmailAddress.Name',\n    'iCalUId':                             'iCalUID',\n    'location':                            'location',\n    'status':                              'status',\n    'isCreator':                           'creator.self',\n    'isOrganizer':                         'organizer.self',\n    'organizerEmail':                      'organizer.email',\n    'recurrance':                          'recurrance',\n    'responseStatus':                      'responseStatus',\n    'dateTimeStart':                       'start.dateTime',\n    'dateTimeEnd':                         'end.dateTime',\n    'subject':                             'summary',\n    'url':                                 'htmlLink',\n    'hangoutLink':                         'hangoutLink',\n    'privacy':                             'visibility'\n  }\n\n  // constructor needs to call super\n  constructor() {\n    super();\n  }\n\n\n  reset() {\n    delete this._config;\n    delete this._service;\n    return this;\n  }\n\n\n  async init() {\n\n    const { credentials } = this;\n\n    if (!credentials) {\n      throw new Error('credentials required for adapter.');\n    }\n\n    // map Google json keys to keys used in this library\n    for (const want in credentialMappings) {\n      const alternate = credentialMappings[want];\n      if (!credentials[want]) {\n        credentials[want] = credentials[alternate];\n      }\n    }\n\n    // validate required credential properties\n    Object.keys(credentialMappings)\n      .forEach(prop => {\n        if (!credentials[prop]) {\n          throw new Error(`Property ${prop} required in adapter credentials!`);\n        }\n      });\n\n    this._config  = new GoogleCalendarAdapter.Configuration(credentials);\n    this._service = new GoogleCalendarAdapter.Service(this._config);\n\n    await this._service.init();\n\n    const { serviceEmail: email } = credentials;\n\n    console.log(\n      `Successfully initialized google calendar adapter for email: ${email}`\n    );\n\n    return this;\n  }\n\n\n  // currently doing nothing with fields here, but keeping as placeholder\n  async getBatchData(userProfiles = [], filterStartDate, filterEndDate /*, fields */) {\n\n    const { fieldNameMap } = this.constructor;\n\n    // api options...\n    // https://developers.google.com/google-apps/calendar/v3/\n    const opts = {\n      alwaysIncludeEmail:   true,\n      calendarId:           'primary',\n      singleEvents:         true,\n      timeMax:              filterEndDate.toISOString(),\n      timeMin:              filterStartDate.toISOString(),\n      orderBy:              'startTime'\n    };\n\n\n    const groupRunStats = {\n      success: true,\n      runDate: moment().utc().toDate(),\n      filterStartDate: filterStartDate,\n      filterEndDate: filterEndDate,\n      emails: userProfiles\n    };\n\n\n    try {\n\n      // collect events for this group of emails\n      const results = await Promise.all(userProfiles.map(async(userProfile) => {\n\n        const individualRunStats = {\n          filterStartDate,\n          filterEndDate,\n          ...userProfile,\n          success: true,\n          runDate: moment().utc().toDate()\n        };\n\n        try {\n          // add auth tokens to request\n          opts.auth = await this.authorize(userProfile.emailAfterMapping);\n\n          // function to recurse through pageTokens\n          const getEvents = async(data) => {\n\n            // request first results...\n            const events = await new Promise((res, rej) => {\n              // add page token if given\n              if (data && data.nextPageToken) {\n                opts.pageToken = data.nextPageToken;\n              }\n\n              calendar.events.list(\n                opts, (err, d) => err ? rej(err) : res(d)\n              );\n            });\n\n            // if we already have data being accumulated, add to items\n            if (data) {\n              data.items.push(...events.items);\n            } else {\n              data = events;\n            }\n\n            // if there is a token for the next page, continue...\n            if (events.nextPageToken) {\n              data.nextPageToken = events.nextPageToken;\n              return await getEvents(data);\n            }\n\n            return data;\n          };\n\n          const { items } = await getEvents();\n\n          const data = _.map(items, item => {\n\n            const out = {};\n\n            _.each(fieldNameMap, (have, want) => {\n              let modified = _.get(item, have);\n              if (/^dateTime/.test(want)) {\n                modified = new Date(modified);\n              }\n              if (modified !== undefined) {\n                out[want] = modified;\n              }\n            });\n\n\n            const attendeeSelf = _.find(out.attendees, (attendee) => {\n              return attendee.self;\n            });\n\n            if (attendeeSelf) {\n              out.responseStatus = attendeeSelf.responseStatus;\n            }\n\n            out.attendees = _.map(out.attendees, attendee => {\n              const { email, responseStatus } = attendee;\n              return { address: email, response: responseStatus };\n            });\n\n            return out;\n          });\n\n          // request all events for this user in the given time frame\n          return Object.assign(individualRunStats, { data });\n\n        } catch (error) {\n          // if the batch collection failed...\n          console.log('GoogleCalendarAdapter.getBatchData Error:', error.stack);\n\n          let errorMessage = error;\n\n          if (/invalid_grant/.test(errorMessage.toString())) {\n            errorMessage = `Email address: ${userProfile.emailAfterMapping} not found in this Google Calendar account.`;\n          }\n\n          return Object.assign(individualRunStats, {\n            errorMessage,\n            success: false,\n            data: []\n          });\n        }\n\n      }));\n\n      return Object.assign(groupRunStats, { results });\n    } catch (error) {\n      return Object.assign(groupRunStats, {\n        errorMessage: error,\n        success: false\n      });\n    }\n\n  }\n\n\n  async runConnectionTest() {\n    const { credentials: { email } } = this;\n\n    try {\n      const data = await this.getBatchData(\n        [ { email, emailAfterMapping: email } ],\n        moment().toDate(),\n        moment().add(-1, 'day').toDate()\n      );\n\n      return data;\n    } catch (error) {\n      console.log(error.stack || error);\n      return {\n        error,\n        success: false\n      };\n    }\n  }\n\n\n  async runMessageTest() {\n    // TODO: does this need to be different?\n    console.warn('Note: runMessageTest() currently calls runConnectionTest()');\n    return this.runConnectionTest();\n  }\n\n\n  // create authenticated token for api requests for given user\n  async authorize(email) {\n\n    const { credentials: { serviceEmail, certificate } } = this;\n\n    const auth = new googleapis.auth.JWT(\n      // email of google app admin...\n      serviceEmail,\n      // no need for keyFile...\n      null,\n      // the private key itself...\n      certificate,\n      // scopes...\n      ['https://www.googleapis.com/auth/calendar.readonly'],\n      // the email of the individual we want to authenticate\n      // ('sub' property of the json web token)\n      email\n    );\n\n    // await authorization\n    return new Promise((res, rej) => auth.authorize(err => {\n      err ? rej(err) : res(auth);\n    }));\n  }\n\n}\n"],"sourceRoot":"/source/"}