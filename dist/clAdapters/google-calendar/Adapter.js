'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var crypto = require('crypto');
var rp = require('request-promise');
var util = require('util');
var BaseAdapter = require('./baseAdapter');
var GoogleMail = require('./google-js.js');
var moment = require('moment');
var querystring = require('querystring');
var _ = require('lodash');

var GoogleAdapter = module.exports = function GoogleAdapter() {
  BaseAdapter.call(this);
};

util.inherits(GoogleAdapter, BaseAdapter);

GoogleAdapter.prototype.init = function () {
  var _this = this;
  this._config = new GoogleMail.Configuration(this.credentials);
  this._service = new GoogleMail.Service(this._config);
  return this._service.init().then(function () /*client*/{
    var msg = 'Successfully initialized gmail adapter for email: %s';
    console.log(msg, _this.credentials.email);
    return _this;
  });
};

GoogleAdapter.prototype.reset = function () {
  delete this._config;
  delete this._service;
};

var getSingleMessageDetails = function getSingleMessageDetails(messageId, userEmail, token, apiVersion, additionalFields, result) {
  var additionalFieldsToQuery = additionalFields.replace('BodyPreview', 'snippet');
  additionalFieldsToQuery = additionalFieldsToQuery.replace('Body', 'payload(parts)');
  additionalFieldsToQuery = additionalFieldsToQuery.replace('Subject', 'payload(parts)');

  if (additionalFieldsToQuery !== '') {
    additionalFieldsToQuery = ',' + additionalFieldsToQuery;
  }

  var messageRequestOptions = {
    method: 'GET',
    uri: 'https://www.googleapis.com/gmail/v' + apiVersion + '/users/' + userEmail + '/messages/' + messageId + '?fields=id,threadId,labelIds,payload(headers)' + additionalFieldsToQuery,
    headers: {
      Authorization: 'Bearer ' + token,
      Accept: 'application/json;odata.metadata=none'
    }
  };
  return rp(messageRequestOptions).then(function (messageDetails) {
    result.messageData = JSON.parse(messageDetails);
    if (additionalFields.indexOf('Subject') === -1) {
      //remove subject header
      if (result.messageData.payload && result.messageData.payload.headers && result.messageData.payload.headers.length > 0) {
        for (var headerIter = 0; headerIter < result.messageData.payload.headers.length; headerIter++) {
          if (result.messageData.payload.headers[headerIter].name === 'Subject') {
            result.messageData.payload.headers[headerIter].value = '';
          }
        }
      }
    }

    return true;
  });
};

var getAccessToken = function getAccessToken(clientId, adminEmail, userEmail, privateKey) {
  var tokenRequestUrl = 'https://www.googleapis.com/oauth2/v3/token';
  var unixEpochTime = Math.floor(new Date().getTime() / 1000);

  var jwtHeader = {
    alg: 'RS256',
    typ: 'JWT'
  };

  var jwtPayload = {
    'iss': adminEmail,
    'scope': 'https://www.googleapis.com/auth/gmail.readonly',
    'aud': tokenRequestUrl,
    'exp': unixEpochTime + 3600,
    'iat': unixEpochTime,
    'sub': userEmail
  };

  var encodedJwtHeader = new Buffer(JSON.stringify(jwtHeader)).toString('base64');
  var encodedJwtPayload = new Buffer(JSON.stringify(jwtPayload)).toString('base64');
  var stringToSign = encodedJwtHeader + '.' + encodedJwtPayload;

  //sign it!
  var signer = crypto.createSign('RSA-SHA256');
  signer.update(stringToSign);

  var encodedSignedJwtInfo = signer.sign(privateKey, 'base64');

  //define assertion
  var clientAssertion = encodedJwtHeader + '.' + encodedJwtPayload + '.' + encodedSignedJwtInfo;

  var tokenRequestFormData = {
    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
    assertion: clientAssertion
  };

  var requestData = querystring.stringify(tokenRequestFormData);
  var requestDataLength = requestData.length;

  var tokenRequestOptions = {
    method: 'POST',
    port: 443,
    uri: tokenRequestUrl,
    body: requestData,
    multipart: false,
    headers: {
      'Content-Length': requestDataLength,
      'Content-Type': 'application/x-www-form-urlencoded'
    }
  };

  return rp(tokenRequestOptions).then(function (body) {
    var tokenData = JSON.parse(body);
    if (tokenData && tokenData.access_token) {
      return tokenData.access_token;
    } else {
      return _Promise.reject('Could not get access token.');
    }
  })['catch'](function (err) {
    var tokenData = JSON.parse(JSON.stringify(err));
    if (tokenData.name === 'StatusCodeError') {
      var entireMessage = tokenData.message;
      var messageJson = entireMessage.replace(tokenData.statusCode + ' - ', '');
      var messageData = JSON.parse(messageJson.replace(new RegExp('\\"', 'g'), '"'));
      //console.log('-----');
      //console.log(messageData);
      return _Promise.reject(messageData);
    } else {
      return _Promise.reject(err);
    }
  });
};

var getUserEmails = function getUserEmails(clientId, serviceEmail, userEmail, privateKey, apiVersion, filterStartDate, filterEndDate, additionalFields, result) {
  var token = '';
  return getAccessToken(clientId, serviceEmail, userEmail, privateKey).then(function (tokenResponse) {
    token = tokenResponse;
    var emailRequestOptions = {
      method: 'GET',
      uri: 'https://www.googleapis.com/gmail/v' + apiVersion + '/users/' + userEmail + '/messages?q=after:' + filterStartDate.toISOString().substring(0, 10) + ' AND before: ' + filterEndDate.toISOString().substring(0, 10),
      headers: {
        Authorization: 'Bearer ' + token,
        Accept: 'application/json;odata.metadata=none'
      }
    };
    return rp(emailRequestOptions);
  }).then(function (body) {
    var messageDetailPromises = [];
    result.success = true;
    result.data = {};
    result.data.messageList = JSON.parse(body);
    result.data.messages = [];

    if (result.data.messageList.messages) {
      for (var messageIter = 0; messageIter < result.data.messageList.messages.length; messageIter++) {
        var messageId = result.data.messageList.messages[messageIter].id;
        result.data.messages.push({ messageId: messageId });
        messageDetailPromises.push(getSingleMessageDetails(messageId, userEmail, token, apiVersion, additionalFields, result.data.messages[messageIter]));
      }
    }

    return _Promise.all(messageDetailPromises);
  })['catch'](function (err) {
    result.success = false;
    if (err.name === 'StatusCodeError') {
      var entireMessage = err.message;
      var messageJson = entireMessage.replace(err.statusCode + ' - ', '');
      var messageData = JSON.parse(messageJson.replace(new RegExp('\\"', 'g'), '"'));
      result.errorMessage = messageData.error.message;
    } else {
      result.errorMessage = JSON.stringify(err);
    }
    return true;
  });
};

var getHeaderValue = function getHeaderValue(message, headerName) {
  var headerValues = _(message.payload.headers).filter(function (header) {
    return header.name === headerName;
  }).pluck('value').value();
  if (headerValues.length > 0) {
    return headerValues[0];
  } else {
    return null;
  }
};

var getEmailAddressObjectFromString = function getEmailAddressObjectFromString(value) {
  var returnObject = {
    name: value,
    address: value
  };

  if (value && value.indexOf('>') > 0) {
    var valueArray = value.split(' ');
    returnObject.address = valueArray[valueArray.length - 1].replace('<', '').replace('>', '');
    returnObject.name = value.replace(' ' + valueArray[valueArray.length - 1], '');
  }

  return returnObject;
};

var convertEmailListToArrayOfEmailAddressObjects = function convertEmailListToArrayOfEmailAddressObjects(emailList) {
  var emailAddressObjectArray = [];
  if (emailList) {
    var emailArray = emailList.split(',');
    for (var emailIter = 0; emailIter < emailArray.length; emailIter++) {
      emailAddressObjectArray.push(getEmailAddressObjectFromString(emailArray[emailIter]));
    }
  }

  return emailAddressObjectArray;
};

var hasLabel = function hasLabel(message, labelValue) {
  return message.labelIds.indexOf(labelValue) >= 0;
};

var mapEmailData = function mapEmailData(emailData) {
  var mappedData = [];

  for (var userIter = 0; userIter < emailData.length; userIter++) {
    var mappedUser = {
      email: emailData[userIter].email,
      filterStartDate: emailData[userIter].filterStartDate,
      filterEndDate: emailData[userIter].filterEndDate,
      data: [],
      success: emailData[userIter].success,
      errorMessage: emailData[userIter].errorMessage
    };

    if (emailData[userIter].success) {
      for (var i = 0; i < emailData[userIter].data['messages'].length; i++) {
        var originalEmailMessage = emailData[userIter].data['messages'][i];
        var mappedEmailMessage = {};

        mappedEmailMessage = originalEmailMessage;
        var messageData = originalEmailMessage.messageData;

        mappedEmailMessage.messageId = originalEmailMessage.messageId;
        mappedEmailMessage.conversationId = messageData.threadId;
        mappedEmailMessage.dateTimeSent = moment(new Date(getHeaderValue(messageData, 'Date'))).utc().toDate();

        var dateReceived = getHeaderValue(messageData, 'Received');
        if (dateReceived) {
          var datePartOfValue = dateReceived.split(';')[1];
          mappedEmailMessage.dateTimeReceived = moment(new Date(datePartOfValue)).utc().toDate();
        }

        mappedEmailMessage.importance = 'Normal';
        if (hasLabel(messageData, 'IMPORTANT')) {
          mappedEmailMessage.importance = 'Important';
        }

        mappedEmailMessage.categories = messageData.labelIds;

        if (hasLabel(messageData, 'SENT')) {
          mappedEmailMessage.folderId = 'Sent Items';
          mappedEmailMessage.folderName = 'Sent Items';
        } else {
          mappedEmailMessage.folderId = 'Inbox';
          mappedEmailMessage.folderName = 'Inbox';
        }

        mappedEmailMessage.subject = getHeaderValue(messageData, 'Subject');
        mappedEmailMessage.bodyPreview = messageData.snippet;

        if (messageData.payload.parts && messageData.payload.parts.length > 0) {
          mappedEmailMessage.contentType = messageData.payload.parts[0].mimeType;
          mappedEmailMessage.body = new Buffer(messageData.payload.parts[0].body.data, 'base64').toString();
        }

        mappedEmailMessage.isDeliveryReceiptRequested = null;
        mappedEmailMessage.isReadReceiptRequested = null;
        mappedEmailMessage.hasAttachments = null;
        mappedEmailMessage.isDraft = null;
        mappedEmailMessage.isRead = hasLabel(messageData, 'READ');

        mappedEmailMessage.fromAddress = getEmailAddressObjectFromString(getHeaderValue(messageData, 'From')).address;
        mappedEmailMessage.fromName = getEmailAddressObjectFromString(getHeaderValue(messageData, 'From')).name;

        mappedEmailMessage.toRecipients = convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData, 'To'));
        mappedEmailMessage.ccRecipients = convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData, 'Cc'));
        mappedEmailMessage.bccRecipients = convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData, 'Bcc'));

        mappedUser.data.push(mappedEmailMessage);
      }
    }
    mappedData.push(mappedUser);
  }

  return mappedData;
};

var getEmailData = function getEmailData(emails, filterStartDate, filterEndDate, additionalFields, clientId, serviceEmail, privateKey, apiVersion) {
  var emailResults = [];
  var emailResultPromises = [];
  var emailIter = 0;
  for (emailIter = 0; emailIter < emails.length; emailIter++) {
    emailResults[emailIter] = { email: emails[emailIter], filterStartDate: filterStartDate, filterEndDate: filterEndDate };
    emailResultPromises.push(getUserEmails(clientId, serviceEmail, emails[emailIter], privateKey, apiVersion, filterStartDate, filterEndDate, additionalFields, emailResults[emailIter]));
  }

  return _Promise.all(emailResultPromises).then(function () {
    return emailResults;
  });
};

GoogleAdapter.prototype.getBatchData = function (emails, filterStartDate, filterEndDate, additionalFields) {
  var clientId = this._config.credentials.clientId;
  var clientEmail = this._config.credentials.email;
  var serviceEmail = this._config.credentials.serviceEmail;
  var privateKey = this._config.credentials.certificate;
  var apiVersion = this._config.options.apiVersion;

  var dataAdapterRunStats = {
    success: true,
    runDate: moment().utc().toDate(),
    filterStartDate: filterStartDate,
    filterEndDate: filterEndDate,
    emails: emails
  };

  //first try to get token for the admin - if that fails, then all will fail
  return getAccessToken(clientId, serviceEmail, clientEmail, privateKey).then(function () {
    return getEmailData(emails, filterStartDate, filterEndDate, additionalFields, clientId, serviceEmail, privateKey, apiVersion);
  }).then(function (emailData) {
    return mapEmailData(emailData);
  }).then(function (mappedEmailData) {
    dataAdapterRunStats.results = mappedEmailData;
    return dataAdapterRunStats;
  })['catch'](function (err) {
    dataAdapterRunStats.success = false;
    dataAdapterRunStats.errorMessage = err;
    console.log('GoogleMail GetBatchData Error: ' + JSON.stringify(err));
    return dataAdapterRunStats;
  });
};

GoogleAdapter.prototype.runConnectionTest = function (connectionData) {
  var _this = this;
  _this._config = new GoogleMail.Configuration(connectionData.credentials);
  var filterStartDate = moment().utc().startOf('day').add(-1, 'days').toDate();
  var filterEndDate = moment().utc().startOf('day').toDate();
  return _this.getBatchData([_this._config.credentials.email], filterStartDate, filterEndDate, '').then(function (data) {
    if (data.success && data.results[0]) {
      //to see if it really worked, we need to pass in the first result
      return data.results[0];
    } else {
      return data;
    }
  });
};

GoogleAdapter.prototype.runMessageTest = function (connectionData) {
  var _this = this;
  _this._config = new GoogleMail.Configuration(connectionData.credentials);
  var filterStartDate = moment().utc().startOf('day').add(-1, 'days').toDate();
  var filterEndDate = moment().utc().startOf('day').add(1, 'days').toDate();
  return _this.getBatchData([_this._config.credentials.email], filterStartDate, filterEndDate, 'Subject,BodyPreview,Body').then(function (data) {
    console.log('runMessageTest worked');
    console.log(data.results[0]);
  })['catch'](function (err) {
    console.log('runMessageTest Error: ' + JSON.stringify(err));
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsQWRhcHRlcnMvZ29vZ2xlLWNhbGVuZGFyL0FkYXB0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O0FBR2IsSUFBSSxNQUFNLEdBQVEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3BDLElBQUksRUFBRSxHQUFZLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzdDLElBQUksSUFBSSxHQUFVLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsQyxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDM0MsSUFBSSxVQUFVLEdBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDNUMsSUFBSSxNQUFNLEdBQVEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3BDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6QyxJQUFJLENBQUMsR0FBYSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7O0FBRXBDLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxhQUFhLEdBQUc7QUFDNUQsYUFBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN4QixDQUFDOztBQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDOztBQUUxQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxZQUFXO0FBQ3hDLE1BQUksS0FBSyxHQUFHLElBQUksQ0FBQztBQUNqQixNQUFJLENBQUMsT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDOUQsTUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELFNBQU8sSUFBSSxDQUFDLFFBQVEsQ0FDakIsSUFBSSxFQUFFLENBQ04sSUFBSSxDQUFDLHNCQUF1QjtBQUMzQixRQUFJLEdBQUcsR0FBRyxzREFBc0QsQ0FBQztBQUNqRSxXQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLFdBQU8sS0FBSyxDQUFDO0dBQ2QsQ0FBQyxDQUFDO0NBQ04sQ0FBQzs7QUFFRixhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxZQUFXO0FBQ3pDLFNBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNwQixTQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7Q0FDdEIsQ0FBQzs7QUFFRixJQUFJLHVCQUF1QixHQUFHLFNBQTFCLHVCQUF1QixDQUFZLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUU7QUFDeEcsTUFBSSx1QkFBdUIsR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2pGLHlCQUF1QixHQUFHLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUNwRix5QkFBdUIsR0FBRyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGdCQUFnQixDQUFDLENBQUM7O0FBRXZGLE1BQUksdUJBQXVCLEtBQUssRUFBRSxFQUFFO0FBQ2xDLDJCQUF1QixHQUFHLEdBQUcsR0FBRyx1QkFBdUIsQ0FBQztHQUN6RDs7QUFFRCxNQUFJLHFCQUFxQixHQUFHO0FBQzFCLFVBQU0sRUFBRSxLQUFLO0FBQ2IsT0FBRyxFQUFFLG9DQUFvQyxHQUFHLFVBQVUsR0FBRyxTQUFTLEdBQUcsU0FBUyxHQUFHLFlBQVksR0FBRyxTQUFTLEdBQUcsK0NBQStDLEdBQUcsdUJBQXVCO0FBQ3JMLFdBQU8sRUFBRztBQUNSLG1CQUFhLEVBQUUsU0FBUyxHQUFHLEtBQUs7QUFDaEMsWUFBTSxFQUFFLHNDQUFzQztLQUMvQztHQUNGLENBQUM7QUFDRixTQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUMvQixJQUFJLENBQUMsVUFBUyxjQUFjLEVBQUU7QUFDN0IsVUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ2hELFFBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFOztBQUU5QyxVQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUNySCxhQUFLLElBQUksVUFBVSxHQUFHLENBQUMsRUFBRSxVQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRTtBQUM3RixjQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQ3JFLGtCQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztXQUMzRDtTQUNGO09BQ0Y7S0FDRjs7QUFFRCxXQUFPLElBQUksQ0FBQztHQUNiLENBQUMsQ0FBQztDQUNKLENBQUM7O0FBRUYsSUFBSSxjQUFjLEdBQUcsU0FBakIsY0FBYyxDQUFZLFFBQVEsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRTtBQUN6RSxNQUFJLGVBQWUsR0FBRyw0Q0FBNEMsQ0FBQztBQUNuRSxNQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEFBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQzs7QUFFOUQsTUFBSSxTQUFTLEdBQUc7QUFDZCxPQUFHLEVBQUUsT0FBTztBQUNaLE9BQUcsRUFBRSxLQUFLO0dBQ1gsQ0FBQzs7QUFFRixNQUFJLFVBQVUsR0FBRztBQUNmLFNBQUssRUFBRSxVQUFVO0FBQ2pCLFdBQU8sRUFBRSxnREFBZ0Q7QUFDekQsU0FBSyxFQUFFLGVBQWU7QUFDdEIsU0FBSyxFQUFFLGFBQWEsR0FBRyxJQUFJO0FBQzNCLFNBQUssRUFBRSxhQUFhO0FBQ3BCLFNBQUssRUFBRSxTQUFTO0dBQ2pCLENBQUM7O0FBRUYsTUFBSSxnQkFBZ0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2hGLE1BQUksaUJBQWlCLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNsRixNQUFJLFlBQVksR0FBRyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsaUJBQWlCLENBQUM7OztBQUc5RCxNQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzdDLFFBQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRTVCLE1BQUksb0JBQW9CLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7OztBQUc3RCxNQUFJLGVBQWUsR0FBRyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsaUJBQWlCLEdBQUcsR0FBRyxHQUFHLG9CQUFvQixDQUFDOztBQUU5RixNQUFJLG9CQUFvQixHQUFHO0FBQ3pCLGNBQVUsRUFBRSw2Q0FBNkM7QUFDekQsYUFBUyxFQUFFLGVBQWU7R0FDM0IsQ0FBQzs7QUFFRixNQUFJLFdBQVcsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDOUQsTUFBSSxpQkFBaUIsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDOztBQUUzQyxNQUFJLG1CQUFtQixHQUFHO0FBQ3hCLFVBQU0sRUFBRSxNQUFNO0FBQ2QsUUFBSSxFQUFFLEdBQUc7QUFDVCxPQUFHLEVBQUUsZUFBZTtBQUNwQixRQUFJLEVBQUUsV0FBVztBQUNqQixhQUFTLEVBQUUsS0FBSztBQUNoQixXQUFPLEVBQUU7QUFDUCxzQkFBZ0IsRUFBRSxpQkFBaUI7QUFDbkMsb0JBQWMsRUFBRSxtQ0FBbUM7S0FDcEQ7R0FDRixDQUFDOztBQUVGLFNBQU8sRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQzdCLElBQUksQ0FBQyxVQUFTLElBQUksRUFBRTtBQUNuQixRQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFFBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEVBQUU7QUFDdkMsYUFBTyxTQUFTLENBQUMsWUFBWSxDQUFDO0tBQy9CLE1BQU07QUFDTCxhQUFPLFNBQVEsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUM7S0FDdEQ7R0FDRixDQUFDLFNBQ0ksQ0FBQyxVQUFTLEdBQUcsRUFBRTtBQUNuQixRQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoRCxRQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssaUJBQWlCLEVBQUU7QUFDeEMsVUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUN0QyxVQUFJLFdBQVcsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzFFLFVBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7O0FBRzlFLGFBQU8sU0FBUSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDcEMsTUFBTTtBQUNMLGFBQU8sU0FBUSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUI7R0FDRixDQUFDLENBQUM7Q0FDSixDQUFDOztBQUVGLElBQUksYUFBYSxHQUFHLFNBQWhCLGFBQWEsQ0FBWSxRQUFRLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFO0FBQ2hKLE1BQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNmLFNBQU8sY0FBYyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUNuRSxJQUFJLENBQUMsVUFBUyxhQUFhLEVBQUU7QUFDNUIsU0FBSyxHQUFHLGFBQWEsQ0FBQztBQUN0QixRQUFJLG1CQUFtQixHQUFHO0FBQ3hCLFlBQU0sRUFBRSxLQUFLO0FBQ2IsU0FBRyxFQUFFLG9DQUFvQyxHQUFHLFVBQVUsR0FBRyxTQUFTLEdBQUcsU0FBUyxHQUFHLG9CQUFvQixHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLGVBQWUsR0FBRyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDdk4sYUFBTyxFQUFHO0FBQ1IscUJBQWEsRUFBRSxTQUFTLEdBQUcsS0FBSztBQUNoQyxjQUFNLEVBQUUsc0NBQXNDO09BQy9DO0tBQ0YsQ0FBQztBQUNGLFdBQU8sRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUM7R0FDaEMsQ0FBQyxDQUNELElBQUksQ0FBQyxVQUFTLElBQUksRUFBRTtBQUNuQixRQUFJLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUMvQixVQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUN0QixVQUFNLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNqQixVQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNDLFVBQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQzs7QUFFMUIsUUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUU7QUFDcEMsV0FBSyxJQUFJLFdBQVcsR0FBRyxDQUFDLEVBQUUsV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLEVBQUU7QUFDOUYsWUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNqRSxjQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztBQUNsRCw2QkFBcUIsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNuSjtLQUNGOztBQUVELFdBQU8sU0FBUSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztHQUMzQyxDQUFDLFNBQ0ksQ0FBQyxVQUFTLEdBQUcsRUFBRTtBQUNuQixVQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN2QixRQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssaUJBQWlCLEVBQUU7QUFDbEMsVUFBSSxhQUFhLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztBQUNoQyxVQUFJLFdBQVcsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM5RSxZQUFNLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0tBQ2pELE1BQU07QUFDTCxZQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDM0M7QUFDRCxXQUFPLElBQUksQ0FBQztHQUNiLENBQUMsQ0FBQztDQUNKLENBQUM7O0FBRUYsSUFBSSxjQUFjLEdBQUcsU0FBakIsY0FBYyxDQUFZLE9BQU8sRUFBRSxVQUFVLEVBQUU7QUFDakQsTUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQ3BDLE1BQU0sQ0FBQyxVQUFTLE1BQU0sRUFBRTtBQUFFLFdBQU8sTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUM7R0FBRSxDQUFDLENBQy9ELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FDZCxLQUFLLEVBQUUsQ0FBQztBQUNqQixNQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQzNCLFdBQU8sWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3hCLE1BQU07QUFDTCxXQUFPLElBQUksQ0FBQztHQUNiO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLCtCQUErQixHQUFHLFNBQWxDLCtCQUErQixDQUFZLEtBQUssRUFBRTtBQUNwRCxNQUFJLFlBQVksR0FBRztBQUNqQixRQUFJLEVBQUUsS0FBSztBQUNYLFdBQU8sRUFBRSxLQUFLO0dBQ2YsQ0FBQzs7QUFFRixNQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQyxRQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLGdCQUFZLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMzRixnQkFBWSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztHQUNoRjs7QUFFRCxTQUFPLFlBQVksQ0FBQztDQUNyQixDQUFDOztBQUVGLElBQUksNENBQTRDLEdBQUcsU0FBL0MsNENBQTRDLENBQVksU0FBUyxFQUFFO0FBQ3JFLE1BQUksdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQ2pDLE1BQUksU0FBUyxFQUFFO0FBQ2IsUUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QyxTQUFLLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsRUFBRTtBQUNsRSw2QkFBdUIsQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0RjtHQUNGOztBQUVELFNBQU8sdUJBQXVCLENBQUM7Q0FDaEMsQ0FBQzs7QUFFRixJQUFJLFFBQVEsR0FBRyxTQUFYLFFBQVEsQ0FBWSxPQUFPLEVBQUUsVUFBVSxFQUFFO0FBQzNDLFNBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ2xELENBQUM7O0FBRUYsSUFBSSxZQUFZLEdBQUcsU0FBZixZQUFZLENBQVksU0FBUyxFQUFFO0FBQ3JDLE1BQUksVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFcEIsT0FBSyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUU7QUFDOUQsUUFBSSxVQUFVLEdBQUc7QUFDZixXQUFLLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUs7QUFDaEMscUJBQWUsRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsZUFBZTtBQUNwRCxtQkFBYSxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhO0FBQ2hELFVBQUksRUFBRSxFQUFFO0FBQ1IsYUFBTyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPO0FBQ3BDLGtCQUFZLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVk7S0FDL0MsQ0FBQzs7QUFFRixRQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUU7QUFDL0IsV0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3BFLFlBQUksb0JBQW9CLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRSxZQUFJLGtCQUFrQixHQUFHLEVBQUUsQ0FBQzs7QUFFNUIsMEJBQWtCLEdBQUcsb0JBQW9CLENBQUM7QUFDMUMsWUFBSSxXQUFXLEdBQUcsb0JBQW9CLENBQUMsV0FBVyxDQUFDOztBQUVuRCwwQkFBa0IsQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDO0FBQzlELDBCQUFrQixDQUFDLGNBQWMsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO0FBQ3pELDBCQUFrQixDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7O0FBRXZHLFlBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0QsWUFBSSxZQUFZLEVBQUU7QUFDaEIsY0FBSSxlQUFlLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRCw0QkFBa0IsQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN4Rjs7QUFFRCwwQkFBa0IsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO0FBQ3pDLFlBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsRUFBRTtBQUN0Qyw0QkFBa0IsQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO1NBQzdDOztBQUVELDBCQUFrQixDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDOztBQUVyRCxZQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEVBQUU7QUFDakMsNEJBQWtCLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztBQUMzQyw0QkFBa0IsQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDO1NBQzlDLE1BQU07QUFDTCw0QkFBa0IsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0FBQ3RDLDRCQUFrQixDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUM7U0FDekM7O0FBRUQsMEJBQWtCLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDcEUsMEJBQWtCLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7O0FBRXJELFlBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUNyRSw0QkFBa0IsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3ZFLDRCQUFrQixDQUFDLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ25HOztBQUVELDBCQUFrQixDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQztBQUNyRCwwQkFBa0IsQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUM7QUFDakQsMEJBQWtCLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztBQUN6QywwQkFBa0IsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ2xDLDBCQUFrQixDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDOztBQUUxRCwwQkFBa0IsQ0FBQyxXQUFXLEdBQUcsK0JBQStCLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUM5RywwQkFBa0IsQ0FBQyxRQUFRLEdBQUcsK0JBQStCLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFeEcsMEJBQWtCLENBQUMsWUFBWSxHQUFHLDRDQUE0QyxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNsSCwwQkFBa0IsQ0FBQyxZQUFZLEdBQUcsNENBQTRDLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2xILDBCQUFrQixDQUFDLGFBQWEsR0FBRyw0Q0FBNEMsQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7O0FBRXBILGtCQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO09BQzFDO0tBQ0Y7QUFDRCxjQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQzdCOztBQUVELFNBQU8sVUFBVSxDQUFDO0NBQ25CLENBQUM7O0FBRUYsSUFBSSxZQUFZLEdBQUcsU0FBZixZQUFZLENBQVksTUFBTSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0FBQ3BJLE1BQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUN0QixNQUFJLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztBQUM3QixNQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDbEIsT0FBSyxTQUFTLEdBQUcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxFQUFFO0FBQzFELGdCQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBQyxDQUFDO0FBQ3JILHVCQUFtQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDdkw7O0FBRUQsU0FBTyxTQUFRLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUN0QyxJQUFJLENBQUMsWUFBVztBQUNmLFdBQU8sWUFBWSxDQUFDO0dBQ3JCLENBQUMsQ0FBQztDQUNKLENBQUM7O0FBRUYsYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsVUFBUyxNQUFNLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRTtBQUN4RyxNQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7QUFDakQsTUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO0FBQ2pELE1BQUksWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQztBQUN6RCxNQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUM7QUFDdEQsTUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDOztBQUVqRCxNQUFJLG1CQUFtQixHQUFHO0FBQ3hCLFdBQU8sRUFBRSxJQUFJO0FBQ2IsV0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRTtBQUNoQyxtQkFBZSxFQUFFLGVBQWU7QUFDaEMsaUJBQWEsRUFBRSxhQUFhO0FBQzVCLFVBQU0sRUFBRSxNQUFNO0dBQ2YsQ0FBQzs7O0FBR0YsU0FBTyxjQUFjLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQ3JFLElBQUksQ0FBQyxZQUFXO0FBQ2YsV0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7R0FDL0gsQ0FBQyxDQUNELElBQUksQ0FBQyxVQUFTLFNBQVMsRUFBRTtBQUN4QixXQUFPLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUNoQyxDQUFDLENBQ0QsSUFBSSxDQUFDLFVBQVMsZUFBZSxFQUFFO0FBQzlCLHVCQUFtQixDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUM7QUFDOUMsV0FBTyxtQkFBbUIsQ0FBQztHQUM1QixDQUFDLFNBQ0ksQ0FBQyxVQUFTLEdBQUcsRUFBRTtBQUNuQix1QkFBbUIsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3BDLHVCQUFtQixDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7QUFDdkMsV0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDckUsV0FBTyxtQkFBbUIsQ0FBQztHQUM1QixDQUFDLENBQUM7Q0FDSixDQUFDOztBQUVGLGFBQWEsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsVUFBUyxjQUFjLEVBQUU7QUFDbkUsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLE9BQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN6RSxNQUFJLGVBQWUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQzdFLE1BQUksYUFBYSxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMzRCxTQUFPLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUMvRixJQUFJLENBQUMsVUFBUyxJQUFJLEVBQUU7QUFDbkIsUUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7O0FBRW5DLGFBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4QixNQUFNO0FBQ0wsYUFBTyxJQUFJLENBQUM7S0FDYjtHQUNGLENBQUMsQ0FBQztDQUNKLENBQUM7O0FBRUYsYUFBYSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBUyxjQUFjLEVBQUU7QUFDaEUsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLE9BQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN6RSxNQUFJLGVBQWUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQzdFLE1BQUksYUFBYSxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQzFFLFNBQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsMEJBQTBCLENBQUMsQ0FDdkgsSUFBSSxDQUFDLFVBQVMsSUFBSSxFQUFFO0FBQ25CLFdBQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNyQyxXQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUM5QixDQUFDLFNBQ0ksQ0FBQyxVQUFTLEdBQUcsRUFBRTtBQUNuQixXQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUM3RCxDQUFDLENBQUM7Q0FDSixDQUFDIiwiZmlsZSI6ImNsQWRhcHRlcnMvZ29vZ2xlLWNhbGVuZGFyL0FkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIGNyeXB0byAgICAgID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgcnAgICAgICAgICAgPSByZXF1aXJlKCdyZXF1ZXN0LXByb21pc2UnKTtcbnZhciB1dGlsICAgICAgICA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBCYXNlQWRhcHRlciA9IHJlcXVpcmUoJy4vYmFzZUFkYXB0ZXInKTtcbnZhciBHb29nbGVNYWlsICA9IHJlcXVpcmUoJy4vZ29vZ2xlLWpzLmpzJyk7XG52YXIgbW9tZW50ICAgICAgPSByZXF1aXJlKCdtb21lbnQnKTtcbnZhciBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG52YXIgXyAgICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxudmFyIEdvb2dsZUFkYXB0ZXIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdvb2dsZUFkYXB0ZXIoKSB7XG4gIEJhc2VBZGFwdGVyLmNhbGwodGhpcyk7XG59O1xuXG51dGlsLmluaGVyaXRzKEdvb2dsZUFkYXB0ZXIsIEJhc2VBZGFwdGVyKTtcblxuR29vZ2xlQWRhcHRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICB0aGlzLl9jb25maWcgPSBuZXcgR29vZ2xlTWFpbC5Db25maWd1cmF0aW9uKHRoaXMuY3JlZGVudGlhbHMpO1xuICB0aGlzLl9zZXJ2aWNlID0gbmV3IEdvb2dsZU1haWwuU2VydmljZSh0aGlzLl9jb25maWcpO1xuICByZXR1cm4gdGhpcy5fc2VydmljZVxuICAgIC5pbml0KClcbiAgICAudGhlbihmdW5jdGlvbiggLypjbGllbnQqLyApIHtcbiAgICAgIHZhciBtc2cgPSAnU3VjY2Vzc2Z1bGx5IGluaXRpYWxpemVkIGdtYWlsIGFkYXB0ZXIgZm9yIGVtYWlsOiAlcyc7XG4gICAgICBjb25zb2xlLmxvZyhtc2csIF90aGlzLmNyZWRlbnRpYWxzLmVtYWlsKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9KTtcbn07XG5cbkdvb2dsZUFkYXB0ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9jb25maWc7XG4gIGRlbGV0ZSB0aGlzLl9zZXJ2aWNlO1xufTtcblxudmFyIGdldFNpbmdsZU1lc3NhZ2VEZXRhaWxzID0gZnVuY3Rpb24obWVzc2FnZUlkLCB1c2VyRW1haWwsIHRva2VuLCBhcGlWZXJzaW9uLCBhZGRpdGlvbmFsRmllbGRzLCByZXN1bHQpIHtcbiAgdmFyIGFkZGl0aW9uYWxGaWVsZHNUb1F1ZXJ5ID0gYWRkaXRpb25hbEZpZWxkcy5yZXBsYWNlKCdCb2R5UHJldmlldycsICdzbmlwcGV0Jyk7XG4gIGFkZGl0aW9uYWxGaWVsZHNUb1F1ZXJ5ID0gYWRkaXRpb25hbEZpZWxkc1RvUXVlcnkucmVwbGFjZSgnQm9keScsICdwYXlsb2FkKHBhcnRzKScpO1xuICBhZGRpdGlvbmFsRmllbGRzVG9RdWVyeSA9IGFkZGl0aW9uYWxGaWVsZHNUb1F1ZXJ5LnJlcGxhY2UoJ1N1YmplY3QnLCAncGF5bG9hZChwYXJ0cyknKTtcblxuICBpZiAoYWRkaXRpb25hbEZpZWxkc1RvUXVlcnkgIT09ICcnKSB7XG4gICAgYWRkaXRpb25hbEZpZWxkc1RvUXVlcnkgPSAnLCcgKyBhZGRpdGlvbmFsRmllbGRzVG9RdWVyeTtcbiAgfVxuXG4gIHZhciBtZXNzYWdlUmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmk6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9nbWFpbC92JyArIGFwaVZlcnNpb24gKyAnL3VzZXJzLycgKyB1c2VyRW1haWwgKyAnL21lc3NhZ2VzLycgKyBtZXNzYWdlSWQgKyAnP2ZpZWxkcz1pZCx0aHJlYWRJZCxsYWJlbElkcyxwYXlsb2FkKGhlYWRlcnMpJyArIGFkZGl0aW9uYWxGaWVsZHNUb1F1ZXJ5LFxuICAgIGhlYWRlcnMgOiB7XG4gICAgICBBdXRob3JpemF0aW9uOiAnQmVhcmVyICcgKyB0b2tlbixcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb247b2RhdGEubWV0YWRhdGE9bm9uZSdcbiAgICB9XG4gIH07XG4gIHJldHVybiBycChtZXNzYWdlUmVxdWVzdE9wdGlvbnMpXG4gIC50aGVuKGZ1bmN0aW9uKG1lc3NhZ2VEZXRhaWxzKSB7XG4gICAgcmVzdWx0Lm1lc3NhZ2VEYXRhID0gSlNPTi5wYXJzZShtZXNzYWdlRGV0YWlscyk7XG4gICAgaWYgKGFkZGl0aW9uYWxGaWVsZHMuaW5kZXhPZignU3ViamVjdCcpID09PSAtMSkge1xuICAgICAgLy9yZW1vdmUgc3ViamVjdCBoZWFkZXJcbiAgICAgIGlmIChyZXN1bHQubWVzc2FnZURhdGEucGF5bG9hZCAmJiByZXN1bHQubWVzc2FnZURhdGEucGF5bG9hZC5oZWFkZXJzICYmIHJlc3VsdC5tZXNzYWdlRGF0YS5wYXlsb2FkLmhlYWRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBoZWFkZXJJdGVyID0gMDsgaGVhZGVySXRlciA8IHJlc3VsdC5tZXNzYWdlRGF0YS5wYXlsb2FkLmhlYWRlcnMubGVuZ3RoOyBoZWFkZXJJdGVyKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0Lm1lc3NhZ2VEYXRhLnBheWxvYWQuaGVhZGVyc1toZWFkZXJJdGVyXS5uYW1lID09PSAnU3ViamVjdCcpIHtcbiAgICAgICAgICAgIHJlc3VsdC5tZXNzYWdlRGF0YS5wYXlsb2FkLmhlYWRlcnNbaGVhZGVySXRlcl0udmFsdWUgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59O1xuXG52YXIgZ2V0QWNjZXNzVG9rZW4gPSBmdW5jdGlvbihjbGllbnRJZCwgYWRtaW5FbWFpbCwgdXNlckVtYWlsLCBwcml2YXRlS2V5KSB7XG4gIHZhciB0b2tlblJlcXVlc3RVcmwgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuJztcbiAgdmFyIHVuaXhFcG9jaFRpbWUgPSBNYXRoLmZsb29yKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKTtcblxuICB2YXIgand0SGVhZGVyID0ge1xuICAgIGFsZzogJ1JTMjU2JyxcbiAgICB0eXA6ICdKV1QnXG4gIH07XG5cbiAgdmFyIGp3dFBheWxvYWQgPSB7XG4gICAgJ2lzcyc6IGFkbWluRW1haWwsXG4gICAgJ3Njb3BlJzogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZ21haWwucmVhZG9ubHknLFxuICAgICdhdWQnOiB0b2tlblJlcXVlc3RVcmwsXG4gICAgJ2V4cCc6IHVuaXhFcG9jaFRpbWUgKyAzNjAwLFxuICAgICdpYXQnOiB1bml4RXBvY2hUaW1lLFxuICAgICdzdWInOiB1c2VyRW1haWxcbiAgfTtcblxuICB2YXIgZW5jb2RlZEp3dEhlYWRlciA9IG5ldyBCdWZmZXIoSlNPTi5zdHJpbmdpZnkoand0SGVhZGVyKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB2YXIgZW5jb2RlZEp3dFBheWxvYWQgPSBuZXcgQnVmZmVyKEpTT04uc3RyaW5naWZ5KGp3dFBheWxvYWQpKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIHZhciBzdHJpbmdUb1NpZ24gPSBlbmNvZGVkSnd0SGVhZGVyICsgJy4nICsgZW5jb2RlZEp3dFBheWxvYWQ7XG5cbiAgLy9zaWduIGl0IVxuICB2YXIgc2lnbmVyID0gY3J5cHRvLmNyZWF0ZVNpZ24oJ1JTQS1TSEEyNTYnKTtcbiAgc2lnbmVyLnVwZGF0ZShzdHJpbmdUb1NpZ24pO1xuXG4gIHZhciBlbmNvZGVkU2lnbmVkSnd0SW5mbyA9IHNpZ25lci5zaWduKHByaXZhdGVLZXksICdiYXNlNjQnKTtcblxuICAvL2RlZmluZSBhc3NlcnRpb25cbiAgdmFyIGNsaWVudEFzc2VydGlvbiA9IGVuY29kZWRKd3RIZWFkZXIgKyAnLicgKyBlbmNvZGVkSnd0UGF5bG9hZCArICcuJyArIGVuY29kZWRTaWduZWRKd3RJbmZvO1xuXG4gIHZhciB0b2tlblJlcXVlc3RGb3JtRGF0YSA9IHtcbiAgICBncmFudF90eXBlOiAndXJuOmlldGY6cGFyYW1zOm9hdXRoOmdyYW50LXR5cGU6and0LWJlYXJlcicsXG4gICAgYXNzZXJ0aW9uOiBjbGllbnRBc3NlcnRpb25cbiAgfTtcblxuICB2YXIgcmVxdWVzdERhdGEgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodG9rZW5SZXF1ZXN0Rm9ybURhdGEpO1xuICB2YXIgcmVxdWVzdERhdGFMZW5ndGggPSByZXF1ZXN0RGF0YS5sZW5ndGg7XG5cbiAgdmFyIHRva2VuUmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgcG9ydDogNDQzLFxuICAgIHVyaTogdG9rZW5SZXF1ZXN0VXJsLFxuICAgIGJvZHk6IHJlcXVlc3REYXRhLFxuICAgIG11bHRpcGFydDogZmFsc2UsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogcmVxdWVzdERhdGFMZW5ndGgsXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHJwKHRva2VuUmVxdWVzdE9wdGlvbnMpXG4gIC50aGVuKGZ1bmN0aW9uKGJvZHkpIHtcbiAgICB2YXIgdG9rZW5EYXRhID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICBpZiAodG9rZW5EYXRhICYmIHRva2VuRGF0YS5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgIHJldHVybiB0b2tlbkRhdGEuYWNjZXNzX3Rva2VuO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0NvdWxkIG5vdCBnZXQgYWNjZXNzIHRva2VuLicpO1xuICAgIH1cbiAgfSlcbiAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgIHZhciB0b2tlbkRhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGVycikpO1xuICAgIGlmICh0b2tlbkRhdGEubmFtZSA9PT0gJ1N0YXR1c0NvZGVFcnJvcicpIHtcbiAgICAgIHZhciBlbnRpcmVNZXNzYWdlID0gdG9rZW5EYXRhLm1lc3NhZ2U7XG4gICAgICB2YXIgbWVzc2FnZUpzb24gPSBlbnRpcmVNZXNzYWdlLnJlcGxhY2UodG9rZW5EYXRhLnN0YXR1c0NvZGUgKyAnIC0gJywgJycpO1xuICAgICAgdmFyIG1lc3NhZ2VEYXRhID0gSlNPTi5wYXJzZShtZXNzYWdlSnNvbi5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFxcIicsICdnJyksJ1wiJykpO1xuICAgICAgLy9jb25zb2xlLmxvZygnLS0tLS0nKTtcbiAgICAgIC8vY29uc29sZS5sb2cobWVzc2FnZURhdGEpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1lc3NhZ2VEYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBnZXRVc2VyRW1haWxzID0gZnVuY3Rpb24oY2xpZW50SWQsIHNlcnZpY2VFbWFpbCwgdXNlckVtYWlsLCBwcml2YXRlS2V5LCBhcGlWZXJzaW9uLCBmaWx0ZXJTdGFydERhdGUsIGZpbHRlckVuZERhdGUsIGFkZGl0aW9uYWxGaWVsZHMsIHJlc3VsdCkge1xuICB2YXIgdG9rZW4gPSAnJztcbiAgcmV0dXJuIGdldEFjY2Vzc1Rva2VuKGNsaWVudElkLCBzZXJ2aWNlRW1haWwsIHVzZXJFbWFpbCwgcHJpdmF0ZUtleSlcbiAgLnRoZW4oZnVuY3Rpb24odG9rZW5SZXNwb25zZSkge1xuICAgIHRva2VuID0gdG9rZW5SZXNwb25zZTtcbiAgICB2YXIgZW1haWxSZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmk6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9nbWFpbC92JyArIGFwaVZlcnNpb24gKyAnL3VzZXJzLycgKyB1c2VyRW1haWwgKyAnL21lc3NhZ2VzP3E9YWZ0ZXI6JyArIGZpbHRlclN0YXJ0RGF0ZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCkgKyAnIEFORCBiZWZvcmU6ICcgKyBmaWx0ZXJFbmREYXRlLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKSxcbiAgICAgIGhlYWRlcnMgOiB7XG4gICAgICAgIEF1dGhvcml6YXRpb246ICdCZWFyZXIgJyArIHRva2VuLFxuICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uO29kYXRhLm1ldGFkYXRhPW5vbmUnXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcnAoZW1haWxSZXF1ZXN0T3B0aW9ucyk7XG4gIH0pXG4gIC50aGVuKGZ1bmN0aW9uKGJvZHkpIHtcbiAgICB2YXIgbWVzc2FnZURldGFpbFByb21pc2VzID0gW107XG4gICAgcmVzdWx0LnN1Y2Nlc3MgPSB0cnVlO1xuICAgIHJlc3VsdC5kYXRhID0ge307XG4gICAgcmVzdWx0LmRhdGEubWVzc2FnZUxpc3QgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgIHJlc3VsdC5kYXRhLm1lc3NhZ2VzID0gW107XG5cbiAgICBpZiAocmVzdWx0LmRhdGEubWVzc2FnZUxpc3QubWVzc2FnZXMpIHtcbiAgICAgIGZvciAodmFyIG1lc3NhZ2VJdGVyID0gMDsgbWVzc2FnZUl0ZXIgPCByZXN1bHQuZGF0YS5tZXNzYWdlTGlzdC5tZXNzYWdlcy5sZW5ndGg7IG1lc3NhZ2VJdGVyKyspIHtcbiAgICAgICAgdmFyIG1lc3NhZ2VJZCA9IHJlc3VsdC5kYXRhLm1lc3NhZ2VMaXN0Lm1lc3NhZ2VzW21lc3NhZ2VJdGVyXS5pZDtcbiAgICAgICAgcmVzdWx0LmRhdGEubWVzc2FnZXMucHVzaCh7bWVzc2FnZUlkOiBtZXNzYWdlSWR9KTtcbiAgICAgICAgbWVzc2FnZURldGFpbFByb21pc2VzLnB1c2goZ2V0U2luZ2xlTWVzc2FnZURldGFpbHMobWVzc2FnZUlkLCB1c2VyRW1haWwsIHRva2VuLCBhcGlWZXJzaW9uLCBhZGRpdGlvbmFsRmllbGRzLCByZXN1bHQuZGF0YS5tZXNzYWdlc1ttZXNzYWdlSXRlcl0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwobWVzc2FnZURldGFpbFByb21pc2VzKTtcbiAgfSlcbiAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgIHJlc3VsdC5zdWNjZXNzID0gZmFsc2U7XG4gICAgaWYgKGVyci5uYW1lID09PSAnU3RhdHVzQ29kZUVycm9yJykge1xuICAgICAgdmFyIGVudGlyZU1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICAgIHZhciBtZXNzYWdlSnNvbiA9IGVudGlyZU1lc3NhZ2UucmVwbGFjZShlcnIuc3RhdHVzQ29kZSArICcgLSAnLCAnJyk7XG4gICAgICB2YXIgbWVzc2FnZURhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2VKc29uLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxcXFwiJywgJ2cnKSwnXCInKSk7XG4gICAgICByZXN1bHQuZXJyb3JNZXNzYWdlID0gbWVzc2FnZURhdGEuZXJyb3IubWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LmVycm9yTWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KGVycik7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn07XG5cbnZhciBnZXRIZWFkZXJWYWx1ZSA9IGZ1bmN0aW9uKG1lc3NhZ2UsIGhlYWRlck5hbWUpIHtcbiAgdmFyIGhlYWRlclZhbHVlcyA9IF8obWVzc2FnZS5wYXlsb2FkLmhlYWRlcnMpXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihoZWFkZXIpIHsgcmV0dXJuIGhlYWRlci5uYW1lID09PSBoZWFkZXJOYW1lOyB9KVxuICAgICAgICAgIC5wbHVjaygndmFsdWUnKVxuICAgICAgICAgIC52YWx1ZSgpO1xuICBpZiAoaGVhZGVyVmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gaGVhZGVyVmFsdWVzWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgZ2V0RW1haWxBZGRyZXNzT2JqZWN0RnJvbVN0cmluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciByZXR1cm5PYmplY3QgPSB7XG4gICAgbmFtZTogdmFsdWUsXG4gICAgYWRkcmVzczogdmFsdWVcbiAgfTtcblxuICBpZiAodmFsdWUgJiYgdmFsdWUuaW5kZXhPZignPicpID4gMCkge1xuICAgIHZhciB2YWx1ZUFycmF5ID0gdmFsdWUuc3BsaXQoJyAnKTtcbiAgICByZXR1cm5PYmplY3QuYWRkcmVzcyA9IHZhbHVlQXJyYXlbdmFsdWVBcnJheS5sZW5ndGggLSAxXS5yZXBsYWNlKCc8JywgJycpLnJlcGxhY2UoJz4nLCAnJyk7XG4gICAgcmV0dXJuT2JqZWN0Lm5hbWUgPSB2YWx1ZS5yZXBsYWNlKCcgJyArIHZhbHVlQXJyYXlbdmFsdWVBcnJheS5sZW5ndGggLSAxXSwgJycpO1xuICB9XG5cbiAgcmV0dXJuIHJldHVybk9iamVjdDtcbn07XG5cbnZhciBjb252ZXJ0RW1haWxMaXN0VG9BcnJheU9mRW1haWxBZGRyZXNzT2JqZWN0cyA9IGZ1bmN0aW9uKGVtYWlsTGlzdCkge1xuICB2YXIgZW1haWxBZGRyZXNzT2JqZWN0QXJyYXkgPSBbXTtcbiAgaWYgKGVtYWlsTGlzdCkge1xuICAgIHZhciBlbWFpbEFycmF5ID0gZW1haWxMaXN0LnNwbGl0KCcsJyk7XG4gICAgZm9yICh2YXIgZW1haWxJdGVyID0gMDsgZW1haWxJdGVyIDwgZW1haWxBcnJheS5sZW5ndGg7IGVtYWlsSXRlcisrKSB7XG4gICAgICBlbWFpbEFkZHJlc3NPYmplY3RBcnJheS5wdXNoKGdldEVtYWlsQWRkcmVzc09iamVjdEZyb21TdHJpbmcoZW1haWxBcnJheVtlbWFpbEl0ZXJdKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVtYWlsQWRkcmVzc09iamVjdEFycmF5O1xufTtcblxudmFyIGhhc0xhYmVsID0gZnVuY3Rpb24obWVzc2FnZSwgbGFiZWxWYWx1ZSkge1xuICByZXR1cm4gbWVzc2FnZS5sYWJlbElkcy5pbmRleE9mKGxhYmVsVmFsdWUpID49IDA7XG59O1xuXG52YXIgbWFwRW1haWxEYXRhID0gZnVuY3Rpb24oZW1haWxEYXRhKSB7XG4gIHZhciBtYXBwZWREYXRhID0gW107XG5cbiAgZm9yICh2YXIgdXNlckl0ZXIgPSAwOyB1c2VySXRlciA8IGVtYWlsRGF0YS5sZW5ndGg7IHVzZXJJdGVyKyspIHtcbiAgICB2YXIgbWFwcGVkVXNlciA9IHtcbiAgICAgIGVtYWlsOiBlbWFpbERhdGFbdXNlckl0ZXJdLmVtYWlsLFxuICAgICAgZmlsdGVyU3RhcnREYXRlOiBlbWFpbERhdGFbdXNlckl0ZXJdLmZpbHRlclN0YXJ0RGF0ZSxcbiAgICAgIGZpbHRlckVuZERhdGU6IGVtYWlsRGF0YVt1c2VySXRlcl0uZmlsdGVyRW5kRGF0ZSxcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgc3VjY2VzczogZW1haWxEYXRhW3VzZXJJdGVyXS5zdWNjZXNzLFxuICAgICAgZXJyb3JNZXNzYWdlOiBlbWFpbERhdGFbdXNlckl0ZXJdLmVycm9yTWVzc2FnZVxuICAgIH07XG5cbiAgICBpZiAoZW1haWxEYXRhW3VzZXJJdGVyXS5zdWNjZXNzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVtYWlsRGF0YVt1c2VySXRlcl0uZGF0YVsnbWVzc2FnZXMnXS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgb3JpZ2luYWxFbWFpbE1lc3NhZ2UgPSBlbWFpbERhdGFbdXNlckl0ZXJdLmRhdGFbJ21lc3NhZ2VzJ11baV07XG4gICAgICAgIHZhciBtYXBwZWRFbWFpbE1lc3NhZ2UgPSB7fTtcblxuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UgPSBvcmlnaW5hbEVtYWlsTWVzc2FnZTtcbiAgICAgICAgdmFyIG1lc3NhZ2VEYXRhID0gb3JpZ2luYWxFbWFpbE1lc3NhZ2UubWVzc2FnZURhdGE7XG5cbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLm1lc3NhZ2VJZCA9IG9yaWdpbmFsRW1haWxNZXNzYWdlLm1lc3NhZ2VJZDtcbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmNvbnZlcnNhdGlvbklkID0gbWVzc2FnZURhdGEudGhyZWFkSWQ7XG4gICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5kYXRlVGltZVNlbnQgPSBtb21lbnQobmV3IERhdGUoZ2V0SGVhZGVyVmFsdWUobWVzc2FnZURhdGEsICdEYXRlJykpKS51dGMoKS50b0RhdGUoKTtcblxuICAgICAgICB2YXIgZGF0ZVJlY2VpdmVkID0gZ2V0SGVhZGVyVmFsdWUobWVzc2FnZURhdGEsICdSZWNlaXZlZCcpO1xuICAgICAgICBpZiAoZGF0ZVJlY2VpdmVkKSB7XG4gICAgICAgICAgdmFyIGRhdGVQYXJ0T2ZWYWx1ZSA9IGRhdGVSZWNlaXZlZC5zcGxpdCgnOycpWzFdO1xuICAgICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5kYXRlVGltZVJlY2VpdmVkID0gbW9tZW50KG5ldyBEYXRlKGRhdGVQYXJ0T2ZWYWx1ZSkpLnV0YygpLnRvRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmltcG9ydGFuY2UgPSAnTm9ybWFsJztcbiAgICAgICAgaWYgKGhhc0xhYmVsKG1lc3NhZ2VEYXRhLCAnSU1QT1JUQU5UJykpIHtcbiAgICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuaW1wb3J0YW5jZSA9ICdJbXBvcnRhbnQnO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmNhdGVnb3JpZXMgPSBtZXNzYWdlRGF0YS5sYWJlbElkcztcblxuICAgICAgICBpZiAoaGFzTGFiZWwobWVzc2FnZURhdGEsICdTRU5UJykpIHtcbiAgICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuZm9sZGVySWQgPSAnU2VudCBJdGVtcyc7XG4gICAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmZvbGRlck5hbWUgPSAnU2VudCBJdGVtcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmZvbGRlcklkID0gJ0luYm94JztcbiAgICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuZm9sZGVyTmFtZSA9ICdJbmJveCc7XG4gICAgICAgIH1cblxuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2Uuc3ViamVjdCA9IGdldEhlYWRlclZhbHVlKG1lc3NhZ2VEYXRhLCAnU3ViamVjdCcpO1xuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuYm9keVByZXZpZXcgPSBtZXNzYWdlRGF0YS5zbmlwcGV0O1xuXG4gICAgICAgIGlmIChtZXNzYWdlRGF0YS5wYXlsb2FkLnBhcnRzICYmIG1lc3NhZ2VEYXRhLnBheWxvYWQucGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5jb250ZW50VHlwZSA9IG1lc3NhZ2VEYXRhLnBheWxvYWQucGFydHNbMF0ubWltZVR5cGU7XG4gICAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmJvZHkgPSBuZXcgQnVmZmVyKG1lc3NhZ2VEYXRhLnBheWxvYWQucGFydHNbMF0uYm9keS5kYXRhLCAnYmFzZTY0JykudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5pc0RlbGl2ZXJ5UmVjZWlwdFJlcXVlc3RlZCA9IG51bGw7XG4gICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5pc1JlYWRSZWNlaXB0UmVxdWVzdGVkID0gbnVsbDtcbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmhhc0F0dGFjaG1lbnRzID0gbnVsbDtcbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmlzRHJhZnQgPSBudWxsO1xuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UuaXNSZWFkID0gaGFzTGFiZWwobWVzc2FnZURhdGEsICdSRUFEJyk7XG5cbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmZyb21BZGRyZXNzID0gZ2V0RW1haWxBZGRyZXNzT2JqZWN0RnJvbVN0cmluZyhnZXRIZWFkZXJWYWx1ZShtZXNzYWdlRGF0YSwgJ0Zyb20nKSkuYWRkcmVzcztcbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmZyb21OYW1lID0gZ2V0RW1haWxBZGRyZXNzT2JqZWN0RnJvbVN0cmluZyhnZXRIZWFkZXJWYWx1ZShtZXNzYWdlRGF0YSwgJ0Zyb20nKSkubmFtZTtcblxuICAgICAgICBtYXBwZWRFbWFpbE1lc3NhZ2UudG9SZWNpcGllbnRzID0gY29udmVydEVtYWlsTGlzdFRvQXJyYXlPZkVtYWlsQWRkcmVzc09iamVjdHMoZ2V0SGVhZGVyVmFsdWUobWVzc2FnZURhdGEsICdUbycpKTtcbiAgICAgICAgbWFwcGVkRW1haWxNZXNzYWdlLmNjUmVjaXBpZW50cyA9IGNvbnZlcnRFbWFpbExpc3RUb0FycmF5T2ZFbWFpbEFkZHJlc3NPYmplY3RzKGdldEhlYWRlclZhbHVlKG1lc3NhZ2VEYXRhLCAnQ2MnKSk7XG4gICAgICAgIG1hcHBlZEVtYWlsTWVzc2FnZS5iY2NSZWNpcGllbnRzID0gY29udmVydEVtYWlsTGlzdFRvQXJyYXlPZkVtYWlsQWRkcmVzc09iamVjdHMoZ2V0SGVhZGVyVmFsdWUobWVzc2FnZURhdGEsICdCY2MnKSk7XG5cbiAgICAgICAgbWFwcGVkVXNlci5kYXRhLnB1c2gobWFwcGVkRW1haWxNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWFwcGVkRGF0YS5wdXNoKG1hcHBlZFVzZXIpO1xuICB9XG5cbiAgcmV0dXJuIG1hcHBlZERhdGE7XG59O1xuXG52YXIgZ2V0RW1haWxEYXRhID0gZnVuY3Rpb24oZW1haWxzLCBmaWx0ZXJTdGFydERhdGUsIGZpbHRlckVuZERhdGUsIGFkZGl0aW9uYWxGaWVsZHMsIGNsaWVudElkLCBzZXJ2aWNlRW1haWwsIHByaXZhdGVLZXksIGFwaVZlcnNpb24pIHtcbiAgdmFyIGVtYWlsUmVzdWx0cyA9IFtdO1xuICB2YXIgZW1haWxSZXN1bHRQcm9taXNlcyA9IFtdO1xuICB2YXIgZW1haWxJdGVyID0gMDtcbiAgZm9yIChlbWFpbEl0ZXIgPSAwOyBlbWFpbEl0ZXIgPCBlbWFpbHMubGVuZ3RoOyBlbWFpbEl0ZXIrKykge1xuICAgIGVtYWlsUmVzdWx0c1tlbWFpbEl0ZXJdID0ge2VtYWlsOiBlbWFpbHNbZW1haWxJdGVyXSwgZmlsdGVyU3RhcnREYXRlOiBmaWx0ZXJTdGFydERhdGUsIGZpbHRlckVuZERhdGU6IGZpbHRlckVuZERhdGV9O1xuICAgIGVtYWlsUmVzdWx0UHJvbWlzZXMucHVzaChnZXRVc2VyRW1haWxzKGNsaWVudElkLCBzZXJ2aWNlRW1haWwsIGVtYWlsc1tlbWFpbEl0ZXJdLCBwcml2YXRlS2V5LCBhcGlWZXJzaW9uLCBmaWx0ZXJTdGFydERhdGUsIGZpbHRlckVuZERhdGUsIGFkZGl0aW9uYWxGaWVsZHMsIGVtYWlsUmVzdWx0c1tlbWFpbEl0ZXJdKSk7XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5hbGwoZW1haWxSZXN1bHRQcm9taXNlcylcbiAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGVtYWlsUmVzdWx0cztcbiAgfSk7XG59O1xuXG5Hb29nbGVBZGFwdGVyLnByb3RvdHlwZS5nZXRCYXRjaERhdGEgPSBmdW5jdGlvbihlbWFpbHMsIGZpbHRlclN0YXJ0RGF0ZSwgZmlsdGVyRW5kRGF0ZSwgYWRkaXRpb25hbEZpZWxkcykge1xuICB2YXIgY2xpZW50SWQgPSB0aGlzLl9jb25maWcuY3JlZGVudGlhbHMuY2xpZW50SWQ7XG4gIHZhciBjbGllbnRFbWFpbCA9IHRoaXMuX2NvbmZpZy5jcmVkZW50aWFscy5lbWFpbDtcbiAgdmFyIHNlcnZpY2VFbWFpbCA9IHRoaXMuX2NvbmZpZy5jcmVkZW50aWFscy5zZXJ2aWNlRW1haWw7XG4gIHZhciBwcml2YXRlS2V5ID0gdGhpcy5fY29uZmlnLmNyZWRlbnRpYWxzLmNlcnRpZmljYXRlO1xuICB2YXIgYXBpVmVyc2lvbiA9IHRoaXMuX2NvbmZpZy5vcHRpb25zLmFwaVZlcnNpb247XG5cbiAgdmFyIGRhdGFBZGFwdGVyUnVuU3RhdHMgPSB7XG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgICBydW5EYXRlOiBtb21lbnQoKS51dGMoKS50b0RhdGUoKSxcbiAgICBmaWx0ZXJTdGFydERhdGU6IGZpbHRlclN0YXJ0RGF0ZSxcbiAgICBmaWx0ZXJFbmREYXRlOiBmaWx0ZXJFbmREYXRlLFxuICAgIGVtYWlsczogZW1haWxzXG4gIH07XG5cbiAgLy9maXJzdCB0cnkgdG8gZ2V0IHRva2VuIGZvciB0aGUgYWRtaW4gLSBpZiB0aGF0IGZhaWxzLCB0aGVuIGFsbCB3aWxsIGZhaWxcbiAgcmV0dXJuIGdldEFjY2Vzc1Rva2VuKGNsaWVudElkLCBzZXJ2aWNlRW1haWwsIGNsaWVudEVtYWlsLCBwcml2YXRlS2V5KVxuICAudGhlbihmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0RW1haWxEYXRhKGVtYWlscywgZmlsdGVyU3RhcnREYXRlLCBmaWx0ZXJFbmREYXRlLCBhZGRpdGlvbmFsRmllbGRzLCBjbGllbnRJZCwgc2VydmljZUVtYWlsLCBwcml2YXRlS2V5LCBhcGlWZXJzaW9uKTtcbiAgfSlcbiAgLnRoZW4oZnVuY3Rpb24oZW1haWxEYXRhKSB7XG4gICAgcmV0dXJuIG1hcEVtYWlsRGF0YShlbWFpbERhdGEpO1xuICB9KVxuICAudGhlbihmdW5jdGlvbihtYXBwZWRFbWFpbERhdGEpIHtcbiAgICBkYXRhQWRhcHRlclJ1blN0YXRzLnJlc3VsdHMgPSBtYXBwZWRFbWFpbERhdGE7XG4gICAgcmV0dXJuIGRhdGFBZGFwdGVyUnVuU3RhdHM7XG4gIH0pXG4gIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICBkYXRhQWRhcHRlclJ1blN0YXRzLnN1Y2Nlc3MgPSBmYWxzZTtcbiAgICBkYXRhQWRhcHRlclJ1blN0YXRzLmVycm9yTWVzc2FnZSA9IGVycjtcbiAgICBjb25zb2xlLmxvZygnR29vZ2xlTWFpbCBHZXRCYXRjaERhdGEgRXJyb3I6ICcgKyBKU09OLnN0cmluZ2lmeShlcnIpKTtcbiAgICByZXR1cm4gZGF0YUFkYXB0ZXJSdW5TdGF0cztcbiAgfSk7XG59O1xuXG5Hb29nbGVBZGFwdGVyLnByb3RvdHlwZS5ydW5Db25uZWN0aW9uVGVzdCA9IGZ1bmN0aW9uKGNvbm5lY3Rpb25EYXRhKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIF90aGlzLl9jb25maWcgPSBuZXcgR29vZ2xlTWFpbC5Db25maWd1cmF0aW9uKGNvbm5lY3Rpb25EYXRhLmNyZWRlbnRpYWxzKTtcbiAgdmFyIGZpbHRlclN0YXJ0RGF0ZSA9IG1vbWVudCgpLnV0YygpLnN0YXJ0T2YoJ2RheScpLmFkZCgtMSwgJ2RheXMnKS50b0RhdGUoKTtcbiAgdmFyIGZpbHRlckVuZERhdGUgPSBtb21lbnQoKS51dGMoKS5zdGFydE9mKCdkYXknKS50b0RhdGUoKTtcbiAgcmV0dXJuIF90aGlzLmdldEJhdGNoRGF0YShbX3RoaXMuX2NvbmZpZy5jcmVkZW50aWFscy5lbWFpbF0sIGZpbHRlclN0YXJ0RGF0ZSwgZmlsdGVyRW5kRGF0ZSwgJycpXG4gIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5zdWNjZXNzICYmIGRhdGEucmVzdWx0c1swXSkge1xuICAgICAgLy90byBzZWUgaWYgaXQgcmVhbGx5IHdvcmtlZCwgd2UgbmVlZCB0byBwYXNzIGluIHRoZSBmaXJzdCByZXN1bHRcbiAgICAgIHJldHVybiBkYXRhLnJlc3VsdHNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSk7XG59O1xuXG5Hb29nbGVBZGFwdGVyLnByb3RvdHlwZS5ydW5NZXNzYWdlVGVzdCA9IGZ1bmN0aW9uKGNvbm5lY3Rpb25EYXRhKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIF90aGlzLl9jb25maWcgPSBuZXcgR29vZ2xlTWFpbC5Db25maWd1cmF0aW9uKGNvbm5lY3Rpb25EYXRhLmNyZWRlbnRpYWxzKTtcbiAgdmFyIGZpbHRlclN0YXJ0RGF0ZSA9IG1vbWVudCgpLnV0YygpLnN0YXJ0T2YoJ2RheScpLmFkZCgtMSwgJ2RheXMnKS50b0RhdGUoKTtcbiAgdmFyIGZpbHRlckVuZERhdGUgPSBtb21lbnQoKS51dGMoKS5zdGFydE9mKCdkYXknKS5hZGQoMSwgJ2RheXMnKS50b0RhdGUoKTtcbiAgcmV0dXJuIF90aGlzLmdldEJhdGNoRGF0YShbX3RoaXMuX2NvbmZpZy5jcmVkZW50aWFscy5lbWFpbF0sIGZpbHRlclN0YXJ0RGF0ZSwgZmlsdGVyRW5kRGF0ZSwgJ1N1YmplY3QsQm9keVByZXZpZXcsQm9keScpXG4gIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBjb25zb2xlLmxvZygncnVuTWVzc2FnZVRlc3Qgd29ya2VkJyk7XG4gICAgY29uc29sZS5sb2coZGF0YS5yZXN1bHRzWzBdKTtcbiAgfSlcbiAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgIGNvbnNvbGUubG9nKCdydW5NZXNzYWdlVGVzdCBFcnJvcjogJyArIEpTT04uc3RyaW5naWZ5KGVycikpO1xuICB9KTtcbn07XG4iXX0=
//# sourceMappingURL=../../clAdapters/google-calendar/Adapter.js.map