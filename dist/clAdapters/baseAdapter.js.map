{"version":3,"sources":["clAdapters/baseAdapter.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;AASb,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,SAAS,WAAW,GAAG;;;;AAIxD,MAAI,CAAC,WAAW,GAAG,EAAE,CAAC;;;;;;;;;AAStB,QAAM,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;AAC1C,OAAG,EAAE,eAAW;AACd,aAAO,EAAE,CAAC;KACX;AACD,gBAAY,EAAE,IAAI;AAClB,cAAU,EAAE,IAAI;GACjB,CAAC,CAAC;CACJ,CAAC;;;;;;;AAOF,WAAW,CAAC,SAAS,CAAC,IAAI,GAAG,YAAW;AACtC,QAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;CACpD,CAAC;;;;;;;;AAQF,WAAW,CAAC,SAAS,CAAC,KAAK,GAAG,YAAW,EAAE,CAAC;;;;;;;;;;;;AAY5C,WAAW,CAAC,SAAS,CAAC,YAAY,GAAG,4BAA6B;AAChE,QAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;CACpD,CAAC","file":"clAdapters/baseAdapter.js","sourcesContent":["'use strict';\n\n/**\n * Abstract base class for all adapters\n *\n * @class\n * @abstract\n * @return {BaseAdapter}\n */\nvar BaseAdapter = module.exports = function BaseAdapter() {\n  /**\n   * @member {Object}\n   */\n  this.credentials = {};\n\n  /**\n   * If this adapter supports external entity fields, it must provide\n   * a key to uniquely associate that field as having come from this\n   * adapter instance. For example, a NetSuite adapter may simply\n   * expose its `credentials.account` value also as its `extEntityKey`\n   * @member {String}\n   */\n  Object.defineProperty(this, 'extEntityKey', {\n    get: function() {\n      return '';\n    },\n    configurable: true,\n    enumerable: true\n  });\n};\n\n/**\n * Connects to datasource. Requires `credentials` member to be filled out\n * @virtual\n * @return {Promise.<BaseAdapter>} initialzed adapter\n */\nBaseAdapter.prototype.init = function() {\n  throw new Error('Must be implemented by subclass');\n};\n\n/**\n * Adapters may be stateful. For instance, they may need to store\n * auth tokens, search continuation ids, etc or cache results.\n * Invoke this method to reset an adapter to a clean state, which\n * requires recalling `init()`\n */\nBaseAdapter.prototype.reset = function() {};\n\n/**\n * Gets specified field data from datasource\n * @param  {Object} field adapter field\n * @param  {Object} [query] optional params\n * @param  {Number} [query.skip=0] index to skip to\n * @param  {Number} [query.limit] results page size\n * @return {Promise.<Object>} result object\n * @return {Number} result.count total results\n * @return {Object[]} result.results result objects\n */\nBaseAdapter.prototype.getFieldData = function( /*field, query*/ ) {\n  throw new Error('Must be implemented by subclass');\n};\n"],"sourceRoot":"/source/"}