{"version":3,"sources":["clAdapters/office365/base/Adapter.js"],"names":["uuid","crypto","request","moment","_","Adapter","Office365BaseService","Office365BaseConfiguration","Office365BaseAdapter","_config","_service","credentials","init","console","log","constructor","name","email","connectionData","today","utc","startOf","filterStartDate","add","toDate","filterEndDate","getBatchData","emailAfterMapping","data","success","results","accessToken","accessTokenExpires","Date","clientId","tenantId","certificate","certificateThumbprint","apiVersion","options","tokenRequestUrl","jwtHeader","getTime","jwtPayload","v4","encode","Buffer","header","toString","encodedJwtHeader","encodedJwtPayload","stringToSign","encodedSignedJwtInfo","createSign","update","sign","tokenRequestFormData","client_id","client_assertion_type","grant_type","resource","client_assertion","tokenRequestOptions","method","port","uri","formData","JSON","tokenData","parse","access_token","Error","messageData","message","replace","statusCode","userData","pageToGet","userProfile","additionalFields","$filter","apiType","maxPages","recordsPerPage","getAccessToken","skip","baseFields","params","startDateTime","toISOString","endDateTime","$top","$skip","$select","join","urlParams","map","value","key","requestOptions","headers","Authorization","Accept","records","e","getAttachments","length","recIter","rec","mid","Id","attachments","attachmentOptions","attachmentData","push","getUserData","errorMessage"],"mappings":"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","file":"clAdapters/office365/base/Adapter.js","sourcesContent":["import * as uuid                       from 'node-uuid';\nimport * as crypto                     from 'crypto';\nimport request                    from 'request-promise';\nimport moment                     from 'moment';\nimport _                          from 'lodash';\nimport Adapter                    from '../../base/Adapter';\nimport Office365BaseService       from './Service';\nimport Office365BaseConfiguration from './Configuration';\n\n/**\n * Common reset, runConnectionTest, and getAccessToken methods...\n */\nexport default class Office365BaseAdapter extends Adapter {\n\n\n  reset() {\n    delete this._config;\n    delete this._service;\n    return this;\n  }\n\n  async init() {\n    this._config  = new Office365BaseConfiguration(this.credentials);\n    this._service = new Office365BaseService(this._config);\n    await this._service.init();\n    console.log(`Successfully initialized ${this.constructor.name} for email: ${this.credentials.email}`);\n    return this;\n  }\n\n\n  async runConnectionTest(connectionData) {\n    this._config = new Office365BaseConfiguration(connectionData.credentials);\n\n    const today           = () => moment().utc().startOf('day'),\n          filterStartDate = today().add(-1, 'days').toDate(),\n          filterEndDate   = today().toDate(),\n          data            = await this.getBatchData(\n                              [ {\n                                email: this._config.credentials.email,\n                                emailAfterMapping: this._config.credentials.email\n                              } ],\n                              filterStartDate,\n                              filterEndDate,\n                              ''\n                            );\n\n    //to see if it really worked, we need to pass in the first result\n    return data.success && data.results[0] ? data.results[0] : data;\n  }\n\n\n  async getAccessToken() {\n\n    if (this.accessToken && this.accessTokenExpires > new Date()) {\n      return this.accessToken;\n    }\n\n    const {\n      credentials : {\n        clientId,\n        tenantId,\n        certificate,\n        certificateThumbprint\n      },\n      options : {\n        apiVersion\n      }\n    } = this._config;\n\n    const tokenRequestUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/token?api-version=${apiVersion}`;\n\n    const jwtHeader = {\n      'alg': 'RS256',\n      'x5t': certificateThumbprint\n    };\n\n    // expire token in one hour\n    const accessTokenExpires = ((new Date()).getTime() + 360000) / 1000;\n\n    // grab new access token 10 seconds before expiration\n    this.accessTokenExpires = new Date(accessTokenExpires * 1000 - 10000);\n\n    const jwtPayload = {\n      'aud': tokenRequestUrl,\n      'exp': accessTokenExpires,\n      'iss': clientId,\n      'jti': uuid.v4(),\n      'nbf': accessTokenExpires - 2 * 3600, // one hour before now\n      'sub': clientId\n    };\n\n    const encode               = header => new Buffer(JSON.stringify(header)).toString('base64'),\n          encodedJwtHeader     = encode(jwtHeader),\n          encodedJwtPayload    = encode(jwtPayload),\n          stringToSign         = encodedJwtHeader + '.' + encodedJwtPayload,\n          encodedSignedJwtInfo = crypto\n            .createSign('RSA-SHA256')\n            .update(stringToSign)\n            .sign(certificate, 'base64');\n\n    const tokenRequestFormData = {\n      client_id: clientId,\n      client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n      grant_type: 'client_credentials',\n      resource: 'https://outlook.office365.com/',\n      client_assertion: encodedJwtHeader + '.' + encodedJwtPayload + '.' + encodedSignedJwtInfo\n    };\n\n    const tokenRequestOptions = {\n      method: 'POST',\n      port: 443,\n      uri: tokenRequestUrl,\n      formData: tokenRequestFormData,\n    };\n\n    try {\n      const tokenData = JSON.parse(await request(tokenRequestOptions));\n      if (tokenData && tokenData.access_token) {\n        return this.accessToken = tokenData.access_token;\n      } else {\n        throw new Error('Could not get access token.');\n      }\n    } catch (tokenData) {\n      if (tokenData.name === 'StatusCodeError') {\n        const messageData = JSON.parse(\n          tokenData\n            .message\n            .replace(tokenData.statusCode + ' - ', '')\n            .replace(/\\\"/g, '\"')\n        );\n\n        throw new Error(messageData);\n      } else {\n        throw new Error(tokenData);\n      }\n    }\n  }\n\n\n  async getUserData(options, userData, pageToGet = 1) {\n    const {\n      userProfile,\n      filterStartDate,\n      filterEndDate,\n      additionalFields,\n      $filter,\n      apiType,\n      maxPages = 20,\n      recordsPerPage = 25\n    } = options;\n\n    // accumulation of data\n    userData = userData || { userProfile, filterStartDate, filterEndDate };\n\n    const accessToken          = await this.getAccessToken(),\n          { apiVersion }       = this._config.options,\n          skip                 = (pageToGet - 1) * recordsPerPage,\n          // extract static property...\n          { baseFields }       = this.constructor,\n          // parameters to query email with...\n          params               = {\n            startDateTime: filterStartDate.toISOString(),\n            endDateTime: filterEndDate.toISOString(),\n            $top:     recordsPerPage,\n            $skip:    skip,\n            $select:  baseFields.join(',') + (additionalFields ? `,${additionalFields}` : ''),\n          };\n    if(apiType !== 'calendarview') {\n      params.$filter = $filter;\n    }\n\n    // format parameters for url\n    const urlParams = _(params)\n      .map((value, key) => `${key}=${value}`)\n      .join('&');\n\n    const requestOptions = {\n      method: 'GET',\n      uri: `https://outlook.office365.com/api/v${apiVersion}/users('${userProfile.emailAfterMapping}')/${apiType}?${urlParams}`,\n      headers : {\n        Authorization: `Bearer ${accessToken}`,\n        Accept:        'application/json;odata.metadata=none'\n      }\n    };\n\n    try {\n      userData.success = true;\n\n      const { value: records } = JSON.parse(await request(requestOptions)) || {};\n      const e = userProfile.emailAfterMapping;\n\n      if(userProfile.getAttachments && records.length) {\n        for(let recIter = 0; recIter < records.length; recIter++) {\n          const rec = records[recIter];\n          const mid = rec.Id || '';\n          rec.attachments = [];\n          const attachmentOptions = {\n            method: 'GET',\n            uri: `https://outlook.office365.com/api/v${apiVersion}/users('${e}')/messages/${mid}/attachments`,\n            headers : {\n              Authorization: `Bearer ${accessToken}`,\n              Accept:        'application/json;odata.metadata=none'\n            }\n          };\n          const attachmentData = JSON.parse(await request(attachmentOptions)) || {};\n          if(attachmentData.value && attachmentData.value.length > 0) {\n            rec.attachments = attachmentData.value;\n          }\n        }\n      }\n\n      if (records && pageToGet === 1) {\n        userData.data = records;\n      }\n\n      if (records && pageToGet > 1) {\n        userData.data.push(...records);\n      }\n\n      // if the returned results are the maximum number of records per page,\n      // we are not done yet, so recurse...\n      if (records.length === recordsPerPage && pageToGet <= maxPages) {\n        return this.getUserData(options, userData, pageToGet + 1);\n      } else {\n        return userData;\n      }\n\n    } catch (err) {\n      Object.assign(userData, {\n        success: false,\n        errorMessage: err.name !== 'StatusCodeError' ?\n                        JSON.stringify(err)          :\n                        JSON.parse(\n                              err.message\n                                 .replace(err.statusCode + ' - ', '')\n                                 .replace(/\\\"/g, '\"')\n                            )\n                            .message\n      });\n      return true;\n    }\n\n  }\n\n}\n"],"sourceRoot":"/source/"}