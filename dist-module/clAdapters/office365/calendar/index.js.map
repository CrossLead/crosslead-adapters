{"version":3,"sources":["clAdapters/office365/calendar/index.js"],"names":["moment","_","Office365BaseAdapter","Office365CalendarAdapter","userProfiles","filterStartDate","filterEndDate","additionalFields","fieldNameMap","constructor","dataAdapterRunStats","emails","success","runDate","utc","toDate","all","map","getUserData","userProfile","apiType","eventData","results","user","errorMessage","data","mappedEvent","each","have","want","mapped","get","originalEvent","undefined","test","Date","responseStatus","Response","address","attendee","name","response","console","log","stack","baseFields"],"mappings":"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","file":"clAdapters/office365/calendar/index.js","sourcesContent":["import moment                     from 'moment';\nimport * as _                          from 'lodash';\nimport Office365BaseAdapter       from '../base/Adapter';\n\n\n/**\n * Office 365 Calendar adapter\n */\nexport default class Office365CalendarAdapter extends Office365BaseAdapter {\n\n  // collect these fields always...\n  static baseFields = [\n    'Id',\n    'Attendees',\n    'Calendar',\n    'Categories',\n    'DateTimeCreated',\n    'DateTimeLastModified',\n    'End',\n    'EndTimeZone',\n    'HasAttachments',\n    'Importance',\n    'iCalUID',\n    'IsAllDay',\n    'IsCancelled',\n    'IsOrganizer',\n    'Location',\n    'Organizer',\n    'Recurrence',\n    'ResponseRequested',\n    'ResponseStatus',\n    'SeriesMasterId',\n    'ShowAs',\n    'Start',\n    'StartTimeZone',\n    'Subject',\n    'Type',\n    'WebLink',\n    'Sensitivity'\n  ]\n\n  // convert the names of the api response data\n  static fieldNameMap = {\n    // Desired...                          // Given...\n    'eventId':                             'Id',\n    'attendees':                           'Attendees',\n    'calendarName':                        'Calendar',\n    'categories':                          'Categories',\n    'dateTimeCreated':                     'DateTimeCreated',\n    'dateTimeLastModified':                'DateTimeLastModified',\n    'attendeeAddress':                     'EmailAddress.Address',\n    'attendeeName':                        'EmailAddress.Name',\n    'hasAttachments':                      'HasAttachments',\n    'importance':                          'Importance',\n    'iCalUId':                             'iCalUId',\n    'allDay':                              'IsAllDay',\n    'canceled':                            'IsCancelled',\n    'isOrganizer':                         'IsOrganizer',\n    'locationName':                        'Location.DisplayName',\n    'locationAddressStreet':               'Location.Address.Street',\n    'locationAddressCity':                 'Location.Address.City',\n    'locationAddressState':                'Location.Address.State',\n    'locationAddressCountryOrRegion':      'Location.Address.CountryOrRegion',\n    'locationCoordinatesAccuracy':         'Location.Coordinates.Accuracy',\n    'locationCoordinatesAltitude':         'Location.Coordinates.Altitude',\n    'locationCoordinatesAltitudeAccuracy': 'Location.Coordinates.AltitudeAccuracy',\n    'locationCoordinatesLatitude':         'Location.Coordinates.Latitude',\n    'locationCoordinatesLongitude':        'Location.Coordinates.Longitude',\n    'organizerName':                       'Organizer.EmailAddress.Name',\n    'organizerEmail':                      'Organizer.EmailAddress.Address',\n    'recurrance':                          'Recurrance',\n    'responseRequested':                   'ResponseRequested',\n    'responseStatus':                      'ResponseStatus',\n    'seriesMasterId':                      'SeriesMasterId',\n    'showAs':                              'ShowAs',\n    'dateTimeStart':                       'Start',\n    'startTimeZone':                       'StartTimeZone',\n    'dateTimeEnd':                         'End',\n    'endTimeZone':                         'EndTimeZone',\n    'subject':                             'Subject',\n    'type':                                'Type',\n    'url':                                 'WebLink',\n    'privacy':                             'Sensitivity'\n  }\n\n\n  async getBatchData(userProfiles, filterStartDate, filterEndDate, additionalFields) {\n\n    const { fieldNameMap } = this.constructor,\n          dataAdapterRunStats   = {\n            emails: userProfiles,\n            filterStartDate,\n            filterEndDate,\n            success: false,\n            runDate: moment().utc().toDate()\n          };\n\n    try {\n      const eventData = await Promise.all(userProfiles.map(userProfile => this.getUserData({\n        userProfile,\n        filterStartDate,\n        filterEndDate,\n        additionalFields,\n        apiType: 'calendarview'\n      })));\n\n      // replace data keys with desired mappings...\n      const results = _.map(eventData, user => {\n        return {\n          ...user.userProfile,\n          filterStartDate:  user.filterStartDate,\n          filterEndDate:    user.filterEndDate,\n          success:          user.success,\n          errorMessage:     user.errorMessage,\n          // map data with desired key names...\n          data: _.map(user.data || [], originalEvent => {\n            const mappedEvent = {};\n\n            // change to desired names\n            _.each(fieldNameMap, (have, want) => {\n              const mapped = _.get(originalEvent, have);\n              if (mapped !== undefined) {\n                mappedEvent[want] = /^dateTime/.test(want) ? new Date(mapped) : mapped;\n              }\n            });\n\n            if (mappedEvent.responseStatus && mappedEvent.responseStatus.Response) {\n              mappedEvent.responseStatus = mappedEvent.responseStatus.Response;\n            }\n\n            mappedEvent[`attendees`] = originalEvent[fieldNameMap[`attendees`]]\n              .map(attendee => {\n                return {\n                  address:  _.get(attendee, fieldNameMap[`attendeeAddress`]),\n                  name:     _.get(attendee, fieldNameMap[`attendeeName`]),\n                  response: _.get(attendee, 'Status')\n                };\n              });\n\n            return mappedEvent;\n          })\n        };\n      });\n\n      // return results and success!\n      return {\n        ...dataAdapterRunStats,\n        results,\n        success: true\n      };\n\n    } catch (errorMessage) {\n      console.log(errorMessage.stack);\n      console.log('Office365 GetBatchData Error: ' + JSON.stringify(errorMessage));\n      return { ...dataAdapterRunStats, errorMessage };\n    }\n\n  }\n\n\n}\n"],"sourceRoot":"/source/"}