{"version":3,"sources":["clAdapters/clMockAdapter.js"],"names":["util","BaseAdapter","Fields","CLMockAdapter","call","Object","defineProperty","get","credentials","appId","inherits","prototype","init","_this","p","resolve","reject","apiKey","getFieldData","field","query","typeName","console","log","type","Types","USER","GROUP","skip","numResultsToGenerate","Math","floor","random","result","count","results","createResult","r","extId","pageSize","limit","resultsToReturn","min","i","push"],"mappings":";AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA;;;;;;;;;;;;;AAaA,eAAe,SAASC,aAAT,GAAyB;AACtCF,cAAYG,IAAZ,CAAiB,IAAjB;;AAEA;;;AAGAC,SAAOC,cAAP,CAAsB,IAAtB,EAA4B,cAA5B,EAA4C;AAC1CC,SAAK,eAAW;AACd,aAAO,KAAKC,WAAL,CAAiBC,KAAxB;AACD;AAHyC,GAA5C;AAKD;;AAEDT,KAAKU,QAAL,CAAcP,aAAd,EAA6BF,WAA7B;;AAEA;;;AAGAE,cAAcQ,SAAd,CAAwBC,IAAxB,GAA+B,YAAW;AACxC,MAAMC,QAAQ,IAAd;AACA,MAAMC,IAAI,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACzC,QAAIH,MAAML,WAAN,CAAkBC,KAAlB,KAA4B,QAA5B,IAAwCI,MAAML,WAAN,CAAkBS,MAAlB,KAA6B,QAAzE,EAAmF;AACjFF,cAAQF,KAAR;AACD,KAFD,MAEO;AACLG,aAAO,kEAAP;AACD;AACF,GANS,CAAV;;AAQA,SAAOF,CAAP;AACD,CAXD;;AAaA;;;;;;;;;;;;;;;;;;;;AAoBAX,cAAcQ,SAAd,CAAwBO,YAAxB,GAAuC,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AAC5DA,UAAQA,SAAS,EAAjB;AACA,MAAIC,iBAAJ;AACAC,UAAQC,GAAR,CAAYJ,KAAZ;AACA,UAAQA,MAAMK,IAAd;AACE,SAAKtB,OAAOuB,KAAP,CAAaC,IAAlB;AACEL,iBAAW,MAAX;AACA;AACF,SAAKnB,OAAOuB,KAAP,CAAaE,KAAlB;AACEN,iBAAW,OAAX;AACA;AACF;AACEA,iBAAW,SAAX;AACA;AATJ;;AAYA,MAAMO,OAAOR,MAAMQ,IAAN,IAAc,CAA3B;AACA,MAAI,CAACA,IAAL,EAAW;AACT,SAAKC,oBAAL,GAA4BC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,EAA3B,CAA5B;AACAV,YAAQC,GAAR,CAAY,sCAAZ,EAAoD,KAAKM,oBAAzD;AACD;;AAED,MAAMI,SAAS;AACbC,WAAO,KAAKL,oBADC;AAEbM,aAAS;AAFI,GAAf;;AAKA,MAAMC,eAAe,SAAfA,YAAe,GAAW;AAC9B,QAAMC,IAAI,EAAV;AACAA,MAAEhB,WAAW,OAAb,IAAwBS,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,CAA3B,IAAgC,CAAxD;AACAK,MAAElB,MAAMmB,KAAR,IAAiBR,KAAKE,MAAL,EAAjB;AACA,WAAOK,CAAP;AACD,GALD;;AAOA,MAAME,WAAWnB,MAAMoB,KAAN,IAAe,CAAhC;AACA,MAAMC,kBAAkBX,KAAKY,GAAL,CAASH,QAAT,EAAmB,KAAKV,oBAAL,GAA4BD,IAA/C,CAAxB;AACA,OAAK,IAAIe,IAAI,CAAb,EAAgBA,IAAIF,eAApB,EAAqCE,GAArC,EAA0C;AACxCV,WAAOE,OAAP,CAAeS,IAAf,CAAoBR,cAApB;AACD;;AAED,SAAO,SAAQrB,OAAR,CAAgBkB,MAAhB,CAAP;AACD,CAzCD","file":"clAdapters/clMockAdapter.js","sourcesContent":["import * as util from 'util';\nimport BaseAdapter from './base/Adapter';\nimport * as Fields from './fields/';\n/**\n * CLMockAdapter\n *\n * `credentials` should always be:\n * ```\n * {\n *   appId: '123456',\n *   apiKey: '999999'\n * }\n * ```\n * @class\n * @return {ClMockAdapter}\n */\nexport default function CLMockAdapter() {\n  BaseAdapter.call(this);\n\n  /**\n   * @override\n   */\n  Object.defineProperty(this, 'extEntityKey', {\n    get: function() {\n      return this.credentials.appId;\n    }\n  });\n};\n\nutil.inherits(CLMockAdapter, BaseAdapter);\n\n/**\n * @override\n */\nCLMockAdapter.prototype.init = function() {\n  const _this = this;\n  const p = new Promise((resolve, reject) => {\n    if (_this.credentials.appId === '123456' && _this.credentials.apiKey === '999999') {\n      resolve(_this);\n    } else {\n      reject('Wrong credentials, please use appId \"123456\" and apiKey \"999999\"');\n    }\n  });\n\n  return p;\n};\n\n/**\n * Reflects given field in this `result` format:\n * ```\n * {\n *   {fieldType}ExtId: rand # between 1-50,\n *   {extId}: Float (0-1.0)\n * }\n * ```\n *\n * For example, for a \"Fields.Types.USER\" field w/extId 'user#utilizationRate', would return:\n * ```\n * {\n *   userExtId: 50,\n *   'user#utilizationRate': 0.55\n * }\n * ```\n *\n * Returns between 0-50 results in pages of `query.limit` (default 5)\n * @override\n */\nCLMockAdapter.prototype.getFieldData = function(field, query) {\n  query = query || {};\n  let typeName;\n  console.log(field);\n  switch (field.type) {\n    case Fields.Types.USER:\n      typeName = 'user';\n      break;\n    case Fields.Types.GROUP:\n      typeName = 'group';\n      break;\n    default:\n      typeName = 'unknown';\n      break;\n  }\n\n  const skip = query.skip || 0;\n  if (!skip) {\n    this.numResultsToGenerate = Math.floor(Math.random() * 50);\n    console.log('CLMockAdapter: Generating %d results', this.numResultsToGenerate);\n  }\n\n  const result = {\n    count: this.numResultsToGenerate,\n    results: []\n  };\n\n  const createResult = function() {\n    const r = {};\n    r[typeName + 'ExtId'] = Math.floor(Math.random() * 3) + 1;\n    r[field.extId] = Math.random();\n    return r;\n  };\n\n  const pageSize = query.limit || 5;\n  const resultsToReturn = Math.min(pageSize, this.numResultsToGenerate - skip);\n  for (let i = 0; i < resultsToReturn; i++) {\n    result.results.push(createResult());\n  }\n\n  return Promise.resolve(result);\n};\n"],"sourceRoot":"/source/"}