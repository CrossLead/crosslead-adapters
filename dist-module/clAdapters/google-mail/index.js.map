{"version":3,"sources":["clAdapters/google-mail/index.js"],"names":["crypto","rp","util","moment","querystring","_","BaseAdapter","GoogleMail","GoogleAdapter","call","inherits","prototype","init","_this","_config","Configuration","credentials","_service","Service","then","msg","console","log","email","reset","getSingleMessageDetails","messageId","userEmail","token","apiVersion","additionalFields","result","additionalFieldsToQuery","replace","messageRequestOptions","method","uri","headers","Authorization","Accept","messageDetails","messageData","JSON","parse","indexOf","get","n","headerIter","name","value","getAccessToken","clientId","adminEmail","privateKey","tokenRequestUrl","unixEpochTime","Math","floor","Date","getTime","jwtHeader","alg","typ","jwtPayload","encodedJwtHeader","Buffer","stringify","toString","encodedJwtPayload","stringToSign","signer","createSign","update","encodedSignedJwtInfo","sign","clientAssertion","tokenRequestFormData","grant_type","assertion","requestData","requestDataLength","length","tokenRequestOptions","port","body","multipart","tokenData","access_token","Promise","reject","catch","err","entireMessage","message","messageJson","statusCode","RegExp","getMoreEmails","messages","emailRequestOptions","firstUri","nextPageToken","tempPageToken","messageDetailPromises","messageList","messageIter","id","nextMessage","push","all","getUserEmails","serviceEmail","filterStartDate","filterEndDate","tokenResponse","queryFilter","toISOString","substring","data","success","errorMessage","error","getHeaderValue","headerName","headerValues","payload","filter","header","pluck","getEmailAddressObjectFromString","returnObject","address","valueArray","split","convertEmailListToArrayOfEmailAddressObjects","emailList","emailAddressObjectArray","emailArray","emailIter","hasLabel","labelValue","labelIds","getFirstScalarPart","partToCheck","forEach","parts","mapEmailData","emailData","mappedData","userIter","mappedUser","assign","i","originalEmailMessage","mappedEmailMessage","conversationId","threadId","dateTimeSent","utc","toDate","dateReceived","datePartOfValue","dateTimeReceived","importance","categories","folderId","folderName","subject","bodyPreview","snippet","contentType","mimeType","isDeliveryReceiptRequested","isReadReceiptRequested","hasAttachments","isDraft","isRead","fromAddress","fromName","toRecipients","ccRecipients","bccRecipients","getEmailData","emails","emailResults","emailResultPromises","emailAfterMapping","getBatchData","clientEmail","certificate","options","dataAdapterRunStats","runDate","mappedEmailData","results","runConnectionTest","connectionData","startOf","add","runMessageTest"],"mappings":"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","file":"clAdapters/google-mail/index.js","sourcesContent":["import * as crypto from 'crypto';\nimport rp from 'request-promise';\nimport * as util from 'util';\nimport moment from 'moment';\nimport * as querystring from 'querystring';\nimport * as _ from 'lodash';\n\nimport BaseAdapter from '../base/Adapter';\nimport * as GoogleMail from './google-js.js';\n\nexport default function GoogleAdapter() {\n  BaseAdapter.call(this);\n};\n\nutil.inherits(GoogleAdapter, BaseAdapter);\n\nGoogleAdapter.prototype.init = function() {\n  const _this = this;\n  this._config = new GoogleMail.Configuration(this.credentials);\n  this._service = new GoogleMail.Service(this._config);\n  return this._service\n    .init()\n    .then(( /*client*/ ) => {\n      const msg = 'Successfully initialized gmail adapter for email: %s';\n      console.log(msg, _this.credentials.email);\n      return _this;\n    });\n};\n\nGoogleAdapter.prototype.reset = function() {\n  delete this._config;\n  delete this._service;\n};\n\nconst getSingleMessageDetails = function(messageId, userEmail, token, apiVersion, additionalFields, result) {\n  let additionalFieldsToQuery = additionalFields.replace('BodyPreview', 'snippet');\n  additionalFieldsToQuery = additionalFieldsToQuery.replace('Body', 'payload(parts)');\n  additionalFieldsToQuery = additionalFieldsToQuery.replace('Subject', 'payload(parts)');\n\n  if (additionalFieldsToQuery !== '') {\n    additionalFieldsToQuery = ',' + additionalFieldsToQuery;\n  }\n\n  const messageRequestOptions = {\n    method: 'GET',\n    uri: (\n      'https://www.googleapis.com/gmail/v' +\n        apiVersion +\n        '/users/' +\n        userEmail +\n        '/messages/' +\n        messageId +\n        '?fields=id,threadId,labelIds,payload(headers)' +\n        additionalFieldsToQuery\n    ),\n    headers : {\n      Authorization: 'Bearer ' + token,\n      Accept: 'application/json;odata.metadata=none'\n    }\n  };\n  return rp(messageRequestOptions)\n  .then((messageDetails) => {\n    result.messageData = JSON.parse(messageDetails);\n    if (additionalFields.indexOf('Subject') === -1) {\n      //remove subject header\n      const headers = _.get(result, 'messageData.payload.headers');\n      const n = _.get(headers, 'length');\n      if (n > 0) {\n        for (let headerIter = 0; headerIter < n; headerIter++) {\n          if (headers[headerIter].name === 'Subject') {\n            headers[headerIter].value = '';\n          }\n        }\n      }\n    }\n\n    return true;\n  });\n};\n\nconst getAccessToken = function(clientId, adminEmail, userEmail, privateKey) {\n  const tokenRequestUrl = 'https://www.googleapis.com/oauth2/v3/token';\n  const unixEpochTime = Math.floor((new Date()).getTime() / 1000);\n\n  const jwtHeader = {\n    alg: 'RS256',\n    typ: 'JWT'\n  };\n\n  const jwtPayload = {\n    'iss': adminEmail,\n    'scope': 'https://www.googleapis.com/auth/gmail.readonly',\n    'aud': tokenRequestUrl,\n    'exp': unixEpochTime + 3600,\n    'iat': unixEpochTime,\n    'sub': userEmail\n  };\n\n  const encodedJwtHeader = new Buffer(JSON.stringify(jwtHeader)).toString('base64');\n  const encodedJwtPayload = new Buffer(JSON.stringify(jwtPayload)).toString('base64');\n  const stringToSign = encodedJwtHeader + '.' + encodedJwtPayload;\n\n  //sign it!\n  const signer = crypto.createSign('RSA-SHA256');\n  signer.update(stringToSign);\n\n  const encodedSignedJwtInfo = signer.sign(privateKey, 'base64');\n\n  //define assertion\n  const clientAssertion = encodedJwtHeader + '.' + encodedJwtPayload + '.' + encodedSignedJwtInfo;\n\n  const tokenRequestFormData = {\n    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n    assertion: clientAssertion\n  };\n\n  const requestData = querystring.stringify(tokenRequestFormData);\n  const requestDataLength = requestData.length;\n\n  const tokenRequestOptions = {\n    method: 'POST',\n    port: 443,\n    uri: tokenRequestUrl,\n    body: requestData,\n    multipart: false,\n    headers: {\n      'Content-Length': requestDataLength,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n\n  return rp(tokenRequestOptions)\n  .then((body) => {\n    const tokenData = JSON.parse(body);\n    if (tokenData && tokenData.access_token) {\n      return tokenData.access_token;\n    } else {\n      return Promise.reject('Could not get access token.');\n    }\n  })\n  .catch((err) => {\n    const tokenData = JSON.parse(JSON.stringify(err));\n    if (tokenData.name === 'StatusCodeError') {\n      const entireMessage = tokenData.message;\n      const messageJson = entireMessage.replace(tokenData.statusCode + ' - ', '');\n      const messageData = JSON.parse(messageJson.replace(new RegExp('\\\\\"', 'g'),'\"'));\n      //console.log('-----');\n      //console.log(messageData);\n      return Promise.reject(messageData);\n    } else {\n      return Promise.reject(err);\n    }\n  });\n};\n\nconst getMoreEmails = function(\n    messages,\n    userEmail,\n    token,\n    apiVersion,\n    additionalFields,\n    emailRequestOptions,\n    firstUri,\n    nextPageToken\n  ) {\n  emailRequestOptions.uri = firstUri + '&pageToken=' + nextPageToken;\n  let tempPageToken = '';\n  return rp(emailRequestOptions)\n  .then((body) => {\n    const messageDetailPromises = [];\n    const messageList = JSON.parse(body);\n    tempPageToken = messageList.nextPageToken;\n\n    if (messageList.messages) {\n      for (let messageIter = 0; messageIter < messageList.messages.length; messageIter++) {\n        const messageId = messageList.messages[messageIter].id;\n        const nextMessage = {messageId: messageId};\n        messages.push(nextMessage);\n        messageDetailPromises.push(\n          getSingleMessageDetails(messageId, userEmail, token, apiVersion, additionalFields, nextMessage));\n      }\n    }\n\n    return Promise.all(messageDetailPromises);\n  })\n  .then(() => {\n    if(tempPageToken) {\n      return getMoreEmails(\n        messages, userEmail, token, apiVersion, additionalFields, emailRequestOptions, firstUri, tempPageToken\n      );\n    } else {\n      return true;\n    }\n  });\n};\n\nconst getUserEmails = function(clientId,\n    serviceEmail,\n    userEmail,\n    privateKey,\n    apiVersion,\n    filterStartDate,\n    filterEndDate,\n    additionalFields,\n    result\n  ) {\n  let token = '';\n  let emailRequestOptions = {};\n  let firstUri = '';\n  return getAccessToken(clientId, serviceEmail, userEmail, privateKey)\n  .then((tokenResponse) => {\n    token = tokenResponse;\n    const queryFilter = '\\\"after:' +\n          filterStartDate.toISOString().substring(0, 10).replace(/-/g, '/') +\n          ' before:' +\n          filterEndDate.toISOString().substring(0, 10).replace(/-/g, '/') +\n          '\\\"';\n\n    firstUri = 'https://www.googleapis.com/gmail/v' +\n        apiVersion +\n        '/users/' +\n        userEmail +\n        '/messages?maxResults=100&q=' +\n        queryFilter;\n\n    emailRequestOptions = {\n      method: 'GET',\n      uri: firstUri,\n      headers : {\n        Authorization: 'Bearer ' + token,\n        Accept: 'application/json;odata.metadata=none'\n      }\n    };\n    return rp(emailRequestOptions);\n  })\n  .then((body) => {\n    const messageDetailPromises = [];\n    result.data = {};\n    result.data.messageList = JSON.parse(body);\n    result.data.messages = [];\n\n    const messages = _.get(result, 'data.messageList.messages');\n\n    if (messages) {\n      for (let messageIter = 0; messageIter < messages.length; messageIter++) {\n        const messageId = messages[messageIter].id;\n        result.data.messages.push({messageId: messageId});\n        messageDetailPromises.push(\n          getSingleMessageDetails(\n            messageId,\n            userEmail,\n            token,\n            apiVersion,\n            additionalFields,\n            result.data.messages[messageIter]\n          )\n        );\n      }\n    }\n\n    return Promise.all(messageDetailPromises);\n  })\n  .then(() => {\n    //console.log(result.data.messageList);\n    if(result.data.messageList.nextPageToken) {\n      return getMoreEmails(\n        result.data.messages,\n        userEmail,\n        token,\n        apiVersion,\n        additionalFields,\n        emailRequestOptions,\n        firstUri,\n        result.data.messageList.nextPageToken\n      );\n    } else {\n      return true;\n    }\n  })\n  .then(() => {\n    result.success = true;\n  })\n  .catch((err) => {\n    result.success = false;\n    if (err.name === 'StatusCodeError') {\n      const entireMessage = err.message;\n      const messageJson = entireMessage.replace(err.statusCode + ' - ', '');\n      const messageData = JSON.parse(messageJson.replace(new RegExp('\\\\\"', 'g'),'\"'));\n      result.errorMessage = messageData.error.message;\n    } else {\n      result.errorMessage = JSON.stringify(err);\n    }\n    return true;\n  });\n};\n\nconst getHeaderValue = function(message, headerName) {\n  const headerValues = _(message.payload.headers)\n          .filter((header) => {\n            return header.name === headerName;\n          })\n          .pluck('value')\n          .value();\n  if (headerValues.length > 0) {\n    return headerValues[0];\n  } else {\n    return null;\n  }\n};\n\nconst getEmailAddressObjectFromString = function(value) {\n  const returnObject = {\n    name: value,\n    address: value\n  };\n\n  if (value && value.indexOf('>') > 0) {\n    const valueArray = value.split(' ');\n    returnObject.address = valueArray[valueArray.length - 1].replace('<', '').replace('>', '');\n    returnObject.name = value.replace(' ' + valueArray[valueArray.length - 1], '');\n  }\n\n  return returnObject;\n};\n\nconst convertEmailListToArrayOfEmailAddressObjects = function(emailList) {\n  const emailAddressObjectArray = [];\n  if (emailList) {\n    const emailArray = emailList.split(',');\n    for (let emailIter = 0; emailIter < emailArray.length; emailIter++) {\n      emailAddressObjectArray.push(getEmailAddressObjectFromString(emailArray[emailIter]));\n    }\n  }\n\n  return emailAddressObjectArray;\n};\n\nconst hasLabel = function(message, labelValue) {\n  return message.labelIds && message.labelIds.length && (message.labelIds.indexOf(labelValue) >= 0);\n};\n\nconst getFirstScalarPart = function(partToCheck) {\n  let returnObject = partToCheck;\n  _.forEach(partToCheck.headers, (header) => {\n    if(header.name === 'Content-Type' && header.value.indexOf('multipart/') > -1 && partToCheck.parts.length > 0) {\n      returnObject = getFirstScalarPart(partToCheck.parts[0]);\n    }\n  });\n  return returnObject;\n};\n\nconst mapEmailData = function(emailData) {\n  const mappedData = [];\n\n  for (let userIter = 0; userIter < emailData.length; userIter++) {\n    const mappedUser = _.assign({}, emailData[userIter], {\n      data: [],\n      success: emailData[userIter].success,\n      errorMessage: emailData[userIter].errorMessage\n    });\n\n    if (emailData[userIter].success) {\n      for (let i = 0; i < emailData[userIter].data.messages.length; i++) {\n        const originalEmailMessage = emailData[userIter].data.messages[i];\n        let mappedEmailMessage = {};\n\n        mappedEmailMessage = originalEmailMessage;\n        const messageData = originalEmailMessage.messageData;\n\n        mappedEmailMessage.messageId = originalEmailMessage.messageId;\n        mappedEmailMessage.conversationId = messageData.threadId;\n        mappedEmailMessage.dateTimeSent = moment(new Date(getHeaderValue(messageData, 'Date'))).utc().toDate();\n\n        const dateReceived = getHeaderValue(messageData, 'Received');\n        if (dateReceived) {\n          const datePartOfValue = dateReceived.split(';')[1];\n          mappedEmailMessage.dateTimeReceived = moment(new Date(datePartOfValue)).utc().toDate();\n        }\n\n        mappedEmailMessage.importance = 'Normal';\n        if (hasLabel(messageData, 'IMPORTANT')) {\n          mappedEmailMessage.importance = 'Important';\n        }\n\n        mappedEmailMessage.categories = messageData.labelIds;\n\n        if (hasLabel(messageData, 'SENT')) {\n          mappedEmailMessage.folderId = 'Sent Items';\n          mappedEmailMessage.folderName = 'Sent Items';\n        } else {\n          mappedEmailMessage.folderId = 'Inbox';\n          mappedEmailMessage.folderName = 'Inbox';\n        }\n\n        mappedEmailMessage.subject = getHeaderValue(messageData, 'Subject');\n        mappedEmailMessage.bodyPreview = messageData.snippet;\n\n        if (messageData.payload.parts && messageData.payload.parts.length > 0) {\n          const partToCheck = getFirstScalarPart(messageData.payload.parts[0]);\n          mappedEmailMessage.contentType = partToCheck.mimeType;\n          mappedEmailMessage.body = new Buffer(partToCheck.body.data, 'base64').toString();\n        }\n\n        mappedEmailMessage.isDeliveryReceiptRequested = null;\n        mappedEmailMessage.isReadReceiptRequested = null;\n        mappedEmailMessage.hasAttachments = null;\n        mappedEmailMessage.isDraft = null;\n        mappedEmailMessage.isRead = hasLabel(messageData, 'READ');\n\n        mappedEmailMessage.fromAddress = getEmailAddressObjectFromString(getHeaderValue(messageData, 'From')).address;\n        mappedEmailMessage.fromName = getEmailAddressObjectFromString(getHeaderValue(messageData, 'From')).name;\n\n        mappedEmailMessage.toRecipients =\n          convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData, 'To'));\n\n        mappedEmailMessage.ccRecipients =\n          convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData, 'Cc'));\n\n        mappedEmailMessage.bccRecipients =\n          convertEmailListToArrayOfEmailAddressObjects(getHeaderValue(messageData, 'Bcc'));\n\n        delete mappedEmailMessage.messageData;\n        mappedUser.data.push(mappedEmailMessage);\n      }\n    }\n    mappedData.push(mappedUser);\n  }\n\n  return mappedData;\n};\n\nconst getEmailData = function(emails,\n    filterStartDate,\n    filterEndDate,\n    additionalFields,\n    clientId,\n    serviceEmail,\n    privateKey,\n    apiVersion\n  ) {\n  const emailResults = [];\n  const emailResultPromises = [];\n\n  for (let emailIter = 0; emailIter < emails.length; emailIter++) {\n    //initialize emailResults with the email object passed in\n    //and add filter dates\n    emailResults[emailIter] = _.assign({}, emails[emailIter], {\n      filterStartDate: filterStartDate,\n      filterEndDate: filterEndDate\n    });\n\n    emailResultPromises.push(\n      getUserEmails(\n        clientId,\n        serviceEmail,\n        emails[emailIter].emailAfterMapping,\n        privateKey,\n        apiVersion,\n        filterStartDate,\n        filterEndDate,\n        additionalFields,\n        emailResults[emailIter]\n      )\n    );\n  }\n\n  return Promise.all(emailResultPromises)\n  .then(() => {\n    return emailResults;\n  });\n};\n\nGoogleAdapter.prototype.getBatchData = function(emails, filterStartDate, filterEndDate, additionalFields) {\n  const clientId = this._config.credentials.clientId;\n  const clientEmail = this._config.credentials.email;\n  const serviceEmail = this._config.credentials.serviceEmail;\n  const privateKey = this._config.credentials.certificate;\n  const apiVersion = this._config.options.apiVersion;\n\n  const dataAdapterRunStats = {\n    success: true,\n    runDate: moment().utc().toDate(),\n    filterStartDate: filterStartDate,\n    filterEndDate: filterEndDate,\n    emails: emails\n  };\n\n  //first try to get token for the admin - if that fails, then all will fail\n  return getAccessToken(clientId, serviceEmail, clientEmail, privateKey)\n  .then(() => {\n    return getEmailData(\n      emails,\n      filterStartDate,\n      filterEndDate,\n      additionalFields,\n      clientId,\n      serviceEmail,\n      privateKey,\n      apiVersion\n    );\n  })\n  .then((emailData) => {\n    return mapEmailData(emailData);\n  })\n  .then((mappedEmailData) => {\n    dataAdapterRunStats.results = mappedEmailData;\n    return dataAdapterRunStats;\n  })\n  .catch((err) => {\n    dataAdapterRunStats.success = false;\n    dataAdapterRunStats.errorMessage = err;\n    console.log('GoogleMail GetBatchData Error: ' + JSON.stringify(err));\n    return dataAdapterRunStats;\n  });\n};\n\nGoogleAdapter.prototype.runConnectionTest = function(connectionData) {\n  const _this = this;\n  _this._config = new GoogleMail.Configuration(connectionData.credentials);\n  const filterStartDate = moment().utc().startOf('day').add(-1, 'days').toDate();\n  const filterEndDate = moment().utc().startOf('day').toDate();\n  return _this.getBatchData([{emailAfterMapping: _this._config.credentials.email}], filterStartDate, filterEndDate, '')\n  .then((data) => {\n    if (data.success && data.results[0]) {\n      //to see if it really worked, we need to pass in the first result\n      return data.results[0];\n    } else {\n      return data;\n    }\n  });\n};\n\nGoogleAdapter.prototype.runMessageTest = function(connectionData) {\n  const _this = this;\n  _this._config = new GoogleMail.Configuration(connectionData.credentials);\n  const filterStartDate = moment().utc().startOf('day').add(-1, 'days').toDate();\n  const filterEndDate = moment().utc().startOf('day').add(1, 'days').toDate();\n  return _this\n  .getBatchData([_this._config.credentials.email], filterStartDate, filterEndDate, 'Subject,BodyPreview,Body')\n  .then((data) => {\n    console.log('runMessageTest worked');\n    console.log(data.results[0]);\n  })\n  .catch((err) => {\n    console.log('runMessageTest Error: ' + JSON.stringify(err));\n  });\n};\n"],"sourceRoot":"/source/"}