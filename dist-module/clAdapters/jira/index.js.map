{"version":3,"sources":["clAdapters/jira/index.js"],"names":["Adapter","url","request","JiraAdapter","apiVersion","prototype","makeRequest","path","uri","format","protocol","credentials","hostname","host","port","pathname","authorizationString","Buffer","username","password","toString","options","method","headers","resolve","error","response","body","errorMessage","success","statusCode","code","message","data","getIssueHierarchy","runConnectionTest"],"mappings":";;;;;;;;AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,OAAP,MAAoB,SAApB;;IAEqBC,W;;;AACnB,yBAAc;AAAA;;AAAA;;AAEZ,UAAKC,UAAL,GAAkB,CAAlB;AAFY;AAGb;;;;2BAEM,CACN;;;;EAPsCJ,O;;eAApBG,W;;;AAUrBA,YAAYE,SAAZ,CAAsBC,WAAtB,GAAoC,UAASC,IAAT,EAAe;AACjD,MAAMC,MAAMP,IAAIQ,MAAJ,CAAW;AACrBC,cAAU,KAAKC,WAAL,CAAiBD,QAAjB,IAA6B,OADlB;AAErBE,cAAU,KAAKD,WAAL,CAAiBE,IAFN;AAGrBC,UAAM,KAAKH,WAAL,CAAiBG,IAHF;AAIrBC,cAAU,cAAc,KAAKX,UAAnB,GAAgC,GAAhC,GAAsCG;AAJ3B,GAAX,CAAZ;;AAOA,MAAMS,sBAAsB,IAAIC,MAAJ,CAAW,KAAKN,WAAL,CAAiBO,QAAjB,GAA4B,GAA5B,GAAkC,KAAKP,WAAL,CAAiBQ,QAA9D,EAAwEC,QAAxE,CAAiF,QAAjF,CAA5B;;AAEA,MAAMC,UAAU;AACdb,SAAKA,GADS;AAEdc,YAAQ,KAFM;AAGdC,aAAS;AACP,uBAAiB,WAAWP;AADrB;AAHK,GAAhB;;AAQA,SAAO,aAAY,UAACQ,OAAD,EAAa;AAC9BtB,YAAQmB,OAAR,EAAiB,UAACI,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AAC1C,UAAIC,eAAe,IAAnB;AACA,UAAIC,UAAUH,YAAYA,SAASI,UAAT,GAAsB,GAAhD;;AAEA,UAAIL,KAAJ,EAAW;AACTI,kBAAU,KAAV;AACA,YAAIJ,MAAMM,IAAN,KAAe,cAAnB,EAAmC;AACjCH,yBAAe,oCAAf;AACD;AACF;;AAED,UAAIF,YAAYA,SAASI,UAAT,KAAwB,GAAxC,EAA6C;AAC3CD,kBAAU,KAAV;AACAD,uBAAe,mCAAf;AACD;;AAEDJ,cAAQ;AACNO,cAAMF,UAAU,GAAV,GAAgB,GADhB;AAENG,iBAASJ,gBAAgBH,KAFnB;AAGNQ,cAAMN,IAHA;AAINE,iBAASA;AAJH,OAAR;AAMD,KAtBD;AAuBD,GAxBM,CAAP;AAyBD,CA3CD;;AA6CA1B,YAAYE,SAAZ,CAAsB6B,iBAAtB,8CAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAC3B,KAAK5B,WAAL,CAAiB,kBAAjB,CAD2B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1C;;AAIAH,YAAYE,SAAZ,CAAsB8B,iBAAtB,8CAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAC3B,KAAK7B,WAAL,CAAiB,QAAjB,CAD2B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1C","file":"clAdapters/jira/index.js","sourcesContent":["import Adapter from '../base/Adapter';\nimport url from 'url';\nimport request from 'request';\n\nexport default class JiraAdapter extends Adapter {\n  constructor() {\n    super();\n    this.apiVersion = 2;\n  }\n\n  init() {\n  }\n}\n\nJiraAdapter.prototype.makeRequest = function(path) {\n  const uri = url.format({\n    protocol: this.credentials.protocol || 'https',\n    hostname: this.credentials.host,\n    port: this.credentials.port,\n    pathname: 'rest/api/' + this.apiVersion + '/' + path\n  });\n\n  const authorizationString = new Buffer(this.credentials.username + ':' + this.credentials.password).toString('base64');\n\n  const options = {\n    uri: uri,\n    method: 'GET',\n    headers: {\n      'Authorization': 'Basic ' + authorizationString\n    }\n  };\n\n  return new Promise((resolve) => {\n    request(options, (error, response, body) => {\n      let errorMessage = null;\n      let success = response && response.statusCode < 400;\n\n      if (error) {\n        success = false;\n        if (error.code === 'ECONNREFUSED') {\n          errorMessage = 'Failed to connect to JIRA adapter.';\n        }\n      }\n\n      if (response && response.statusCode === 401) {\n        success = false;\n        errorMessage = 'Failed to authorize JIRA adapter.';\n      }\n\n      resolve({\n        code: success ? 200 : 500,\n        message: errorMessage || error,\n        data: body,\n        success: success\n      });\n    });\n  });\n};\n\nJiraAdapter.prototype.getIssueHierarchy = async function() {\n  return await this.makeRequest('issue/createmeta');\n};\n\nJiraAdapter.prototype.runConnectionTest = async function() {\n  return await this.makeRequest('myself');\n};\n"],"sourceRoot":"/source/"}