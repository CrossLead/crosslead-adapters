{"version":3,"sources":["clAdapters/netsuite/index.js"],"names":["_","util","BaseAdapter","Fields","NetSuite","implementedFields","Types","USER","EXT_ENTITY","NetSuiteAdapter","call","Object","defineProperty","get","credentials","account","_searchIds","_cachedDataByFieldType","inherits","prototype","init","_this","_config","Configuration","_service","Service","then","msg","console","log","email","role","reset","_setCacheValue","field","limit","skip","data","fieldCache","type","entityType","cloneDeep","_getCacheValue","undefined","getFieldData","query","resolve","reject","preferences","Search","SearchPreferences","pageSize","setSearchPreferences","extId","Error","cached","pageIndex","search","Math","floor","searchMoreWithId","result","count","searchResult","totalRecords","results","recordList","record","EmployeeSearchBasic","totalPages","searchId","searchRowList","searchRow","CustomerSearchAdvanced","columns","CustomerSearchRow","basic","CustomerSearchRowBasic","entityIdField","SearchColumnStringField","searchColumnFields","push","internalIdField","SearchColumnSelectField","balanceField","SearchColumnDoubleField","overdueBalanceField","daysOverdueField","SearchColumnLongField"],"mappings":"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","file":"clAdapters/netsuite/index.js","sourcesContent":["import * as _ from 'lodash';\nimport * as util from 'util';\nimport BaseAdapter from '../base/Adapter';\nimport * as Fields from '../fields';\nimport * as NetSuite from 'netsuite-js';\n\nconst implementedFields = {};\n\nimplementedFields[Fields.Types.USER] = {\n  'department#internalId': true,\n  'supervisor#internalId': true\n};\nimplementedFields[Fields.Types.EXT_ENTITY] = {\n  'customer#balance': true,\n  'customer#overdueBalance': true,\n  'customer#daysOverdue': true\n};\n\n/**\n * NetSuiteAdapter\n *\n * `credentials` format:\n * ```\n * {\n *   email: 'test@test.com',\n *   password: 'password',\n *   account: 123456,\n *   role: 3\n * }\n * ```\n * @class\n * @return {NetSuiteAdapter}\n */\nexport default function NetSuiteAdapter() {\n  BaseAdapter.call(this);\n\n  /**\n   * @override\n   */\n  Object.defineProperty(this, 'extEntityKey', {\n    get: function() {\n      return this.credentials.account;\n    }\n  });\n\n  // SearchId cache, one per field\n  this._searchIds = {};\n\n  // Cache results by field type -> limit (pagesize) -> skip, e.g.:\n  // this._cachedDataByFieldType[Fields.Types.USER][10][3]\n  // represents all user records for search page size 10 starting at index 3.\n  // EXT_ENTITY fields are have an additional layer for entityType, e.g.:\n  // this._cachedDataByFieldType[Fields.Types.EXT_ENTITY]['customer'][10][3]\n  this._cachedDataByFieldType = {};\n};\n\nutil.inherits(NetSuiteAdapter, BaseAdapter);\n\n/**\n * @override\n */\nNetSuiteAdapter.prototype.init = function() {\n  const _this = this;\n  this._config = new NetSuite.Configuration(this.credentials);\n  this._service = new NetSuite.Service(this._config);\n  return this._service\n    .init()\n    .then(( /*client*/ ) => {\n      const msg = 'Successfully initialized NetSuiteAdapter for email: %s, account: %s, role: %d';\n      console.log(msg, _this.credentials.email, _this.credentials.account, _this.credentials.role);\n      return _this;\n    });\n};\n\n/**\n * @override\n */\nNetSuiteAdapter.prototype.reset = function() {\n  this._searchIds = {};\n  this._cachedDataByFieldType = {};\n  delete this._config;\n  delete this._service;\n};\n\nNetSuiteAdapter.prototype._setCacheValue = function(field, limit, skip, data) {\n  let fieldCache = this._cachedDataByFieldType[field.type] = this._cachedDataByFieldType[field.type] || {};\n\n  if (field.type === Fields.Types.EXT_ENTITY) {\n    fieldCache\n      = this._cachedDataByFieldType[field.type][field.entityType]\n      = this._cachedDataByFieldType[field.type][field.entityType] || {};\n  }\n\n  fieldCache[limit] = fieldCache[limit] || {};\n  fieldCache[limit][skip] = _.cloneDeep(data);\n};\n\nNetSuiteAdapter.prototype._getCacheValue = function(field, limit, skip) {\n  let fieldCache = this._cachedDataByFieldType[field.type];\n  if (!fieldCache) {\n    return undefined;\n  }\n\n  if (field.type === Fields.Types.EXT_ENTITY) {\n    fieldCache = fieldCache[field.entityType];\n  }\n  return fieldCache &&\n    fieldCache[limit] &&\n    fieldCache[limit][skip];\n};\n\n/**\n * @override\n */\nNetSuiteAdapter.prototype.getFieldData = function(field, query) {\n  console.log(field);\n  const _this = this;\n  return new Promise((resolve, reject) => {\n    query = query || {};\n\n    const preferences = new NetSuite.Search.SearchPreferences();\n    preferences.pageSize = query.limit || 10;\n    _this._service.setSearchPreferences(preferences);\n\n    if (!implementedFields[field.type] || !implementedFields[field.type][field.extId]) {\n      return reject(new Error('Unknown field or retrieval NYI by NetSuiteAdapter:', field));\n    }\n\n    // Cache hit?\n    const cached = _this._getCacheValue(field, preferences.pageSize, query.skip);\n    if (cached) {\n      return resolve(cached);\n    }\n\n    let pageIndex, search;\n    if (field.type === Fields.Types.USER) {\n      if (query.skip) {\n        if (!_this._searchIds[field.extId]) {\n          throw new Error('NetSuite paged searches must start with an initial search to generate a search session');\n        }\n        // Round down then add 1 since netsuite page indices are one-based\n        pageIndex = Math.floor(query.skip / preferences.pageSize) + 1;\n        console.log('searchMoreWithId with pageIndex \"%d\"', pageIndex);\n        return _this._service.searchMoreWithId(_this._searchIds[field.extId], pageIndex)\n          .then((result) => {\n            const data = {\n              count: result.searchResult.totalRecords,\n              results: result.searchResult.recordList.record\n            };\n            _this._setCacheValue(field, preferences.pageSize, query.skip, data);\n            return resolve(data);\n          });\n      } else {\n        // No criteria right now\n        search = new NetSuite.Search.EmployeeSearchBasic();\n        return _this._service.search(search)\n          .then((result) => {\n            if (result.searchResult.totalPages > 1) {\n              _this._searchIds[field.extId] = result.searchResult.searchId;\n            }\n\n            const data = {\n              count: result.searchResult.totalRecords,\n              results: result.searchResult.recordList.record\n            };\n            _this._setCacheValue(field, preferences.pageSize, query.skip, data);\n            return resolve(data);\n          });\n      }\n    } else if (field.type === Fields.Types.EXT_ENTITY) {\n      if (field.entityType === 'customer') {\n        if (query.skip) {\n          if (!_this._searchIds[field.extId]) {\n            throw new Error('NetSuite paged searches must start with an initial search to generate a search session');\n          }\n          // Round down then add 1 since netsuite page indices are one-based\n          pageIndex = Math.floor(query.skip / preferences.pageSize) + 1;\n          console.log('searchMoreWithId with pageIndex \"%d\"', pageIndex);\n          return _this._service.searchMoreWithId(_this._searchIds[field.extId], pageIndex)\n            .then((result) => {\n              const data = {\n                count: result.searchResult.totalRecords,\n                results: result.searchResult.searchRowList.searchRow\n              };\n              _this._setCacheValue(field, preferences.pageSize, query.skip, data);\n              return resolve(data);\n            });\n        } else {\n          // No criteria right now\n          search = new NetSuite.Search.CustomerSearchAdvanced();\n          search.columns = new NetSuite.Search.CustomerSearchRow();\n          search.columns.basic = new NetSuite.Search.CustomerSearchRowBasic();\n\n          // For now, always include all SearchColumn fields since storing an extra field\n          // is far less costly than having to do another roundtrip to retrieve another field\n          const entityIdField = new NetSuite.Search.Fields.SearchColumnStringField();\n          entityIdField.field = 'entityId';\n          search.columns.basic.searchColumnFields.push(entityIdField);\n\n          const internalIdField = new NetSuite.Search.Fields.SearchColumnSelectField();\n          internalIdField.field = 'internalId';\n          search.columns.basic.searchColumnFields.push(internalIdField);\n\n          const balanceField = new NetSuite.Search.Fields.SearchColumnDoubleField();\n          balanceField.field = 'balance';\n          search.columns.basic.searchColumnFields.push(balanceField);\n\n          const overdueBalanceField = new NetSuite.Search.Fields.SearchColumnDoubleField();\n          overdueBalanceField.field = 'overdueBalance';\n          search.columns.basic.searchColumnFields.push(overdueBalanceField);\n\n          const daysOverdueField = new NetSuite.Search.Fields.SearchColumnLongField();\n          daysOverdueField.field = 'daysOverdue';\n          search.columns.basic.searchColumnFields.push(daysOverdueField);\n\n          return _this._service.search(search)\n            .then((result) => {\n              if (result.searchResult.totalPages > 1) {\n                _this._searchIds[field.extId] = result.searchResult.searchId;\n              }\n\n              const data = {\n                count: result.searchResult.totalRecords,\n                results: result.searchResult.searchRowList.searchRow\n              };\n              _this._setCacheValue(field, preferences.pageSize, query.skip, data);\n              return resolve(data);\n            });\n        }\n      } else {\n        return reject(new Error('Unknown EXT_ENTITY entityType:', field.entityType));\n      }\n    }\n  });\n};\n"],"sourceRoot":"/source/"}